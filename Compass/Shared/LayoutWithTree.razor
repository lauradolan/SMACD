@using SMACD.Artifacts
@inherits LayoutComponentBase

<div id="wrapper">
    <LeftNav />
    <div class="d-flex flex-column" id="content-wrapper">
        <div id="content">
            <TopNav />
            <div class="d-flex">
                <div class="shadow-lg flex-grow-1 sidebar p-0 bg-secondary text-white" style="min-width: 30em; font-size: 10px">
                    @if (Program.Session == null || Program.Session.Artifacts == null)
                    {
                        <p><em>Loading...</em></p>
                    }
                    else
                    {
                        <ul class="tree" style="padding: 10px;padding-right: 1em;padding-bottom: 1em;padding-left: 1em;padding-top: 0.5em;color:#fff">
                            @foreach (var item in Program.Session.Artifacts.Children)
                            {
                                <ArtifactTreeNode Artifact="@item" IdentifierClicked="@((a) => IdentifierClicked(a))" />
                            }
                        </ul>
                    }
                </div>
                <div class="container flex-row flex-grow-1">
                    @DynamicFragment
                </div>
            </div>
        </div>
    </div><a class="border rounded d-inline scroll-to-top" href="#page-top"><i class="fas fa-angle-up"></i></a>
</div>

@functions {

    [Parameter]
    public Artifact Artifact { get; set; } = Program.Session?.Artifacts;

    private RenderFragment DynamicFragment { get; set; }

    void IdentifierClicked(Artifact artifact)
    {
        Artifact = artifact;
        if (!(artifact is RootArtifact))
            InitializeArtifact();
    }

    protected override Task OnInitializedAsync() => InitializeArtifact();

    protected Task InitializeArtifact()
    {
        if (Artifact == null)
            return Task.FromResult(0);

        DynamicFragment = builder =>
        {
            Type componentType = null;
            if (!string.IsNullOrEmpty(Artifact.ArtifactSummaryViewTypeName))
            {
                // Gotta find that view!

                // First, see if we can resolve this cheaply.
                componentType = Type.GetType(Artifact.ArtifactSummaryViewTypeName);

                // Try resolving inside the Artifacts assembly
                if (componentType == null && Artifact.ArtifactSummaryViewTypeName.Contains(".Artifacts."))
                {
                    componentType = System.Reflection.Assembly.GetAssembly(typeof(SMACD.Artifacts.Views.DefaultArtifactView)).GetType(Artifact.ArtifactSummaryViewTypeName);
                }

                // Try resolving inside the loaded extensions
                if (componentType == null)
                {
                    componentType = Synthesys.ExtensionToolbox.Instance.ExtensionLibraries.Select(l => l.Assembly.GetType(Artifact.ArtifactSummaryViewTypeName)).FirstOrDefault(a => a != null);
                }
            }

            if (componentType == null)
                componentType = typeof(SMACD.Artifacts.Views.DefaultArtifactView);

            builder.OpenComponent(0, componentType);
            if (!(Artifact is RootArtifact))
                builder.AddAttribute(1, "Artifact", Artifact);
            else
                builder.AddAttribute(1, "Artifact", (object)null);
            builder.CloseComponent();
        };
        return Task.FromResult(0);
    }
}