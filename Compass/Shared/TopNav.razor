@using System.IO
@using Blazor.FileReader
@using SMACD.Data
@inject IFileReaderService fileReaderService;
@{
    var vulnerabilities = Program.GetAllVulnerabilities();
    var score = Program.Session != null ? Math.Floor(Program.Session.Reports.Average(r => r.AdjustedScore)) : 0;
    var numReports = Program.Session != null ? Program.Session.Reports.Count : 0;

    string scoreColor = "";
    if (score < 33)
    {
        scoreColor = "badge-danger";
    }
    else if (score < 66)
    {
        scoreColor = "badge-warning";
    }
    else
    {
        scoreColor = "badge-primary";
    }
}

<nav class="navbar navbar-light navbar-expand bg-white shadow mb-4 topbar static-top">
    <div class="container-fluid">
        <button class="btn btn-link d-md-none rounded-circle mr-3" id="sidebarToggleTop" type="button"><i class="fas fa-bars"></i></button>
        <form class="form-inline d-none d-sm-inline-block mr-auto ml-md-3 my-2 my-md-0 mw-100 navbar-search">
            <div class="input-group">
                <input class="bg-light form-control border-0 small" type="text" placeholder="Search for ...">
                <div class="input-group-append"><button class="btn btn-primary py-0" type="button"><i class="fas fa-search"></i></button></div>
            </div>
        </form>
        <ul class="nav navbar-nav flex-nowrap ml-auto">
            <li class="nav-item dropdown show d-sm-none no-arrow">
                <a class="dropdown-toggle nav-link" data-toggle="dropdown" aria-expanded="true" href="#"><i class="fas fa-search"></i></a>
                <div class="dropdown-menu show dropdown-menu-right p-3 animated--grow-in" role="menu" aria-labelledby="searchDropdown">
                    <form class="form-inline mr-auto navbar-search w-100">
                        <div class="input-group">
                            <input class="bg-light form-control border-0 small" type="text" placeholder="Search for ...">
                            <div class="input-group-append"><button class="btn btn-primary py-0" type="button"><i class="fas fa-search"></i></button></div>
                        </div>
                    </form>
                </div>
            </li>
            <li class="nav-item dropdown no-arrow mx-1" role="presentation">
            <li class="nav-item dropdown no-arrow">
                <a class="dropdown-toggle nav-link" data-toggle="dropdown" aria-expanded="false" href="#"><span class="badge badge-primary badge-counter">@vulnerabilities.Count()</span><i class="fas fa-bug fa-fw"></i></a>
                <div class="dropdown-menu dropdown-menu-right dropdown-list dropdown-menu-right animated--grow-in"
                     role="menu">
                    <h6 class="dropdown-header">vulnerabilities located</h6>
                    @foreach (var vuln in vulnerabilities.OrderByDescending(v => v.RiskLevel).Take(5))
                    {
                        <VulnerabilitySummary Vulnerability=@vuln />
                        <a class="text-center dropdown-item small text-gray-500" href="#">Show All</a>
                    }
                    @if (vulnerabilities.Count == 0)
                    {
                        <a class="text-center dropdown-item small text-gray-500" href="#">No Vulnerabilities Found</a>
                    }

                </div>
            </li>
            </li>
            <li class="nav-item dropdown no-arrow mx-1" role="presentation">
                <li class="nav-item dropdown no-arrow"><a class="dropdown-toggle nav-link" data-toggle="dropdown" aria-expanded="false" href="#"><i class="fas fa-medal fa-fw"></i><span class="badge badge-danger badge-counter">@score</span></a>
                    <div class="dropdown-menu dropdown-menu-right dropdown-list dropdown-menu-right animated--grow-in"
                         role="menu">
                        <h6 class="dropdown-header">Score center</h6>
                        <a class="d-flex align-items-center dropdown-item p-0 border-left-0" href="#">
                            <div class="bg-primary mr-3 align-middle text-center" style="height: 1.8em;font-size: 32px;min-width: 5em;padding: 5px;width: 5em;"><span class="text-white font-weight-bolder" style="top: 0.5em;position: relative;">@(score)%</span></div>
                            <div class="font-weight-bold">
                                <div class="text-truncate"><span>Average Score</span></div>
                                <p class="small text-gray-500 mb-0">from @numReports Reports</p>
                            </div>
                        </a>
                    </div>
                </li>
                <div class="shadow dropdown-list dropdown-menu dropdown-menu-right" aria-labelledby="alertsDropdown"></div>
            </li>
            <div class="d-none d-sm-block topbar-divider"></div>
            <li class="nav-item dropdown no-arrow" role="presentation">
            <li class="nav-item dropdown no-arrow">
                <a class="dropdown-toggle nav-link" data-toggle="dropdown" aria-expanded="false" href="#">
                    @if (!string.IsNullOrEmpty(Program.LoadedFileName))
                    {
                        <span class="d-none d-lg-inline mr-2 text-gray-900 small">@Program.LoadedFileName</span>
                    }
                    else
                    {
                        <span class="d-none d-lg-inline mr-2 text-gray-600 small">No File Loaded</span>
                    }
                    <i class="fa fa-angle-down"></i>
                </a>                <div class="dropdown-menu shadow dropdown-menu-right animated--grow-in"
                                         role="menu">
                    <a class="dropdown-item" role="presentation" onclick="$('#inputTypeFileElement').click(); return false;" href="#"><i class="fas fa-upload fa-sm fa-fw mr-2 text-gray-400"></i>&nbsp;Load File</a><a class="dropdown-item" role="presentation" href="#"><i class="fas fa-pencil-alt fa-sm fa-fw mr-2 text-gray-400"></i>&nbsp;Generate New File</a>
                    <div class="dropdown-divider" role="presentation"></div><a class="dropdown-item" role="presentation" href="#"><i class="fas fa-briefcase fa-sm fa-fw mr-2 text-gray-400"></i>&nbsp;Update System Map</a><a class="dropdown-item" role="presentation" href="#"><i class="fas fa-bullseye fa-sm fa-fw mr-2 text-gray-400"></i>&nbsp;Update Target Map</a>
                </div>
            </li>
            </li>
        </ul>
    </div>
</nav>
<input style="display: none;" type="file" id="inputTypeFileElement" @onchange=ReadFile @ref=inputTypeFileElement />

@functions {

    public ElementReference inputTypeFileElement;

    public async Task ReadFile()
    {
        var file = (await fileReaderService.CreateReference(inputTypeFileElement).EnumerateFilesAsync()).FirstOrDefault();
        {
            var fileInfo = await file.ReadFileInfoAsync();
            using (MemoryStream memoryStream = await file.CreateMemoryStreamAsync(4096))
            {
                if (fileInfo.Name.EndsWith(".yaml"))
                {
                    using (var sr = new StreamReader(memoryStream))
                    {
                        var yaml = sr.ReadToEnd();
                        Program.ServiceMap = SMACD.Data.ServiceMapFile.GetServiceMapFromYaml(yaml);
                        Program.Session = new Synthesys.Session { ServiceMapYaml = yaml };
                    }
                }
                else
                {
                    Program.Session = new Synthesys.Session(memoryStream);
                    Program.ServiceMap = ServiceMapFile.GetServiceMapFromYaml(Program.Session.ServiceMapYaml);
                }
            }
            Program.LoadedFileName = Path.GetFileName(fileInfo.Name);
        }
    }
}