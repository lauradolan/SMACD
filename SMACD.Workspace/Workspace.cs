using Microsoft.Extensions.Logging;
using Polenter.Serialization;
using SMACD.Workspace.Actions;
using SMACD.Workspace.Artifacts;
using SMACD.Workspace.Libraries;
using SMACD.Workspace.Targets;
using SMACD.Workspace.Tasks;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;

namespace SMACD.Workspace
{
    /// <summary>
    /// Workspace linking Toolboxes, Artifacts, Reports, and Actions
    /// </summary>
    public class Workspace
    {
        /// <summary>
        /// Actions available in the system to execute
        public ActionToolbox Actions { get; }

        /// <summary>
        /// Libraries loaded in the system
        /// </summary>
        public LibraryToolbox Libraries { get; }

        /// <summary>
        /// Services running in the system
        /// </summary>
        public ServiceToolbox Services { get; }

        /// <summary>
        /// Targets available to act upon, and registration for new Targets
        /// </summary>
        public TargetToolbox Targets { get; }

        /// <summary>
        /// Tasks running in this operation, and enqueue ability
        /// </summary>
        public TaskToolbox Tasks { get; }

        /// <summary>
        /// Triggers registered in this system
        /// </summary>
        public TriggerToolbox Triggers { get; }

        /// <summary>
        /// Root of artifact tree
        /// </summary>
        public Artifact Artifacts { get; private set; } = new Artifact();

        /// <summary>
        /// Reports generated by elements in this Workspace
        /// </summary>
        public List<ActionSpecificReport> Reports { get; } = new List<ActionSpecificReport>();

        protected ILogger Logger { get; set; } = WorkspaceToolbox.LogFactory.CreateLogger("Workspace");

        /// <summary>
        /// Creates a new Workspace wrapping a given Artifact root
        /// </summary>
        /// <param name="artifactRoot">Artifact root</param>
        public Workspace(Artifact artifactRoot) : this()
        {
            Artifacts = artifactRoot;
        }

        public Workspace()
        {
            Actions = new ActionToolbox(this);
            Targets = new TargetToolbox(this);
            Libraries = new LibraryToolbox(this);
            Tasks = new TaskToolbox(this);
            Triggers = new TriggerToolbox(this);

            Services = new ServiceToolbox(this);
        }

        internal class WorkspaceSaveStructure
        {
            public Artifact ArtifactRoot { get; set; }
            public List<TargetDescriptor> Targets { get; set; } = new List<TargetDescriptor>();
        }

        /// <summary>
        /// Save Workspace to Stream
        /// </summary>
        /// <param name="stream">Target stream</param>
        public void Save(Stream stream)
        {
            Unbind();

            // Save content
            new SharpSerializer(true).Serialize(new WorkspaceSaveStructure()
            {
                ArtifactRoot = Artifacts,
                Targets = Targets.RegisteredTargets.Values.ToList()
            }, stream);

            // Rebind everything we previously scrubbed so the Workspace is still usable
            Rebind();
        }

        /// <summary>
        /// Unbind all pointers in Workspace structures.
        /// 
        /// This should be called before a manual save.
        /// </summary>
        public void Unbind()
        {
            foreach (var el in Reports)
            {
                el.GeneratingTask.Result = null;
                ((QueuedTaskDescriptor)el.GeneratingTask).ActionTask = null;
            }

            // Scrub convenience links for Artifacts
            Action<Artifact> recursiveScrubber = null;
            recursiveScrubber = item =>
            {
                item.Root = null;
                item.Parent = null;
                foreach (var child in item.Children) recursiveScrubber(child);
            };
            recursiveScrubber(Artifacts);
        }

        /// <summary>
        /// Load a Workspace
        /// </summary>
        /// <param name="source"></param>
        public void Load(string source)
        {
            using (var fs = new StreamReader(source))
            {
                var structure = (WorkspaceSaveStructure)new SharpSerializer(true).Deserialize(fs.BaseStream);
                Artifacts = structure.ArtifactRoot;
                foreach (var target in structure.Targets)
                    Targets.RegisterTarget(target);
            }

            // Rebind report results (and fake an ActionTask)
            foreach (var el in Reports)
            {
                el.GeneratingTask.Result = el;
                ((QueuedTaskDescriptor)el.GeneratingTask).ActionTask = Task.Run(() => el);
            }

            Rebind();
        }

        /// <summary>
        /// Rebind all pointers in Workspace structures.
        /// 
        /// This should be called after a manual load, or if Unbind() is called
        /// </summary>
        public void Rebind()
        {
            // Rebind report results (and fake an ActionTask)
            foreach (var el in Reports)
            {
                el.GeneratingTask.Result = el;
                ((QueuedTaskDescriptor)el.GeneratingTask).ActionTask = Task.Run(() => el);
            }

            // Rebind Artifact parents and roots
            Action<Artifact, Artifact> recursiveRebinder = null;
            recursiveRebinder = (item, parent) =>
            {
                if (parent != null)
                    item.Parent = parent;
                item.Root = Artifacts;
                foreach (var child in item.Children)
                    recursiveRebinder(child, item);
            };
            recursiveRebinder(Artifacts, null);
        }
    }
}
