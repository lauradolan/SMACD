using System.Collections.Generic;
using System.Linq;
using SMACD.Shared.Data;
using SMACD.Shared.Resources;

namespace SMACD.Shared.Plugins.Scorers
{
    /// <summary>
    ///     Represents the aggregation of all Plugin outputs to show an overarching security view of the application being
    ///     mapped
    /// </summary>
    public class VulnerabilitySummary
    {
        /// <summary>
        ///     Resources discovered by the test system that were not specified on the Resource Map
        /// </summary>
        public IList<Resource> DiscoveredResources { get; set; } = new List<Resource>();

        /// <summary>
        ///     Items identified as vulnerabilities
        /// </summary>
        public IList<VulnerabilityItem> VulnerabilityItems { get; set; } = new List<VulnerabilityItem>();

        /// <summary>
        ///     Plugin variables
        /// </summary>
        public IDictionary<string, string> PluginVariables { get; set; } = new Dictionary<string, string>();

        /// <summary>
        ///     Final score based on basic averaging of scores
        /// </summary>
        public double ScoreAvg =>
            VulnerabilityItems.Any() ? VulnerabilityItems.Average(v => v.CalculatedFinalScore) : 0;

        /// <summary>
        ///     Final score based on sum of values (each out of 1.0)
        /// </summary>
        public double ScoreSum => VulnerabilityItems.Any() ? VulnerabilityItems.Sum(v => v.CalculatedFinalScore) : 0;
    }

    /// <summary>
    ///     Represents a single vulnerability in a mapped application, as well as its scores
    /// </summary>
    public class VulnerabilityItem
    {
        /// <summary>
        ///     Plugin Pointer that generated this item
        /// </summary>
        public PluginPointerModel PluginPointer { get; set; }

        /// <summary>
        ///     Plugin result objects that generate this (more than one means correlation)
        /// </summary>
        //public List<PluginResult> PluginResults { get; set; }

        /// <summary>
        ///     Extra data added by plugins
        /// </summary>
        public Dictionary<string, object> Extras { get; set; } = new Dictionary<string, object>();

        /// <summary>
        ///     Affected Resources
        /// </summary>
        public IList<Resource> Resources { get; set; } = new List<Resource>();

        /// <summary>
        ///     Description of vulnerability
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        ///     Raw score for this item according to the plugin
        /// </summary>
        public int PluginRawScore { get; set; }

        /// <summary>
        ///     Adjusted (out of 100) score for item
        /// </summary>
        public double PluginAdjustedScore { get; set; }

        /// <summary>
        ///     Final relative score (including weight) for this item
        /// </summary>
        public double CalculatedFinalScore => PluginPointer == null
            ? -1
            : /*PluginManager.Instance.GetInstance(PluginPointer).Confidence * */PluginAdjustedScore;
    }
}