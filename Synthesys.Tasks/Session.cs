using Newtonsoft.Json;
using SMACD.AppTree;
using Synthesys.SDK;
using Synthesys.SDK.Triggers;
using System.Collections.Generic;
using System.IO;
using System.IO.Compression;
using System.Text;

namespace Synthesys.Tasks
{
    public class Session
    {
        /// <summary>
        ///     Create a Session from a previously exported Session
        /// </summary>
        /// <param name="existingSession">Previously exported Session</param>
        /// <returns>Imported and linked Session</returns>
        public static Session Import(Stream existingSession)
        {
            using (DeflateStream decompressor = new DeflateStream(existingSession, CompressionMode.Decompress, true))
            {
                MemoryStream ms = new MemoryStream();
                decompressor.CopyTo(ms);
                ms.Seek(0, SeekOrigin.Begin);

                Session result = JsonConvert.DeserializeObject<Session>(
                    Encoding.Unicode.GetString(ms.ToArray()),
                    new JsonSerializerSettings
                    {
                        TypeNameAssemblyFormatHandling = TypeNameAssemblyFormatHandling.Simple,
                        TypeNameHandling = TypeNameHandling.All,
                        SerializationBinder = new AggressiveTypeResolutionBinder(),
                        ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                    });

                result.Artifacts.Connect();
                result.BindArtifactTriggers();

                return result;
            }
        }

        /// <summary>
        ///     Create a new Session
        /// </summary>
        public Session()
        {
            if (Artifacts == null)
            {
                Artifacts = new RootNode();
            }

            BindArtifactTriggers();
        }

        /// <summary>
        ///     Task queue
        /// </summary>
        [JsonIgnore]
        public TaskToolbox Tasks { get; } = new TaskToolbox();

        /// <summary>
        ///     Artifact tree root
        /// </summary>
        public RootNode Artifacts { get; }

        /// <summary>
        ///     Reports which have been generated by Extensions in this Session
        /// </summary>
        public List<ExtensionReport> Reports { get; } = new List<ExtensionReport>();

        /// <summary>
        ///     Service Map YAML generating this Session
        /// </summary>
        public string ServiceMapYaml { get; set; }

        /// <summary>
        ///     Export the Session's reports and Artifacts to a Stream
        /// </summary>
        /// <param name="data">Stream to contain Session data</param>
        public void Export(Stream data)
        {
            using (DeflateStream compressor = new DeflateStream(data, CompressionMode.Compress))
            {
                string str = JsonConvert.SerializeObject(this, new JsonSerializerSettings
                {
                    TypeNameAssemblyFormatHandling = TypeNameAssemblyFormatHandling.Simple,
                    TypeNameHandling = TypeNameHandling.All,
                    SerializationBinder = new AggressiveTypeResolutionBinder(),
                    ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                });
                compressor.Write(Encoding.Unicode.GetBytes(str));
            }
        }

        private void BindArtifactTriggers()
        {
            Artifacts.ArtifactChanged += artifact =>
            {
                List<SDK.Extensions.ReactionExtension> triggered =
                    ExtensionToolbox.Instance.GetReactionExtensionsTriggeredBy(artifact, AppTreeNodeEvents.IsUpdated);
                foreach (SDK.Extensions.ReactionExtension item in triggered)
                {
                    item.React(TriggerDescriptor.ArtifactTrigger(
                        artifact,
                        AppTreeNodeEvents.IsUpdated));
                }
            };
            Artifacts.ArtifactChildAdded += artifact =>
            {
                artifact = artifact.Parent; // this event returns the child
                List<SDK.Extensions.ReactionExtension> triggered =
                    ExtensionToolbox.Instance.GetReactionExtensionsTriggeredBy(artifact, AppTreeNodeEvents.AddsChild);
                foreach (SDK.Extensions.ReactionExtension item in triggered)
                {
                    item.React(TriggerDescriptor.ArtifactTrigger(
                        artifact,
                        AppTreeNodeEvents.AddsChild));
                }
            };
            Artifacts.ArtifactCreated += artifact =>
            {
                List<SDK.Extensions.ReactionExtension> triggered =
                    ExtensionToolbox.Instance.GetReactionExtensionsTriggeredBy(artifact, AppTreeNodeEvents.IsCreated);
                foreach (SDK.Extensions.ReactionExtension item in triggered)
                {
                    item.React(TriggerDescriptor.ArtifactTrigger(
                        artifact,
                        AppTreeNodeEvents.IsCreated));
                }
            };
        }
    }
}