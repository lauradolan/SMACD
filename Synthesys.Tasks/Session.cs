using System.Collections.Generic;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Text;
using Newtonsoft.Json;
using SMACD.Artifacts;
using Synthesys.SDK;
using Synthesys.SDK.Triggers;

namespace Synthesys.Tasks
{
    public class Session
    {
        /// <summary>
        ///     Create a Session from a previously exported Session
        /// </summary>
        /// <param name="existingSession">Previously exported Session</param>
        /// <returns>Imported and linked Session</returns>
        public static Session Import(Stream existingSession)
        {
            using (var decompressor = new DeflateStream(existingSession, CompressionMode.Decompress, true))
            {
                var ms = new MemoryStream();
                decompressor.CopyTo(ms);
                ms.Seek(0, SeekOrigin.Begin);

                var result = JsonConvert.DeserializeObject<Session>(
                    Encoding.Unicode.GetString(ms.ToArray()),
                    new JsonSerializerSettings
                    {
                        TypeNameAssemblyFormatHandling = TypeNameAssemblyFormatHandling.Simple,
                        TypeNameHandling = TypeNameHandling.All,
                        SerializationBinder = new AggressiveTypeResolutionBinder(),
                        ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                    });

                result.BindArtifactTriggers();

                return result;
            }
        }

        /// <summary>
        ///     Create a new Session
        /// </summary>
        public Session()
        {
            if (Artifacts == null) Artifacts = new RootArtifact();
            BindArtifactTriggers();
        }

        /// <summary>
        ///     Task queue
        /// </summary>
        [JsonIgnore]
        public TaskToolbox Tasks { get; } = new TaskToolbox();

        /// <summary>
        ///     Artifact tree root
        /// </summary>
        public RootArtifact Artifacts { get; }

        /// <summary>
        ///     Reports which have been generated by Extensions in this Session
        /// </summary>
        public List<ExtensionReport> Reports { get; } = new List<ExtensionReport>();

        /// <summary>
        ///     Service Map YAML generating this Session
        /// </summary>
        public string ServiceMapYaml { get; set; }

        /// <summary>
        ///     Export the Session's reports and Artifacts to a Stream
        /// </summary>
        /// <param name="data">Stream to contain Session data</param>
        public void Export(Stream data)
        {
            using (var compressor = new DeflateStream(data, CompressionMode.Compress))
            {
                Artifacts.Disconnect();
                var str = JsonConvert.SerializeObject(this, new JsonSerializerSettings
                {
                    TypeNameAssemblyFormatHandling = TypeNameAssemblyFormatHandling.Simple,
                    TypeNameHandling = TypeNameHandling.All,
                    SerializationBinder = new AggressiveTypeResolutionBinder(),
                    ReferenceLoopHandling = ReferenceLoopHandling.Ignore
                });
                compressor.Write(Encoding.Unicode.GetBytes(str));

                Artifacts.Connect();
            }
        }

        private void BindArtifactTriggers()
        {
            Artifacts.ArtifactChanged += (artifact, path) =>
            {
                var triggered =
                    ExtensionToolbox.Instance.GetReactionExtensionsTriggeredBy(artifact, ArtifactTrigger.IsUpdated);
                foreach (var item in triggered)
                    item.React(TriggerDescriptor.ArtifactTrigger(
                        string.Join(Artifact.PATH_SEPARATOR, path.Select(p => p.UUID)),
                        ArtifactTrigger.IsUpdated));
            };
            Artifacts.ArtifactChildAdded += (artifact, path) =>
            {
                artifact = artifact.Parent; // this event returns the child
                var triggered =
                    ExtensionToolbox.Instance.GetReactionExtensionsTriggeredBy(artifact, ArtifactTrigger.AddsChild);
                foreach (var item in triggered)
                    item.React(TriggerDescriptor.ArtifactTrigger(
                        string.Join(Artifact.PATH_SEPARATOR, path.Skip(1).Select(p => p.UUID)),
                        ArtifactTrigger.AddsChild)); // note Skip(1), same reason as above
            };
            Artifacts.ArtifactCreated += (artifact, path) =>
            {
                var triggered =
                    ExtensionToolbox.Instance.GetReactionExtensionsTriggeredBy(artifact, ArtifactTrigger.IsCreated);
                foreach (var item in triggered)
                    item.React(TriggerDescriptor.ArtifactTrigger(
                        string.Join(Artifact.PATH_SEPARATOR, path.Select(p => p.UUID)),
                        ArtifactTrigger.IsCreated));
            };
        }
    }
}