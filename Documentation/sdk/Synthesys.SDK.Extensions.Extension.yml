### YamlMime:ManagedReference
items:
- uid: Synthesys.SDK.Extensions.Extension
  commentId: T:Synthesys.SDK.Extensions.Extension
  id: Extension
  parent: Synthesys.SDK.Extensions
  children:
  - Synthesys.SDK.Extensions.Extension.ConfigurableProperties
  - Synthesys.SDK.Extensions.Extension.ConfigurablePropertyValues
  - Synthesys.SDK.Extensions.Extension.Initialize
  - Synthesys.SDK.Extensions.Extension.Logger
  - Synthesys.SDK.Extensions.Extension.Metadata
  - Synthesys.SDK.Extensions.Extension.SetLoggerName(System.String)
  - Synthesys.SDK.Extensions.Extension.ValidateEnvironmentReadiness
  langs:
  - csharp
  - vb
  name: Extension
  nameWithType: Extension
  fullName: Synthesys.SDK.Extensions.Extension
  type: Class
  source:
    remote:
      path: Synthesys.SDK/Extensions/Extension.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: Extension
    path: ../Synthesys.SDK/Extensions/Extension.cs
    startLine: 12
  assemblies:
  - Synthesys.SDK
  namespace: Synthesys.SDK.Extensions
  summary: "\nAn Extension is some function, which can either be an Action or a Reaction, which executes with the intent of\npopulating the Artifact Tree with additional data.\n"
  example: []
  syntax:
    content: public abstract class Extension
    content.vb: Public MustInherit Class Extension
  inheritance:
  - System.Object
  derivedClasses:
  - Synthesys.SDK.Extensions.ActionExtension
  - Synthesys.SDK.Extensions.ReactionExtension
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - Synthesys.SDK.Extensions.Extension.Synthesys.Tasks.ExtensionConfigurator.Configure(SMACD.AppTree.AppTreeNode,System.Collections.Generic.Dictionary{System.String,System.String})
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Synthesys.SDK.Extensions.Extension.Logger
  commentId: P:Synthesys.SDK.Extensions.Extension.Logger
  id: Logger
  parent: Synthesys.SDK.Extensions.Extension
  langs:
  - csharp
  - vb
  name: Logger
  nameWithType: Extension.Logger
  fullName: Synthesys.SDK.Extensions.Extension.Logger
  type: Property
  source:
    remote:
      path: Synthesys.SDK/Extensions/Extension.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: Logger
    path: ../Synthesys.SDK/Extensions/Extension.cs
    startLine: 17
  assemblies:
  - Synthesys.SDK
  namespace: Synthesys.SDK.Extensions
  summary: "\nExtension logger\n"
  example: []
  syntax:
    content: protected ILogger Logger { get; }
    parameters: []
    return:
      type: Microsoft.Extensions.Logging.ILogger
    content.vb: Protected ReadOnly Property Logger As ILogger
  overload: Synthesys.SDK.Extensions.Extension.Logger*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Synthesys.SDK.Extensions.Extension.Initialize
  commentId: M:Synthesys.SDK.Extensions.Extension.Initialize
  id: Initialize
  parent: Synthesys.SDK.Extensions.Extension
  langs:
  - csharp
  - vb
  name: Initialize()
  nameWithType: Extension.Initialize()
  fullName: Synthesys.SDK.Extensions.Extension.Initialize()
  type: Method
  source:
    remote:
      path: Synthesys.SDK/Extensions/Extension.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: Initialize
    path: ../Synthesys.SDK/Extensions/Extension.cs
    startLine: 22
  assemblies:
  - Synthesys.SDK
  namespace: Synthesys.SDK.Extensions
  summary: "\nInitialize Extension; called on instantiation\n"
  example: []
  syntax:
    content: public virtual void Initialize()
    content.vb: Public Overridable Sub Initialize
  overload: Synthesys.SDK.Extensions.Extension.Initialize*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Synthesys.SDK.Extensions.Extension.ValidateEnvironmentReadiness
  commentId: M:Synthesys.SDK.Extensions.Extension.ValidateEnvironmentReadiness
  id: ValidateEnvironmentReadiness
  parent: Synthesys.SDK.Extensions.Extension
  langs:
  - csharp
  - vb
  name: ValidateEnvironmentReadiness()
  nameWithType: Extension.ValidateEnvironmentReadiness()
  fullName: Synthesys.SDK.Extensions.Extension.ValidateEnvironmentReadiness()
  type: Method
  source:
    remote:
      path: Synthesys.SDK/Extensions/Extension.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: ValidateEnvironmentReadiness
    path: ../Synthesys.SDK/Extensions/Extension.cs
    startLine: 32
  assemblies:
  - Synthesys.SDK
  namespace: Synthesys.SDK.Extensions
  summary: "\nCalled when the Extension is loaded, to check if the runtime environment supports what the Extension requires to\nexecute.\nAny application validation/dependency checks should happen here, but it is not required.\n"
  example: []
  syntax:
    content: public virtual bool ValidateEnvironmentReadiness()
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Overridable Function ValidateEnvironmentReadiness As Boolean
  overload: Synthesys.SDK.Extensions.Extension.ValidateEnvironmentReadiness*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Synthesys.SDK.Extensions.Extension.SetLoggerName(System.String)
  commentId: M:Synthesys.SDK.Extensions.Extension.SetLoggerName(System.String)
  id: SetLoggerName(System.String)
  parent: Synthesys.SDK.Extensions.Extension
  langs:
  - csharp
  - vb
  name: SetLoggerName(String)
  nameWithType: Extension.SetLoggerName(String)
  fullName: Synthesys.SDK.Extensions.Extension.SetLoggerName(System.String)
  type: Method
  source:
    remote:
      path: Synthesys.SDK/Extensions/Extension.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: SetLoggerName
    path: ../Synthesys.SDK/Extensions/Extension.cs
    startLine: 41
  assemblies:
  - Synthesys.SDK
  namespace: Synthesys.SDK.Extensions
  summary: "\nCreate a new Logger with a given name for this Extension\n"
  example: []
  syntax:
    content: public void SetLoggerName(string name)
    parameters:
    - id: name
      type: System.String
      description: Logger name
    content.vb: Public Sub SetLoggerName(name As String)
  overload: Synthesys.SDK.Extensions.Extension.SetLoggerName*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Synthesys.SDK.Extensions.Extension.Metadata
  commentId: P:Synthesys.SDK.Extensions.Extension.Metadata
  id: Metadata
  parent: Synthesys.SDK.Extensions.Extension
  langs:
  - csharp
  - vb
  name: Metadata
  nameWithType: Extension.Metadata
  fullName: Synthesys.SDK.Extensions.Extension.Metadata
  type: Property
  source:
    remote:
      path: Synthesys.SDK/Extensions/Extension.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: Metadata
    path: ../Synthesys.SDK/Extensions/Extension.cs
    startLine: 49
  assemblies:
  - Synthesys.SDK
  namespace: Synthesys.SDK.Extensions
  summary: "\nRetrieve the Extension&apos;s metadata information\n"
  example: []
  syntax:
    content: public ExtensionAttribute Metadata { get; }
    parameters: []
    return:
      type: Synthesys.SDK.Attributes.ExtensionAttribute
    content.vb: Public ReadOnly Property Metadata As ExtensionAttribute
  overload: Synthesys.SDK.Extensions.Extension.Metadata*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Synthesys.SDK.Extensions.Extension.ConfigurableProperties
  commentId: P:Synthesys.SDK.Extensions.Extension.ConfigurableProperties
  id: ConfigurableProperties
  parent: Synthesys.SDK.Extensions.Extension
  langs:
  - csharp
  - vb
  name: ConfigurableProperties
  nameWithType: Extension.ConfigurableProperties
  fullName: Synthesys.SDK.Extensions.Extension.ConfigurableProperties
  type: Property
  source:
    remote:
      path: Synthesys.SDK/Extensions/Extension.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: ConfigurableProperties
    path: ../Synthesys.SDK/Extensions/Extension.cs
    startLine: 54
  assemblies:
  - Synthesys.SDK
  namespace: Synthesys.SDK.Extensions
  summary: "\nRetrieve a list of all properties in the Extension marked &quot;Configurable&quot;\n"
  example: []
  syntax:
    content: public List<PropertyInfo> ConfigurableProperties { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.Reflection.PropertyInfo}
    content.vb: Public ReadOnly Property ConfigurableProperties As List(Of PropertyInfo)
  overload: Synthesys.SDK.Extensions.Extension.ConfigurableProperties*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Synthesys.SDK.Extensions.Extension.ConfigurablePropertyValues
  commentId: P:Synthesys.SDK.Extensions.Extension.ConfigurablePropertyValues
  id: ConfigurablePropertyValues
  parent: Synthesys.SDK.Extensions.Extension
  langs:
  - csharp
  - vb
  name: ConfigurablePropertyValues
  nameWithType: Extension.ConfigurablePropertyValues
  fullName: Synthesys.SDK.Extensions.Extension.ConfigurablePropertyValues
  type: Property
  source:
    remote:
      path: Synthesys.SDK/Extensions/Extension.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: ConfigurablePropertyValues
    path: ../Synthesys.SDK/Extensions/Extension.cs
    startLine: 59
  assemblies:
  - Synthesys.SDK
  namespace: Synthesys.SDK.Extensions
  summary: "\nRetrieve a dictionary of all (string) properties and their values\n"
  example: []
  syntax:
    content: public Dictionary<string, object> ConfigurablePropertyValues { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
    content.vb: Public ReadOnly Property ConfigurablePropertyValues As Dictionary(Of String, Object)
  overload: Synthesys.SDK.Extensions.Extension.ConfigurablePropertyValues*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Synthesys.SDK.Extensions
  commentId: N:Synthesys.SDK.Extensions
  name: Synthesys.SDK.Extensions
  nameWithType: Synthesys.SDK.Extensions
  fullName: Synthesys.SDK.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Synthesys.SDK.Extensions.Extension.Synthesys.Tasks.ExtensionConfigurator.Configure(SMACD.AppTree.AppTreeNode,System.Collections.Generic.Dictionary{System.String,System.String})
  commentId: M:Synthesys.Tasks.ExtensionConfigurator.Configure(Synthesys.SDK.Extensions.Extension,SMACD.AppTree.AppTreeNode,System.Collections.Generic.Dictionary{System.String,System.String})
  parent: Synthesys.Tasks.ExtensionConfigurator
  definition: Synthesys.Tasks.ExtensionConfigurator.Configure(Synthesys.SDK.Extensions.Extension,SMACD.AppTree.AppTreeNode,System.Collections.Generic.Dictionary{System.String,System.String})
  name: Configure(AppTreeNode, Dictionary<String, String>)
  nameWithType: ExtensionConfigurator.Configure(AppTreeNode, Dictionary<String, String>)
  fullName: Synthesys.Tasks.ExtensionConfigurator.Configure(SMACD.AppTree.AppTreeNode, System.Collections.Generic.Dictionary<System.String, System.String>)
  nameWithType.vb: ExtensionConfigurator.Configure(AppTreeNode, Dictionary(Of String, String))
  fullName.vb: Synthesys.Tasks.ExtensionConfigurator.Configure(SMACD.AppTree.AppTreeNode, System.Collections.Generic.Dictionary(Of System.String, System.String))
  name.vb: Configure(AppTreeNode, Dictionary(Of String, String))
  spec.csharp:
  - uid: Synthesys.Tasks.ExtensionConfigurator.Configure(SMACD.AppTree.AppTreeNode,System.Collections.Generic.Dictionary{System.String,System.String})
    name: Configure
    nameWithType: ExtensionConfigurator.Configure
    fullName: Synthesys.Tasks.ExtensionConfigurator.Configure
  - name: (
    nameWithType: (
    fullName: (
  - uid: SMACD.AppTree.AppTreeNode
    name: AppTreeNode
    nameWithType: AppTreeNode
    fullName: SMACD.AppTree.AppTreeNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Synthesys.Tasks.ExtensionConfigurator.Configure(SMACD.AppTree.AppTreeNode,System.Collections.Generic.Dictionary{System.String,System.String})
    name: Configure
    nameWithType: ExtensionConfigurator.Configure
    fullName: Synthesys.Tasks.ExtensionConfigurator.Configure
  - name: (
    nameWithType: (
    fullName: (
  - uid: SMACD.AppTree.AppTreeNode
    name: AppTreeNode
    nameWithType: AppTreeNode
    fullName: SMACD.AppTree.AppTreeNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Synthesys.Tasks.ExtensionConfigurator.Configure(Synthesys.SDK.Extensions.Extension,SMACD.AppTree.AppTreeNode,System.Collections.Generic.Dictionary{System.String,System.String})
  commentId: M:Synthesys.Tasks.ExtensionConfigurator.Configure(Synthesys.SDK.Extensions.Extension,SMACD.AppTree.AppTreeNode,System.Collections.Generic.Dictionary{System.String,System.String})
  isExternal: true
  name: Configure(Extension, AppTreeNode, Dictionary<String, String>)
  nameWithType: ExtensionConfigurator.Configure(Extension, AppTreeNode, Dictionary<String, String>)
  fullName: Synthesys.Tasks.ExtensionConfigurator.Configure(Synthesys.SDK.Extensions.Extension, SMACD.AppTree.AppTreeNode, System.Collections.Generic.Dictionary<System.String, System.String>)
  nameWithType.vb: ExtensionConfigurator.Configure(Extension, AppTreeNode, Dictionary(Of String, String))
  fullName.vb: Synthesys.Tasks.ExtensionConfigurator.Configure(Synthesys.SDK.Extensions.Extension, SMACD.AppTree.AppTreeNode, System.Collections.Generic.Dictionary(Of System.String, System.String))
  name.vb: Configure(Extension, AppTreeNode, Dictionary(Of String, String))
  spec.csharp:
  - uid: Synthesys.Tasks.ExtensionConfigurator.Configure(Synthesys.SDK.Extensions.Extension,SMACD.AppTree.AppTreeNode,System.Collections.Generic.Dictionary{System.String,System.String})
    name: Configure
    nameWithType: ExtensionConfigurator.Configure
    fullName: Synthesys.Tasks.ExtensionConfigurator.Configure
  - name: (
    nameWithType: (
    fullName: (
  - uid: Synthesys.SDK.Extensions.Extension
    name: Extension
    nameWithType: Extension
    fullName: Synthesys.SDK.Extensions.Extension
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SMACD.AppTree.AppTreeNode
    name: AppTreeNode
    nameWithType: AppTreeNode
    fullName: SMACD.AppTree.AppTreeNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Synthesys.Tasks.ExtensionConfigurator.Configure(Synthesys.SDK.Extensions.Extension,SMACD.AppTree.AppTreeNode,System.Collections.Generic.Dictionary{System.String,System.String})
    name: Configure
    nameWithType: ExtensionConfigurator.Configure
    fullName: Synthesys.Tasks.ExtensionConfigurator.Configure
  - name: (
    nameWithType: (
    fullName: (
  - uid: Synthesys.SDK.Extensions.Extension
    name: Extension
    nameWithType: Extension
    fullName: Synthesys.SDK.Extensions.Extension
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SMACD.AppTree.AppTreeNode
    name: AppTreeNode
    nameWithType: AppTreeNode
    fullName: SMACD.AppTree.AppTreeNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Synthesys.Tasks.ExtensionConfigurator
  commentId: T:Synthesys.Tasks.ExtensionConfigurator
  parent: Synthesys.Tasks
  name: ExtensionConfigurator
  nameWithType: ExtensionConfigurator
  fullName: Synthesys.Tasks.ExtensionConfigurator
- uid: Synthesys.Tasks
  commentId: N:Synthesys.Tasks
  name: Synthesys.Tasks
  nameWithType: Synthesys.Tasks
  fullName: Synthesys.Tasks
- uid: Synthesys.SDK.Extensions.Extension.Logger*
  commentId: Overload:Synthesys.SDK.Extensions.Extension.Logger
  name: Logger
  nameWithType: Extension.Logger
  fullName: Synthesys.SDK.Extensions.Extension.Logger
- uid: Microsoft.Extensions.Logging.ILogger
  commentId: T:Microsoft.Extensions.Logging.ILogger
  parent: Microsoft.Extensions.Logging
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: Microsoft.Extensions.Logging.ILogger
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: true
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
- uid: Synthesys.SDK.Extensions.Extension.Initialize*
  commentId: Overload:Synthesys.SDK.Extensions.Extension.Initialize
  name: Initialize
  nameWithType: Extension.Initialize
  fullName: Synthesys.SDK.Extensions.Extension.Initialize
- uid: Synthesys.SDK.Extensions.Extension.ValidateEnvironmentReadiness*
  commentId: Overload:Synthesys.SDK.Extensions.Extension.ValidateEnvironmentReadiness
  name: ValidateEnvironmentReadiness
  nameWithType: Extension.ValidateEnvironmentReadiness
  fullName: Synthesys.SDK.Extensions.Extension.ValidateEnvironmentReadiness
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Synthesys.SDK.Extensions.Extension.SetLoggerName*
  commentId: Overload:Synthesys.SDK.Extensions.Extension.SetLoggerName
  name: SetLoggerName
  nameWithType: Extension.SetLoggerName
  fullName: Synthesys.SDK.Extensions.Extension.SetLoggerName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Synthesys.SDK.Extensions.Extension.Metadata*
  commentId: Overload:Synthesys.SDK.Extensions.Extension.Metadata
  name: Metadata
  nameWithType: Extension.Metadata
  fullName: Synthesys.SDK.Extensions.Extension.Metadata
- uid: Synthesys.SDK.Attributes.ExtensionAttribute
  commentId: T:Synthesys.SDK.Attributes.ExtensionAttribute
  parent: Synthesys.SDK.Attributes
  name: ExtensionAttribute
  nameWithType: ExtensionAttribute
  fullName: Synthesys.SDK.Attributes.ExtensionAttribute
- uid: Synthesys.SDK.Attributes
  commentId: N:Synthesys.SDK.Attributes
  name: Synthesys.SDK.Attributes
  nameWithType: Synthesys.SDK.Attributes
  fullName: Synthesys.SDK.Attributes
- uid: Synthesys.SDK.Extensions.Extension.ConfigurableProperties*
  commentId: Overload:Synthesys.SDK.Extensions.Extension.ConfigurableProperties
  name: ConfigurableProperties
  nameWithType: Extension.ConfigurableProperties
  fullName: Synthesys.SDK.Extensions.Extension.ConfigurableProperties
- uid: System.Collections.Generic.List{System.Reflection.PropertyInfo}
  commentId: T:System.Collections.Generic.List{System.Reflection.PropertyInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<PropertyInfo>
  nameWithType: List<PropertyInfo>
  fullName: System.Collections.Generic.List<System.Reflection.PropertyInfo>
  nameWithType.vb: List(Of PropertyInfo)
  fullName.vb: System.Collections.Generic.List(Of System.Reflection.PropertyInfo)
  name.vb: List(Of PropertyInfo)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Synthesys.SDK.Extensions.Extension.ConfigurablePropertyValues*
  commentId: Overload:Synthesys.SDK.Extensions.Extension.ConfigurablePropertyValues
  name: ConfigurablePropertyValues
  nameWithType: Extension.ConfigurablePropertyValues
  fullName: Synthesys.SDK.Extensions.Extension.ConfigurablePropertyValues
- uid: System.Collections.Generic.Dictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, Object>
  nameWithType: Dictionary<String, Object>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Object>
  nameWithType.vb: Dictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Object)
  name.vb: Dictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
