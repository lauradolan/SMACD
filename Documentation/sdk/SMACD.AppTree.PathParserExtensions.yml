### YamlMime:ManagedReference
items:
- uid: SMACD.AppTree.PathParserExtensions
  commentId: T:SMACD.AppTree.PathParserExtensions
  id: PathParserExtensions
  parent: SMACD.AppTree
  children:
  - SMACD.AppTree.PathParserExtensions.GetNodeByPath(System.String,SMACD.AppTree.RootNode)
  - SMACD.AppTree.PathParserExtensions.NodeMeetsConstraints(System.String,SMACD.AppTree.AppTreeNode)
  langs:
  - csharp
  - vb
  name: PathParserExtensions
  nameWithType: PathParserExtensions
  fullName: SMACD.AppTree.PathParserExtensions
  type: Class
  source:
    remote:
      path: SMACD.AppTree/PathParserExtensions.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: PathParserExtensions
    path: ../SMACD.AppTree/PathParserExtensions.cs
    startLine: 10
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree
  summary: "\nExtensions to parse string Paths into Nodes\n"
  example: []
  syntax:
    content: public static class PathParserExtensions
    content.vb: Public Module PathParserExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: SMACD.AppTree.PathParserExtensions.NodeMeetsConstraints(System.String,SMACD.AppTree.AppTreeNode)
  commentId: M:SMACD.AppTree.PathParserExtensions.NodeMeetsConstraints(System.String,SMACD.AppTree.AppTreeNode)
  id: NodeMeetsConstraints(System.String,SMACD.AppTree.AppTreeNode)
  isExtensionMethod: true
  parent: SMACD.AppTree.PathParserExtensions
  langs:
  - csharp
  - vb
  name: NodeMeetsConstraints(String, AppTreeNode)
  nameWithType: PathParserExtensions.NodeMeetsConstraints(String, AppTreeNode)
  fullName: SMACD.AppTree.PathParserExtensions.NodeMeetsConstraints(System.String, SMACD.AppTree.AppTreeNode)
  type: Method
  source:
    remote:
      path: SMACD.AppTree/PathParserExtensions.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: NodeMeetsConstraints
    path: ../SMACD.AppTree/PathParserExtensions.cs
    startLine: 47
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree
  summary: "\nIf a Node meets the constraints of a provided path segment\n"
  example: []
  syntax:
    content: public static bool NodeMeetsConstraints(this string pathSegment, AppTreeNode node)
    parameters:
    - id: pathSegment
      type: System.String
      description: Path segment
    - id: node
      type: SMACD.AppTree.AppTreeNode
      description: Node to test
    return:
      type: System.Boolean
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function NodeMeetsConstraints(pathSegment As String, node As AppTreeNode) As Boolean
  overload: SMACD.AppTree.PathParserExtensions.NodeMeetsConstraints*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SMACD.AppTree.PathParserExtensions.GetNodeByPath(System.String,SMACD.AppTree.RootNode)
  commentId: M:SMACD.AppTree.PathParserExtensions.GetNodeByPath(System.String,SMACD.AppTree.RootNode)
  id: GetNodeByPath(System.String,SMACD.AppTree.RootNode)
  isExtensionMethod: true
  parent: SMACD.AppTree.PathParserExtensions
  langs:
  - csharp
  - vb
  name: GetNodeByPath(String, RootNode)
  nameWithType: PathParserExtensions.GetNodeByPath(String, RootNode)
  fullName: SMACD.AppTree.PathParserExtensions.GetNodeByPath(System.String, SMACD.AppTree.RootNode)
  type: Method
  source:
    remote:
      path: SMACD.AppTree/PathParserExtensions.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: GetNodeByPath
    path: ../SMACD.AppTree/PathParserExtensions.cs
    startLine: 57
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree
  summary: "\nGet a Node Path by its string path, provided a Root node\n"
  example: []
  syntax:
    content: public static PathGeneration GetNodeByPath(this string path, RootNode root)
    parameters:
    - id: path
      type: System.String
      description: Path to node(s)
    - id: root
      type: SMACD.AppTree.RootNode
      description: Root node to search from
    return:
      type: SMACD.AppTree.PathGeneration
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetNodeByPath(path As String, root As RootNode) As PathGeneration
  overload: SMACD.AppTree.PathParserExtensions.GetNodeByPath*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: SMACD.AppTree
  commentId: N:SMACD.AppTree
  name: SMACD.AppTree
  nameWithType: SMACD.AppTree
  fullName: SMACD.AppTree
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SMACD.AppTree.PathParserExtensions.NodeMeetsConstraints*
  commentId: Overload:SMACD.AppTree.PathParserExtensions.NodeMeetsConstraints
  name: NodeMeetsConstraints
  nameWithType: PathParserExtensions.NodeMeetsConstraints
  fullName: SMACD.AppTree.PathParserExtensions.NodeMeetsConstraints
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SMACD.AppTree.AppTreeNode
  commentId: T:SMACD.AppTree.AppTreeNode
  parent: SMACD.AppTree
  name: AppTreeNode
  nameWithType: AppTreeNode
  fullName: SMACD.AppTree.AppTreeNode
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SMACD.AppTree.PathParserExtensions.GetNodeByPath*
  commentId: Overload:SMACD.AppTree.PathParserExtensions.GetNodeByPath
  name: GetNodeByPath
  nameWithType: PathParserExtensions.GetNodeByPath
  fullName: SMACD.AppTree.PathParserExtensions.GetNodeByPath
- uid: SMACD.AppTree.RootNode
  commentId: T:SMACD.AppTree.RootNode
  parent: SMACD.AppTree
  name: RootNode
  nameWithType: RootNode
  fullName: SMACD.AppTree.RootNode
- uid: SMACD.AppTree.PathGeneration
  commentId: T:SMACD.AppTree.PathGeneration
  parent: SMACD.AppTree
  name: PathGeneration
  nameWithType: PathGeneration
  fullName: SMACD.AppTree.PathGeneration
