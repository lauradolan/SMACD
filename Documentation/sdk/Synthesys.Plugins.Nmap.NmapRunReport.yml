### YamlMime:ManagedReference
items:
- uid: Synthesys.Plugins.Nmap.NmapRunReport
  commentId: T:Synthesys.Plugins.Nmap.NmapRunReport
  id: NmapRunReport
  parent: Synthesys.Plugins.Nmap
  children:
  - Synthesys.Plugins.Nmap.NmapRunReport.OperatingSystemFingerprintCandidates
  - Synthesys.Plugins.Nmap.NmapRunReport.Ports
  langs:
  - csharp
  - vb
  name: NmapRunReport
  nameWithType: NmapRunReport
  fullName: Synthesys.Plugins.Nmap.NmapRunReport
  type: Class
  source:
    remote:
      path: Synthesys.Plugins.Nmap/NmapRunReport.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: NmapRunReport
    path: ../Synthesys.Plugins.Nmap/NmapRunReport.cs
    startLine: 4
  assemblies:
  - Synthesys.Plugins.Nmap
  namespace: Synthesys.Plugins.Nmap
  syntax:
    content: public class NmapRunReport
    content.vb: Public Class NmapRunReport
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Synthesys.Plugins.Nmap.NmapRunReport.Ports
  commentId: P:Synthesys.Plugins.Nmap.NmapRunReport.Ports
  id: Ports
  parent: Synthesys.Plugins.Nmap.NmapRunReport
  langs:
  - csharp
  - vb
  name: Ports
  nameWithType: NmapRunReport.Ports
  fullName: Synthesys.Plugins.Nmap.NmapRunReport.Ports
  type: Property
  source:
    remote:
      path: Synthesys.Plugins.Nmap/NmapRunReport.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: Ports
    path: ../Synthesys.Plugins.Nmap/NmapRunReport.cs
    startLine: 9
  assemblies:
  - Synthesys.Plugins.Nmap
  namespace: Synthesys.Plugins.Nmap
  summary: "\nOpen ports on the scanned host\n"
  example: []
  syntax:
    content: public List<NmapPort> Ports { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Synthesys.Plugins.Nmap.NmapPort}
    content.vb: Public Property Ports As List(Of NmapPort)
  overload: Synthesys.Plugins.Nmap.NmapRunReport.Ports*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Synthesys.Plugins.Nmap.NmapRunReport.OperatingSystemFingerprintCandidates
  commentId: P:Synthesys.Plugins.Nmap.NmapRunReport.OperatingSystemFingerprintCandidates
  id: OperatingSystemFingerprintCandidates
  parent: Synthesys.Plugins.Nmap.NmapRunReport
  langs:
  - csharp
  - vb
  name: OperatingSystemFingerprintCandidates
  nameWithType: NmapRunReport.OperatingSystemFingerprintCandidates
  fullName: Synthesys.Plugins.Nmap.NmapRunReport.OperatingSystemFingerprintCandidates
  type: Property
  source:
    remote:
      path: Synthesys.Plugins.Nmap/NmapRunReport.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: OperatingSystemFingerprintCandidates
    path: ../Synthesys.Plugins.Nmap/NmapRunReport.cs
    startLine: 11
  assemblies:
  - Synthesys.Plugins.Nmap
  namespace: Synthesys.Plugins.Nmap
  syntax:
    content: public List<string> OperatingSystemFingerprintCandidates { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{System.String}
    content.vb: Public Property OperatingSystemFingerprintCandidates As List(Of String)
  overload: Synthesys.Plugins.Nmap.NmapRunReport.OperatingSystemFingerprintCandidates*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Synthesys.Plugins.Nmap
  commentId: N:Synthesys.Plugins.Nmap
  name: Synthesys.Plugins.Nmap
  nameWithType: Synthesys.Plugins.Nmap
  fullName: Synthesys.Plugins.Nmap
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Synthesys.Plugins.Nmap.NmapRunReport.Ports*
  commentId: Overload:Synthesys.Plugins.Nmap.NmapRunReport.Ports
  name: Ports
  nameWithType: NmapRunReport.Ports
  fullName: Synthesys.Plugins.Nmap.NmapRunReport.Ports
- uid: System.Collections.Generic.List{Synthesys.Plugins.Nmap.NmapPort}
  commentId: T:System.Collections.Generic.List{Synthesys.Plugins.Nmap.NmapPort}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<NmapPort>
  nameWithType: List<NmapPort>
  fullName: System.Collections.Generic.List<Synthesys.Plugins.Nmap.NmapPort>
  nameWithType.vb: List(Of NmapPort)
  fullName.vb: System.Collections.Generic.List(Of Synthesys.Plugins.Nmap.NmapPort)
  name.vb: List(Of NmapPort)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Synthesys.Plugins.Nmap.NmapPort
    name: NmapPort
    nameWithType: NmapPort
    fullName: Synthesys.Plugins.Nmap.NmapPort
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Synthesys.Plugins.Nmap.NmapPort
    name: NmapPort
    nameWithType: NmapPort
    fullName: Synthesys.Plugins.Nmap.NmapPort
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Synthesys.Plugins.Nmap.NmapRunReport.OperatingSystemFingerprintCandidates*
  commentId: Overload:Synthesys.Plugins.Nmap.NmapRunReport.OperatingSystemFingerprintCandidates
  name: OperatingSystemFingerprintCandidates
  nameWithType: NmapRunReport.OperatingSystemFingerprintCandidates
  fullName: Synthesys.Plugins.Nmap.NmapRunReport.OperatingSystemFingerprintCandidates
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
