### YamlMime:ManagedReference
items:
- uid: SMACD.AppTree.PathGeneration
  commentId: T:SMACD.AppTree.PathGeneration
  id: PathGeneration
  parent: SMACD.AppTree
  children:
  - SMACD.AppTree.PathGeneration.Children
  - SMACD.AppTree.PathGeneration.GetResultNodes
  - SMACD.AppTree.PathGeneration.IsResultNode
  - SMACD.AppTree.PathGeneration.MatchingNode
  - SMACD.AppTree.PathGeneration.Path
  - SMACD.AppTree.PathGeneration.PathSegment
  - SMACD.AppTree.PathGeneration.PathSegmentIndex
  langs:
  - csharp
  - vb
  name: PathGeneration
  nameWithType: PathGeneration
  fullName: SMACD.AppTree.PathGeneration
  type: Class
  source:
    remote:
      path: SMACD.AppTree/PathGeneration.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: PathGeneration
    path: ../SMACD.AppTree/PathGeneration.cs
    startLine: 7
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree
  summary: "\nA single Generation of Paths which matched the requested address\n"
  example: []
  syntax:
    content: public class PathGeneration
    content.vb: Public Class PathGeneration
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SMACD.AppTree.PathGeneration.Path
  commentId: P:SMACD.AppTree.PathGeneration.Path
  id: Path
  parent: SMACD.AppTree.PathGeneration
  langs:
  - csharp
  - vb
  name: Path
  nameWithType: PathGeneration.Path
  fullName: SMACD.AppTree.PathGeneration.Path
  type: Property
  source:
    remote:
      path: SMACD.AppTree/PathGeneration.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: Path
    path: ../SMACD.AppTree/PathGeneration.cs
    startLine: 12
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree
  summary: "\nPath being tested\n"
  example: []
  syntax:
    content: public string Path { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Path As String
  overload: SMACD.AppTree.PathGeneration.Path*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SMACD.AppTree.PathGeneration.PathSegmentIndex
  commentId: P:SMACD.AppTree.PathGeneration.PathSegmentIndex
  id: PathSegmentIndex
  parent: SMACD.AppTree.PathGeneration
  langs:
  - csharp
  - vb
  name: PathSegmentIndex
  nameWithType: PathGeneration.PathSegmentIndex
  fullName: SMACD.AppTree.PathGeneration.PathSegmentIndex
  type: Property
  source:
    remote:
      path: SMACD.AppTree/PathGeneration.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: PathSegmentIndex
    path: ../SMACD.AppTree/PathGeneration.cs
    startLine: 17
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree
  summary: "\nIndex of segment within Path which matched for this Generation\n"
  example: []
  syntax:
    content: public int PathSegmentIndex { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property PathSegmentIndex As Integer
  overload: SMACD.AppTree.PathGeneration.PathSegmentIndex*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SMACD.AppTree.PathGeneration.PathSegment
  commentId: P:SMACD.AppTree.PathGeneration.PathSegment
  id: PathSegment
  parent: SMACD.AppTree.PathGeneration
  langs:
  - csharp
  - vb
  name: PathSegment
  nameWithType: PathGeneration.PathSegment
  fullName: SMACD.AppTree.PathGeneration.PathSegment
  type: Property
  source:
    remote:
      path: SMACD.AppTree/PathGeneration.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: PathSegment
    path: ../SMACD.AppTree/PathGeneration.cs
    startLine: 22
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree
  summary: "\nSegment which matched for this Generation\n"
  example: []
  syntax:
    content: public string PathSegment { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property PathSegment As String
  overload: SMACD.AppTree.PathGeneration.PathSegment*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SMACD.AppTree.PathGeneration.MatchingNode
  commentId: P:SMACD.AppTree.PathGeneration.MatchingNode
  id: MatchingNode
  parent: SMACD.AppTree.PathGeneration
  langs:
  - csharp
  - vb
  name: MatchingNode
  nameWithType: PathGeneration.MatchingNode
  fullName: SMACD.AppTree.PathGeneration.MatchingNode
  type: Property
  source:
    remote:
      path: SMACD.AppTree/PathGeneration.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: MatchingNode
    path: ../SMACD.AppTree/PathGeneration.cs
    startLine: 27
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree
  summary: "\nAppTreeNode linked to Generation\n"
  example: []
  syntax:
    content: public AppTreeNode MatchingNode { get; set; }
    parameters: []
    return:
      type: SMACD.AppTree.AppTreeNode
    content.vb: Public Property MatchingNode As AppTreeNode
  overload: SMACD.AppTree.PathGeneration.MatchingNode*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SMACD.AppTree.PathGeneration.Children
  commentId: P:SMACD.AppTree.PathGeneration.Children
  id: Children
  parent: SMACD.AppTree.PathGeneration
  langs:
  - csharp
  - vb
  name: Children
  nameWithType: PathGeneration.Children
  fullName: SMACD.AppTree.PathGeneration.Children
  type: Property
  source:
    remote:
      path: SMACD.AppTree/PathGeneration.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: Children
    path: ../SMACD.AppTree/PathGeneration.cs
    startLine: 32
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree
  summary: "\nNodes which matched in the next Generation\n"
  example: []
  syntax:
    content: public List<PathGeneration> Children { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{SMACD.AppTree.PathGeneration}
    content.vb: Public Property Children As List(Of PathGeneration)
  overload: SMACD.AppTree.PathGeneration.Children*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SMACD.AppTree.PathGeneration.IsResultNode
  commentId: P:SMACD.AppTree.PathGeneration.IsResultNode
  id: IsResultNode
  parent: SMACD.AppTree.PathGeneration
  langs:
  - csharp
  - vb
  name: IsResultNode
  nameWithType: PathGeneration.IsResultNode
  fullName: SMACD.AppTree.PathGeneration.IsResultNode
  type: Property
  source:
    remote:
      path: SMACD.AppTree/PathGeneration.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: IsResultNode
    path: ../SMACD.AppTree/PathGeneration.cs
    startLine: 37
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree
  summary: "\nIf the node is matching the Path\n"
  example: []
  syntax:
    content: public bool IsResultNode { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsResultNode As Boolean
  overload: SMACD.AppTree.PathGeneration.IsResultNode*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SMACD.AppTree.PathGeneration.GetResultNodes
  commentId: M:SMACD.AppTree.PathGeneration.GetResultNodes
  id: GetResultNodes
  parent: SMACD.AppTree.PathGeneration
  langs:
  - csharp
  - vb
  name: GetResultNodes()
  nameWithType: PathGeneration.GetResultNodes()
  fullName: SMACD.AppTree.PathGeneration.GetResultNodes()
  type: Method
  source:
    remote:
      path: SMACD.AppTree/PathGeneration.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: GetResultNodes
    path: ../SMACD.AppTree/PathGeneration.cs
    startLine: 43
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree
  summary: "\nRetrieve all the nodes within this Path Generation set which are matched by the requested Path\n"
  example: []
  syntax:
    content: public List<AppTreeNode> GetResultNodes()
    return:
      type: System.Collections.Generic.List{SMACD.AppTree.AppTreeNode}
      description: ''
    content.vb: Public Function GetResultNodes As List(Of AppTreeNode)
  overload: SMACD.AppTree.PathGeneration.GetResultNodes*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SMACD.AppTree
  commentId: N:SMACD.AppTree
  name: SMACD.AppTree
  nameWithType: SMACD.AppTree
  fullName: SMACD.AppTree
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SMACD.AppTree.PathGeneration.Path*
  commentId: Overload:SMACD.AppTree.PathGeneration.Path
  name: Path
  nameWithType: PathGeneration.Path
  fullName: SMACD.AppTree.PathGeneration.Path
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SMACD.AppTree.PathGeneration.PathSegmentIndex*
  commentId: Overload:SMACD.AppTree.PathGeneration.PathSegmentIndex
  name: PathSegmentIndex
  nameWithType: PathGeneration.PathSegmentIndex
  fullName: SMACD.AppTree.PathGeneration.PathSegmentIndex
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SMACD.AppTree.PathGeneration.PathSegment*
  commentId: Overload:SMACD.AppTree.PathGeneration.PathSegment
  name: PathSegment
  nameWithType: PathGeneration.PathSegment
  fullName: SMACD.AppTree.PathGeneration.PathSegment
- uid: SMACD.AppTree.PathGeneration.MatchingNode*
  commentId: Overload:SMACD.AppTree.PathGeneration.MatchingNode
  name: MatchingNode
  nameWithType: PathGeneration.MatchingNode
  fullName: SMACD.AppTree.PathGeneration.MatchingNode
- uid: SMACD.AppTree.AppTreeNode
  commentId: T:SMACD.AppTree.AppTreeNode
  parent: SMACD.AppTree
  name: AppTreeNode
  nameWithType: AppTreeNode
  fullName: SMACD.AppTree.AppTreeNode
- uid: SMACD.AppTree.PathGeneration.Children*
  commentId: Overload:SMACD.AppTree.PathGeneration.Children
  name: Children
  nameWithType: PathGeneration.Children
  fullName: SMACD.AppTree.PathGeneration.Children
- uid: System.Collections.Generic.List{SMACD.AppTree.PathGeneration}
  commentId: T:System.Collections.Generic.List{SMACD.AppTree.PathGeneration}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<PathGeneration>
  nameWithType: List<PathGeneration>
  fullName: System.Collections.Generic.List<SMACD.AppTree.PathGeneration>
  nameWithType.vb: List(Of PathGeneration)
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.PathGeneration)
  name.vb: List(Of PathGeneration)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SMACD.AppTree.PathGeneration
    name: PathGeneration
    nameWithType: PathGeneration
    fullName: SMACD.AppTree.PathGeneration
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SMACD.AppTree.PathGeneration
    name: PathGeneration
    nameWithType: PathGeneration
    fullName: SMACD.AppTree.PathGeneration
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: SMACD.AppTree.PathGeneration.IsResultNode*
  commentId: Overload:SMACD.AppTree.PathGeneration.IsResultNode
  name: IsResultNode
  nameWithType: PathGeneration.IsResultNode
  fullName: SMACD.AppTree.PathGeneration.IsResultNode
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: SMACD.AppTree.PathGeneration.GetResultNodes*
  commentId: Overload:SMACD.AppTree.PathGeneration.GetResultNodes
  name: GetResultNodes
  nameWithType: PathGeneration.GetResultNodes
  fullName: SMACD.AppTree.PathGeneration.GetResultNodes
- uid: System.Collections.Generic.List{SMACD.AppTree.AppTreeNode}
  commentId: T:System.Collections.Generic.List{SMACD.AppTree.AppTreeNode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<AppTreeNode>
  nameWithType: List<AppTreeNode>
  fullName: System.Collections.Generic.List<SMACD.AppTree.AppTreeNode>
  nameWithType.vb: List(Of AppTreeNode)
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.AppTreeNode)
  name.vb: List(Of AppTreeNode)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SMACD.AppTree.AppTreeNode
    name: AppTreeNode
    nameWithType: AppTreeNode
    fullName: SMACD.AppTree.AppTreeNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SMACD.AppTree.AppTreeNode
    name: AppTreeNode
    nameWithType: AppTreeNode
    fullName: SMACD.AppTree.AppTreeNode
  - name: )
    nameWithType: )
    fullName: )
