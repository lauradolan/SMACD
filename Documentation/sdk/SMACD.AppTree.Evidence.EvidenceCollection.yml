### YamlMime:ManagedReference
items:
- uid: SMACD.AppTree.Evidence.EvidenceCollection
  commentId: T:SMACD.AppTree.Evidence.EvidenceCollection
  id: EvidenceCollection
  parent: SMACD.AppTree.Evidence
  children:
  - SMACD.AppTree.Evidence.EvidenceCollection.CreateOrLoadNativePath(System.String,System.TimeSpan)
  - SMACD.AppTree.Evidence.EvidenceCollection.EvidenceChanged
  - SMACD.AppTree.Evidence.EvidenceCollection.EvidenceCreated
  - SMACD.AppTree.Evidence.EvidenceCollection.Item(System.String)
  - SMACD.AppTree.Evidence.EvidenceCollection.Save(System.String)
  - SMACD.AppTree.Evidence.EvidenceCollection.Save(System.String,System.Byte[])
  - SMACD.AppTree.Evidence.EvidenceCollection.Save(System.String,System.String)
  - SMACD.AppTree.Evidence.EvidenceCollection.Save``1(System.String,``0)
  langs:
  - csharp
  - vb
  name: EvidenceCollection
  nameWithType: EvidenceCollection
  fullName: SMACD.AppTree.Evidence.EvidenceCollection
  type: Class
  source:
    remote:
      path: SMACD.AppTree/Evidence/EvidenceCollection.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: EvidenceCollection
    path: ../SMACD.AppTree/Evidence/EvidenceCollection.cs
    startLine: 11
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree.Evidence
  summary: "\nContains items which represent evidence supporting correlations or other decisions\n"
  example: []
  syntax:
    content: 'public class EvidenceCollection : List<Evidence>, IList<Evidence>, ICollection<Evidence>, IReadOnlyList<Evidence>, IReadOnlyCollection<Evidence>, IEnumerable<Evidence>, IList, ICollection, IEnumerable'
    content.vb: >-
      Public Class EvidenceCollection

          Inherits List(Of Evidence)

          Implements IList(Of Evidence), ICollection(Of Evidence), IReadOnlyList(Of Evidence), IReadOnlyCollection(Of Evidence), IEnumerable(Of Evidence), IList, ICollection, IEnumerable
  inheritance:
  - System.Object
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  implements:
  - System.Collections.Generic.IList{SMACD.AppTree.Evidence.Evidence}
  - System.Collections.Generic.ICollection{SMACD.AppTree.Evidence.Evidence}
  - System.Collections.Generic.IReadOnlyList{SMACD.AppTree.Evidence.Evidence}
  - System.Collections.Generic.IReadOnlyCollection{SMACD.AppTree.Evidence.Evidence}
  - System.Collections.Generic.IEnumerable{SMACD.AppTree.Evidence.Evidence}
  - System.Collections.IList
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#IList#get_Item(System.Int32)
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#IList#set_Item(System.Int32,System.Object)
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Add(SMACD.AppTree.Evidence.Evidence)
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.AddRange(System.Collections.Generic.IEnumerable{SMACD.AppTree.Evidence.Evidence})
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.AsReadOnly
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.BinarySearch(System.Int32,System.Int32,SMACD.AppTree.Evidence.Evidence,System.Collections.Generic.IComparer{SMACD.AppTree.Evidence.Evidence})
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.BinarySearch(SMACD.AppTree.Evidence.Evidence)
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.BinarySearch(SMACD.AppTree.Evidence.Evidence,System.Collections.Generic.IComparer{SMACD.AppTree.Evidence.Evidence})
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Clear
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Contains(SMACD.AppTree.Evidence.Evidence)
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.ConvertAll``1(System.Converter{SMACD.AppTree.Evidence.Evidence,{TOutput}})
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.CopyTo(System.Int32,SMACD.AppTree.Evidence.Evidence[],System.Int32,System.Int32)
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.CopyTo(SMACD.AppTree.Evidence.Evidence[])
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.CopyTo(SMACD.AppTree.Evidence.Evidence[],System.Int32)
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Exists(System.Predicate{SMACD.AppTree.Evidence.Evidence})
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Find(System.Predicate{SMACD.AppTree.Evidence.Evidence})
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.FindAll(System.Predicate{SMACD.AppTree.Evidence.Evidence})
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.FindIndex(System.Int32,System.Int32,System.Predicate{SMACD.AppTree.Evidence.Evidence})
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.FindIndex(System.Int32,System.Predicate{SMACD.AppTree.Evidence.Evidence})
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.FindIndex(System.Predicate{SMACD.AppTree.Evidence.Evidence})
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.FindLast(System.Predicate{SMACD.AppTree.Evidence.Evidence})
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.FindLastIndex(System.Int32,System.Int32,System.Predicate{SMACD.AppTree.Evidence.Evidence})
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.FindLastIndex(System.Int32,System.Predicate{SMACD.AppTree.Evidence.Evidence})
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.FindLastIndex(System.Predicate{SMACD.AppTree.Evidence.Evidence})
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.ForEach(System.Action{SMACD.AppTree.Evidence.Evidence})
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.GetEnumerator
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.GetRange(System.Int32,System.Int32)
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.IndexOf(SMACD.AppTree.Evidence.Evidence)
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.IndexOf(SMACD.AppTree.Evidence.Evidence,System.Int32)
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.IndexOf(SMACD.AppTree.Evidence.Evidence,System.Int32,System.Int32)
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Insert(System.Int32,SMACD.AppTree.Evidence.Evidence)
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{SMACD.AppTree.Evidence.Evidence})
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.LastIndexOf(SMACD.AppTree.Evidence.Evidence)
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.LastIndexOf(SMACD.AppTree.Evidence.Evidence,System.Int32)
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.LastIndexOf(SMACD.AppTree.Evidence.Evidence,System.Int32,System.Int32)
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Remove(SMACD.AppTree.Evidence.Evidence)
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.RemoveAll(System.Predicate{SMACD.AppTree.Evidence.Evidence})
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.RemoveAt(System.Int32)
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.RemoveRange(System.Int32,System.Int32)
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Reverse
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Reverse(System.Int32,System.Int32)
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Sort
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Sort(System.Collections.Generic.IComparer{SMACD.AppTree.Evidence.Evidence})
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Sort(System.Comparison{SMACD.AppTree.Evidence.Evidence})
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{SMACD.AppTree.Evidence.Evidence})
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#IList#Add(System.Object)
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#IList#Contains(System.Object)
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#IList#IndexOf(System.Object)
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#IList#Remove(System.Object)
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.ToArray
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.TrimExcess
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.TrueForAll(System.Predicate{SMACD.AppTree.Evidence.Evidence})
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Capacity
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Count
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Item(System.Int32)
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#ICollection#IsSynchronized
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#ICollection#SyncRoot
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#IList#IsFixedSize
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#IList#IsReadOnly
  - System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#IList#Item(System.Int32)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SMACD.AppTree.Evidence.EvidenceCollection.Item(System.String)
  commentId: P:SMACD.AppTree.Evidence.EvidenceCollection.Item(System.String)
  id: Item(System.String)
  parent: SMACD.AppTree.Evidence.EvidenceCollection
  langs:
  - csharp
  - vb
  name: Item[String]
  nameWithType: EvidenceCollection.Item[String]
  fullName: SMACD.AppTree.Evidence.EvidenceCollection.Item[System.String]
  type: Property
  source:
    remote:
      path: SMACD.AppTree/Evidence/EvidenceCollection.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: this[]
    path: ../SMACD.AppTree/Evidence/EvidenceCollection.cs
    startLine: 20
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree.Evidence
  summary: "\nRetrieve Evidence item by its name\n"
  example: []
  syntax:
    content: public Evidence this[string name] { get; }
    parameters:
    - id: name
      type: System.String
      description: Evidence name
    return:
      type: SMACD.AppTree.Evidence.Evidence
      description: ''
    content.vb: Public ReadOnly Property Item(name As String) As Evidence
  overload: SMACD.AppTree.Evidence.EvidenceCollection.Item*
  nameWithType.vb: EvidenceCollection.Item(String)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: SMACD.AppTree.Evidence.EvidenceCollection.Item(System.String)
  name.vb: Item(String)
- uid: SMACD.AppTree.Evidence.EvidenceCollection.EvidenceCreated
  commentId: E:SMACD.AppTree.Evidence.EvidenceCollection.EvidenceCreated
  id: EvidenceCreated
  parent: SMACD.AppTree.Evidence.EvidenceCollection
  langs:
  - csharp
  - vb
  name: EvidenceCreated
  nameWithType: EvidenceCollection.EvidenceCreated
  fullName: SMACD.AppTree.Evidence.EvidenceCollection.EvidenceCreated
  type: Event
  source:
    remote:
      path: SMACD.AppTree/Evidence/EvidenceCollection.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: EvidenceCreated
    path: ../SMACD.AppTree/Evidence/EvidenceCollection.cs
    startLine: 25
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree.Evidence
  summary: "\nFired when Evidence is created\n"
  example: []
  syntax:
    content: public static event EventHandler<Evidence> EvidenceCreated
    return:
      type: System.EventHandler{SMACD.AppTree.Evidence.Evidence}
    content.vb: Public Shared Event EvidenceCreated As EventHandler(Of Evidence)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SMACD.AppTree.Evidence.EvidenceCollection.EvidenceChanged
  commentId: E:SMACD.AppTree.Evidence.EvidenceCollection.EvidenceChanged
  id: EvidenceChanged
  parent: SMACD.AppTree.Evidence.EvidenceCollection
  langs:
  - csharp
  - vb
  name: EvidenceChanged
  nameWithType: EvidenceCollection.EvidenceChanged
  fullName: SMACD.AppTree.Evidence.EvidenceCollection.EvidenceChanged
  type: Event
  source:
    remote:
      path: SMACD.AppTree/Evidence/EvidenceCollection.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: EvidenceChanged
    path: ../SMACD.AppTree/Evidence/EvidenceCollection.cs
    startLine: 30
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree.Evidence
  summary: "\nFired when Evidence is changed\n"
  example: []
  syntax:
    content: public static event EventHandler<Evidence> EvidenceChanged
    return:
      type: System.EventHandler{SMACD.AppTree.Evidence.Evidence}
    content.vb: Public Shared Event EvidenceChanged As EventHandler(Of Evidence)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: SMACD.AppTree.Evidence.EvidenceCollection.CreateOrLoadNativePath(System.String,System.TimeSpan)
  commentId: M:SMACD.AppTree.Evidence.EvidenceCollection.CreateOrLoadNativePath(System.String,System.TimeSpan)
  id: CreateOrLoadNativePath(System.String,System.TimeSpan)
  parent: SMACD.AppTree.Evidence.EvidenceCollection
  langs:
  - csharp
  - vb
  name: CreateOrLoadNativePath(String, TimeSpan)
  nameWithType: EvidenceCollection.CreateOrLoadNativePath(String, TimeSpan)
  fullName: SMACD.AppTree.Evidence.EvidenceCollection.CreateOrLoadNativePath(System.String, System.TimeSpan)
  type: Method
  source:
    remote:
      path: SMACD.AppTree/Evidence/EvidenceCollection.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: CreateOrLoadNativePath
    path: ../SMACD.AppTree/Evidence/EvidenceCollection.cs
    startLine: 41
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree.Evidence
  summary: "\nCreate or load a native (system) path to allow external tools to put data into the system\nvia a local path. This is zipped when the underlying context is disposed.\nOnly one context can be opened at a time, but this method will allow the caller to specify\n(if desired) a duration, in seconds, to wait until the resource becomes available.\n"
  example: []
  syntax:
    content: public NativeDirectoryEvidence CreateOrLoadNativePath(string name, TimeSpan availabilityWaitTimeout = default(TimeSpan))
    parameters:
    - id: name
      type: System.String
      description: Evidence name
    - id: availabilityWaitTimeout
      type: System.TimeSpan
      description: Time to wait if the context is already opened
    return:
      type: SMACD.AppTree.Evidence.NativeDirectoryEvidence
      description: ''
    content.vb: Public Function CreateOrLoadNativePath(name As String, availabilityWaitTimeout As TimeSpan = Nothing) As NativeDirectoryEvidence
  overload: SMACD.AppTree.Evidence.EvidenceCollection.CreateOrLoadNativePath*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SMACD.AppTree.Evidence.EvidenceCollection.Save``1(System.String,``0)
  commentId: M:SMACD.AppTree.Evidence.EvidenceCollection.Save``1(System.String,``0)
  id: Save``1(System.String,``0)
  parent: SMACD.AppTree.Evidence.EvidenceCollection
  langs:
  - csharp
  - vb
  name: Save<T>(String, T)
  nameWithType: EvidenceCollection.Save<T>(String, T)
  fullName: SMACD.AppTree.Evidence.EvidenceCollection.Save<T>(System.String, T)
  type: Method
  source:
    remote:
      path: SMACD.AppTree/Evidence/EvidenceCollection.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: Save
    path: ../SMACD.AppTree/Evidence/EvidenceCollection.cs
    startLine: 89
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree.Evidence
  summary: "\nCreate a child Evidence item containing a serialized object\n"
  example: []
  syntax:
    content: public ObjectEvidence Save<T>(string name, T obj)
    parameters:
    - id: name
      type: System.String
      description: Artifact name
    - id: obj
      type: '{T}'
      description: Object to save
    typeParameters:
    - id: T
      description: Object type
    return:
      type: SMACD.AppTree.Evidence.ObjectEvidence
      description: ''
    content.vb: Public Function Save(Of T)(name As String, obj As T) As ObjectEvidence
  overload: SMACD.AppTree.Evidence.EvidenceCollection.Save*
  nameWithType.vb: EvidenceCollection.Save(Of T)(String, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SMACD.AppTree.Evidence.EvidenceCollection.Save(Of T)(System.String, T)
  name.vb: Save(Of T)(String, T)
- uid: SMACD.AppTree.Evidence.EvidenceCollection.Save(System.String,System.String)
  commentId: M:SMACD.AppTree.Evidence.EvidenceCollection.Save(System.String,System.String)
  id: Save(System.String,System.String)
  parent: SMACD.AppTree.Evidence.EvidenceCollection
  langs:
  - csharp
  - vb
  name: Save(String, String)
  nameWithType: EvidenceCollection.Save(String, String)
  fullName: SMACD.AppTree.Evidence.EvidenceCollection.Save(System.String, System.String)
  type: Method
  source:
    remote:
      path: SMACD.AppTree/Evidence/EvidenceCollection.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: Save
    path: ../SMACD.AppTree/Evidence/EvidenceCollection.cs
    startLine: 102
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree.Evidence
  summary: "\nCreate a child Evidence item containing a string\n"
  example: []
  syntax:
    content: public ObjectEvidence Save(string name, string str)
    parameters:
    - id: name
      type: System.String
      description: Artifact name
    - id: str
      type: System.String
      description: String to save
    return:
      type: SMACD.AppTree.Evidence.ObjectEvidence
      description: ''
    content.vb: Public Function Save(name As String, str As String) As ObjectEvidence
  overload: SMACD.AppTree.Evidence.EvidenceCollection.Save*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SMACD.AppTree.Evidence.EvidenceCollection.Save(System.String,System.Byte[])
  commentId: M:SMACD.AppTree.Evidence.EvidenceCollection.Save(System.String,System.Byte[])
  id: Save(System.String,System.Byte[])
  parent: SMACD.AppTree.Evidence.EvidenceCollection
  langs:
  - csharp
  - vb
  name: Save(String, Byte[])
  nameWithType: EvidenceCollection.Save(String, Byte[])
  fullName: SMACD.AppTree.Evidence.EvidenceCollection.Save(System.String, System.Byte[])
  type: Method
  source:
    remote:
      path: SMACD.AppTree/Evidence/EvidenceCollection.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: Save
    path: ../SMACD.AppTree/Evidence/EvidenceCollection.cs
    startLine: 113
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree.Evidence
  summary: "\nCreate a child Evidence item containing a byte array\n"
  example: []
  syntax:
    content: public Evidence Save(string name, byte[] data)
    parameters:
    - id: name
      type: System.String
      description: Artifact name
    - id: data
      type: System.Byte[]
      description: Byte array to save
    return:
      type: SMACD.AppTree.Evidence.Evidence
      description: ''
    content.vb: Public Function Save(name As String, data As Byte()) As Evidence
  overload: SMACD.AppTree.Evidence.EvidenceCollection.Save*
  nameWithType.vb: EvidenceCollection.Save(String, Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SMACD.AppTree.Evidence.EvidenceCollection.Save(System.String, System.Byte())
  name.vb: Save(String, Byte())
- uid: SMACD.AppTree.Evidence.EvidenceCollection.Save(System.String)
  commentId: M:SMACD.AppTree.Evidence.EvidenceCollection.Save(System.String)
  id: Save(System.String)
  parent: SMACD.AppTree.Evidence.EvidenceCollection
  langs:
  - csharp
  - vb
  name: Save(String)
  nameWithType: EvidenceCollection.Save(String)
  fullName: SMACD.AppTree.Evidence.EvidenceCollection.Save(System.String)
  type: Method
  source:
    remote:
      path: SMACD.AppTree/Evidence/EvidenceCollection.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: Save
    path: ../SMACD.AppTree/Evidence/EvidenceCollection.cs
    startLine: 123
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree.Evidence
  summary: "\nCreate a blank child Evidence item\n"
  example: []
  syntax:
    content: public Evidence Save(string name)
    parameters:
    - id: name
      type: System.String
      description: Artifact name
    return:
      type: SMACD.AppTree.Evidence.Evidence
      description: ''
    content.vb: Public Function Save(name As String) As Evidence
  overload: SMACD.AppTree.Evidence.EvidenceCollection.Save*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SMACD.AppTree.Evidence
  commentId: N:SMACD.AppTree.Evidence
  name: SMACD.AppTree.Evidence
  nameWithType: SMACD.AppTree.Evidence
  fullName: SMACD.AppTree.Evidence
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  commentId: T:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Evidence>
  nameWithType: List<Evidence>
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>
  nameWithType.vb: List(Of Evidence)
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence)
  name.vb: List(Of Evidence)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList{SMACD.AppTree.Evidence.Evidence}
  commentId: T:System.Collections.Generic.IList{SMACD.AppTree.Evidence.Evidence}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Evidence>
  nameWithType: IList<Evidence>
  fullName: System.Collections.Generic.IList<SMACD.AppTree.Evidence.Evidence>
  nameWithType.vb: IList(Of Evidence)
  fullName.vb: System.Collections.Generic.IList(Of SMACD.AppTree.Evidence.Evidence)
  name.vb: IList(Of Evidence)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{SMACD.AppTree.Evidence.Evidence}
  commentId: T:System.Collections.Generic.ICollection{SMACD.AppTree.Evidence.Evidence}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<Evidence>
  nameWithType: ICollection<Evidence>
  fullName: System.Collections.Generic.ICollection<SMACD.AppTree.Evidence.Evidence>
  nameWithType.vb: ICollection(Of Evidence)
  fullName.vb: System.Collections.Generic.ICollection(Of SMACD.AppTree.Evidence.Evidence)
  name.vb: ICollection(Of Evidence)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList{SMACD.AppTree.Evidence.Evidence}
  commentId: T:System.Collections.Generic.IReadOnlyList{SMACD.AppTree.Evidence.Evidence}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<Evidence>
  nameWithType: IReadOnlyList<Evidence>
  fullName: System.Collections.Generic.IReadOnlyList<SMACD.AppTree.Evidence.Evidence>
  nameWithType.vb: IReadOnlyList(Of Evidence)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of SMACD.AppTree.Evidence.Evidence)
  name.vb: IReadOnlyList(Of Evidence)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{SMACD.AppTree.Evidence.Evidence}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{SMACD.AppTree.Evidence.Evidence}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<Evidence>
  nameWithType: IReadOnlyCollection<Evidence>
  fullName: System.Collections.Generic.IReadOnlyCollection<SMACD.AppTree.Evidence.Evidence>
  nameWithType.vb: IReadOnlyCollection(Of Evidence)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of SMACD.AppTree.Evidence.Evidence)
  name.vb: IReadOnlyCollection(Of Evidence)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{SMACD.AppTree.Evidence.Evidence}
  commentId: T:System.Collections.Generic.IEnumerable{SMACD.AppTree.Evidence.Evidence}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Evidence>
  nameWithType: IEnumerable<Evidence>
  fullName: System.Collections.Generic.IEnumerable<SMACD.AppTree.Evidence.Evidence>
  nameWithType.vb: IEnumerable(Of Evidence)
  fullName.vb: System.Collections.Generic.IEnumerable(Of SMACD.AppTree.Evidence.Evidence)
  name.vb: IEnumerable(Of Evidence)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList
  commentId: T:System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#IList#get_Item(System.Int32)
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#IList#get_Item(System.Int32)
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
  name: IList.get_Item(Int32)
  nameWithType: List<Evidence>.IList.get_Item(Int32)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.System.Collections.IList.get_Item(System.Int32)
  nameWithType.vb: List(Of Evidence).System.Collections.IList.get_Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).System.Collections.IList.get_Item(System.Int32)
  name.vb: System.Collections.IList.get_Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
    name: IList.get_Item
    nameWithType: List<Evidence>.IList.get_Item
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.System.Collections.IList.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
    name: System.Collections.IList.get_Item
    nameWithType: List(Of Evidence).System.Collections.IList.get_Item
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).System.Collections.IList.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#IList#set_Item(System.Int32,System.Object)
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#IList#set_Item(System.Int32,System.Object)
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
  name: IList.set_Item(Int32, Object)
  nameWithType: List<Evidence>.IList.set_Item(Int32, Object)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.System.Collections.IList.set_Item(System.Int32, System.Object)
  nameWithType.vb: List(Of Evidence).System.Collections.IList.set_Item(Int32, Object)
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).System.Collections.IList.set_Item(System.Int32, System.Object)
  name.vb: System.Collections.IList.set_Item(Int32, Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
    name: IList.set_Item
    nameWithType: List<Evidence>.IList.set_Item
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.System.Collections.IList.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
    name: System.Collections.IList.set_Item
    nameWithType: List(Of Evidence).System.Collections.IList.set_Item
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).System.Collections.IList.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Add(SMACD.AppTree.Evidence.Evidence)
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Add(SMACD.AppTree.Evidence.Evidence)
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.Add(`0)
  name: Add(Evidence)
  nameWithType: List<Evidence>.Add(Evidence)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.Add(SMACD.AppTree.Evidence.Evidence)
  nameWithType.vb: List(Of Evidence).Add(Evidence)
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).Add(SMACD.AppTree.Evidence.Evidence)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Add(`0)
    name: Add
    nameWithType: List<Evidence>.Add
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Add(`0)
    name: Add
    nameWithType: List(Of Evidence).Add
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.AddRange(System.Collections.Generic.IEnumerable{SMACD.AppTree.Evidence.Evidence})
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.AddRange(System.Collections.Generic.IEnumerable{SMACD.AppTree.Evidence.Evidence})
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  name: AddRange(IEnumerable<Evidence>)
  nameWithType: List<Evidence>.AddRange(IEnumerable<Evidence>)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.AddRange(System.Collections.Generic.IEnumerable<SMACD.AppTree.Evidence.Evidence>)
  nameWithType.vb: List(Of Evidence).AddRange(IEnumerable(Of Evidence))
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).AddRange(System.Collections.Generic.IEnumerable(Of SMACD.AppTree.Evidence.Evidence))
  name.vb: AddRange(IEnumerable(Of Evidence))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    name: AddRange
    nameWithType: List<Evidence>.AddRange
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.AddRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    name: AddRange
    nameWithType: List(Of Evidence).AddRange
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).AddRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.AsReadOnly
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.AsReadOnly
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.AsReadOnly
  name: AsReadOnly()
  nameWithType: List<Evidence>.AsReadOnly()
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.AsReadOnly()
  nameWithType.vb: List(Of Evidence).AsReadOnly()
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).AsReadOnly()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.AsReadOnly
    name: AsReadOnly
    nameWithType: List<Evidence>.AsReadOnly
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.AsReadOnly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.AsReadOnly
    name: AsReadOnly
    nameWithType: List(Of Evidence).AsReadOnly
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).AsReadOnly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.BinarySearch(System.Int32,System.Int32,SMACD.AppTree.Evidence.Evidence,System.Collections.Generic.IComparer{SMACD.AppTree.Evidence.Evidence})
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.BinarySearch(System.Int32,System.Int32,SMACD.AppTree.Evidence.Evidence,System.Collections.Generic.IComparer{SMACD.AppTree.Evidence.Evidence})
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  name: BinarySearch(Int32, Int32, Evidence, IComparer<Evidence>)
  nameWithType: List<Evidence>.BinarySearch(Int32, Int32, Evidence, IComparer<Evidence>)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.BinarySearch(System.Int32, System.Int32, SMACD.AppTree.Evidence.Evidence, System.Collections.Generic.IComparer<SMACD.AppTree.Evidence.Evidence>)
  nameWithType.vb: List(Of Evidence).BinarySearch(Int32, Int32, Evidence, IComparer(Of Evidence))
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).BinarySearch(System.Int32, System.Int32, SMACD.AppTree.Evidence.Evidence, System.Collections.Generic.IComparer(Of SMACD.AppTree.Evidence.Evidence))
  name.vb: BinarySearch(Int32, Int32, Evidence, IComparer(Of Evidence))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List<Evidence>.BinarySearch
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List(Of Evidence).BinarySearch
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.BinarySearch(SMACD.AppTree.Evidence.Evidence)
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.BinarySearch(SMACD.AppTree.Evidence.Evidence)
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.BinarySearch(`0)
  name: BinarySearch(Evidence)
  nameWithType: List<Evidence>.BinarySearch(Evidence)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.BinarySearch(SMACD.AppTree.Evidence.Evidence)
  nameWithType.vb: List(Of Evidence).BinarySearch(Evidence)
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).BinarySearch(SMACD.AppTree.Evidence.Evidence)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0)
    name: BinarySearch
    nameWithType: List<Evidence>.BinarySearch
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0)
    name: BinarySearch
    nameWithType: List(Of Evidence).BinarySearch
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.BinarySearch(SMACD.AppTree.Evidence.Evidence,System.Collections.Generic.IComparer{SMACD.AppTree.Evidence.Evidence})
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.BinarySearch(SMACD.AppTree.Evidence.Evidence,System.Collections.Generic.IComparer{SMACD.AppTree.Evidence.Evidence})
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  name: BinarySearch(Evidence, IComparer<Evidence>)
  nameWithType: List<Evidence>.BinarySearch(Evidence, IComparer<Evidence>)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.BinarySearch(SMACD.AppTree.Evidence.Evidence, System.Collections.Generic.IComparer<SMACD.AppTree.Evidence.Evidence>)
  nameWithType.vb: List(Of Evidence).BinarySearch(Evidence, IComparer(Of Evidence))
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).BinarySearch(SMACD.AppTree.Evidence.Evidence, System.Collections.Generic.IComparer(Of SMACD.AppTree.Evidence.Evidence))
  name.vb: BinarySearch(Evidence, IComparer(Of Evidence))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List<Evidence>.BinarySearch
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List(Of Evidence).BinarySearch
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Clear
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Clear
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.Clear
  name: Clear()
  nameWithType: List<Evidence>.Clear()
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.Clear()
  nameWithType.vb: List(Of Evidence).Clear()
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Clear
    name: Clear
    nameWithType: List<Evidence>.Clear
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Clear
    name: Clear
    nameWithType: List(Of Evidence).Clear
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Contains(SMACD.AppTree.Evidence.Evidence)
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Contains(SMACD.AppTree.Evidence.Evidence)
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.Contains(`0)
  name: Contains(Evidence)
  nameWithType: List<Evidence>.Contains(Evidence)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.Contains(SMACD.AppTree.Evidence.Evidence)
  nameWithType.vb: List(Of Evidence).Contains(Evidence)
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).Contains(SMACD.AppTree.Evidence.Evidence)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Contains(`0)
    name: Contains
    nameWithType: List<Evidence>.Contains
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Contains(`0)
    name: Contains
    nameWithType: List(Of Evidence).Contains
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.ConvertAll``1(System.Converter{SMACD.AppTree.Evidence.Evidence,{TOutput}})
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.ConvertAll``1(System.Converter{SMACD.AppTree.Evidence.Evidence,``0})
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
  name: ConvertAll<TOutput>(Converter<Evidence, TOutput>)
  nameWithType: List<Evidence>.ConvertAll<TOutput>(Converter<Evidence, TOutput>)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.ConvertAll<TOutput>(System.Converter<SMACD.AppTree.Evidence.Evidence, TOutput>)
  nameWithType.vb: List(Of Evidence).ConvertAll(Of TOutput)(Converter(Of Evidence, TOutput))
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).ConvertAll(Of TOutput)(System.Converter(Of SMACD.AppTree.Evidence.Evidence, TOutput))
  name.vb: ConvertAll(Of TOutput)(Converter(Of Evidence, TOutput))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
    name: ConvertAll<TOutput>
    nameWithType: List<Evidence>.ConvertAll<TOutput>
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.ConvertAll<TOutput>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
    name: ConvertAll(Of TOutput)
    nameWithType: List(Of Evidence).ConvertAll(Of TOutput)
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).ConvertAll(Of TOutput)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.CopyTo(System.Int32,SMACD.AppTree.Evidence.Evidence[],System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.CopyTo(System.Int32,SMACD.AppTree.Evidence.Evidence[],System.Int32,System.Int32)
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  name: CopyTo(Int32, Evidence[], Int32, Int32)
  nameWithType: List<Evidence>.CopyTo(Int32, Evidence[], Int32, Int32)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.CopyTo(System.Int32, SMACD.AppTree.Evidence.Evidence[], System.Int32, System.Int32)
  nameWithType.vb: List(Of Evidence).CopyTo(Int32, Evidence(), Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).CopyTo(System.Int32, SMACD.AppTree.Evidence.Evidence(), System.Int32, System.Int32)
  name.vb: CopyTo(Int32, Evidence(), Int32, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
    name: CopyTo
    nameWithType: List<Evidence>.CopyTo
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
    name: CopyTo
    nameWithType: List(Of Evidence).CopyTo
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.CopyTo(SMACD.AppTree.Evidence.Evidence[])
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.CopyTo(SMACD.AppTree.Evidence.Evidence[])
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.CopyTo(`0[])
  name: CopyTo(Evidence[])
  nameWithType: List<Evidence>.CopyTo(Evidence[])
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.CopyTo(SMACD.AppTree.Evidence.Evidence[])
  nameWithType.vb: List(Of Evidence).CopyTo(Evidence())
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).CopyTo(SMACD.AppTree.Evidence.Evidence())
  name.vb: CopyTo(Evidence())
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[])
    name: CopyTo
    nameWithType: List<Evidence>.CopyTo
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[])
    name: CopyTo
    nameWithType: List(Of Evidence).CopyTo
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.CopyTo(SMACD.AppTree.Evidence.Evidence[],System.Int32)
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.CopyTo(SMACD.AppTree.Evidence.Evidence[],System.Int32)
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  name: CopyTo(Evidence[], Int32)
  nameWithType: List<Evidence>.CopyTo(Evidence[], Int32)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.CopyTo(SMACD.AppTree.Evidence.Evidence[], System.Int32)
  nameWithType.vb: List(Of Evidence).CopyTo(Evidence(), Int32)
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).CopyTo(SMACD.AppTree.Evidence.Evidence(), System.Int32)
  name.vb: CopyTo(Evidence(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: List<Evidence>.CopyTo
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: List(Of Evidence).CopyTo
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Exists(System.Predicate{SMACD.AppTree.Evidence.Evidence})
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Exists(System.Predicate{SMACD.AppTree.Evidence.Evidence})
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  name: Exists(Predicate<Evidence>)
  nameWithType: List<Evidence>.Exists(Predicate<Evidence>)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.Exists(System.Predicate<SMACD.AppTree.Evidence.Evidence>)
  nameWithType.vb: List(Of Evidence).Exists(Predicate(Of Evidence))
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).Exists(System.Predicate(Of SMACD.AppTree.Evidence.Evidence))
  name.vb: Exists(Predicate(Of Evidence))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    name: Exists
    nameWithType: List<Evidence>.Exists
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    name: Exists
    nameWithType: List(Of Evidence).Exists
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Find(System.Predicate{SMACD.AppTree.Evidence.Evidence})
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Find(System.Predicate{SMACD.AppTree.Evidence.Evidence})
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.Find(System.Predicate{`0})
  name: Find(Predicate<Evidence>)
  nameWithType: List<Evidence>.Find(Predicate<Evidence>)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.Find(System.Predicate<SMACD.AppTree.Evidence.Evidence>)
  nameWithType.vb: List(Of Evidence).Find(Predicate(Of Evidence))
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).Find(System.Predicate(Of SMACD.AppTree.Evidence.Evidence))
  name.vb: Find(Predicate(Of Evidence))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    name: Find
    nameWithType: List<Evidence>.Find
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    name: Find
    nameWithType: List(Of Evidence).Find
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.FindAll(System.Predicate{SMACD.AppTree.Evidence.Evidence})
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.FindAll(System.Predicate{SMACD.AppTree.Evidence.Evidence})
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  name: FindAll(Predicate<Evidence>)
  nameWithType: List<Evidence>.FindAll(Predicate<Evidence>)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.FindAll(System.Predicate<SMACD.AppTree.Evidence.Evidence>)
  nameWithType.vb: List(Of Evidence).FindAll(Predicate(Of Evidence))
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).FindAll(System.Predicate(Of SMACD.AppTree.Evidence.Evidence))
  name.vb: FindAll(Predicate(Of Evidence))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    name: FindAll
    nameWithType: List<Evidence>.FindAll
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    name: FindAll
    nameWithType: List(Of Evidence).FindAll
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.FindIndex(System.Int32,System.Int32,System.Predicate{SMACD.AppTree.Evidence.Evidence})
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.FindIndex(System.Int32,System.Int32,System.Predicate{SMACD.AppTree.Evidence.Evidence})
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  name: FindIndex(Int32, Int32, Predicate<Evidence>)
  nameWithType: List<Evidence>.FindIndex(Int32, Int32, Predicate<Evidence>)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.FindIndex(System.Int32, System.Int32, System.Predicate<SMACD.AppTree.Evidence.Evidence>)
  nameWithType.vb: List(Of Evidence).FindIndex(Int32, Int32, Predicate(Of Evidence))
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).FindIndex(System.Int32, System.Int32, System.Predicate(Of SMACD.AppTree.Evidence.Evidence))
  name.vb: FindIndex(Int32, Int32, Predicate(Of Evidence))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List<Evidence>.FindIndex
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of Evidence).FindIndex
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.FindIndex(System.Int32,System.Predicate{SMACD.AppTree.Evidence.Evidence})
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.FindIndex(System.Int32,System.Predicate{SMACD.AppTree.Evidence.Evidence})
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
  name: FindIndex(Int32, Predicate<Evidence>)
  nameWithType: List<Evidence>.FindIndex(Int32, Predicate<Evidence>)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.FindIndex(System.Int32, System.Predicate<SMACD.AppTree.Evidence.Evidence>)
  nameWithType.vb: List(Of Evidence).FindIndex(Int32, Predicate(Of Evidence))
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).FindIndex(System.Int32, System.Predicate(Of SMACD.AppTree.Evidence.Evidence))
  name.vb: FindIndex(Int32, Predicate(Of Evidence))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List<Evidence>.FindIndex
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of Evidence).FindIndex
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.FindIndex(System.Predicate{SMACD.AppTree.Evidence.Evidence})
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.FindIndex(System.Predicate{SMACD.AppTree.Evidence.Evidence})
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
  name: FindIndex(Predicate<Evidence>)
  nameWithType: List<Evidence>.FindIndex(Predicate<Evidence>)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.FindIndex(System.Predicate<SMACD.AppTree.Evidence.Evidence>)
  nameWithType.vb: List(Of Evidence).FindIndex(Predicate(Of Evidence))
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).FindIndex(System.Predicate(Of SMACD.AppTree.Evidence.Evidence))
  name.vb: FindIndex(Predicate(Of Evidence))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
    name: FindIndex
    nameWithType: List<Evidence>.FindIndex
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of Evidence).FindIndex
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.FindLast(System.Predicate{SMACD.AppTree.Evidence.Evidence})
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.FindLast(System.Predicate{SMACD.AppTree.Evidence.Evidence})
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  name: FindLast(Predicate<Evidence>)
  nameWithType: List<Evidence>.FindLast(Predicate<Evidence>)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.FindLast(System.Predicate<SMACD.AppTree.Evidence.Evidence>)
  nameWithType.vb: List(Of Evidence).FindLast(Predicate(Of Evidence))
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).FindLast(System.Predicate(Of SMACD.AppTree.Evidence.Evidence))
  name.vb: FindLast(Predicate(Of Evidence))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    name: FindLast
    nameWithType: List<Evidence>.FindLast
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.FindLast
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    name: FindLast
    nameWithType: List(Of Evidence).FindLast
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).FindLast
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.FindLastIndex(System.Int32,System.Int32,System.Predicate{SMACD.AppTree.Evidence.Evidence})
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.FindLastIndex(System.Int32,System.Int32,System.Predicate{SMACD.AppTree.Evidence.Evidence})
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  name: FindLastIndex(Int32, Int32, Predicate<Evidence>)
  nameWithType: List<Evidence>.FindLastIndex(Int32, Int32, Predicate<Evidence>)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.FindLastIndex(System.Int32, System.Int32, System.Predicate<SMACD.AppTree.Evidence.Evidence>)
  nameWithType.vb: List(Of Evidence).FindLastIndex(Int32, Int32, Predicate(Of Evidence))
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).FindLastIndex(System.Int32, System.Int32, System.Predicate(Of SMACD.AppTree.Evidence.Evidence))
  name.vb: FindLastIndex(Int32, Int32, Predicate(Of Evidence))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<Evidence>.FindLastIndex
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of Evidence).FindLastIndex
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.FindLastIndex(System.Int32,System.Predicate{SMACD.AppTree.Evidence.Evidence})
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.FindLastIndex(System.Int32,System.Predicate{SMACD.AppTree.Evidence.Evidence})
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
  name: FindLastIndex(Int32, Predicate<Evidence>)
  nameWithType: List<Evidence>.FindLastIndex(Int32, Predicate<Evidence>)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.FindLastIndex(System.Int32, System.Predicate<SMACD.AppTree.Evidence.Evidence>)
  nameWithType.vb: List(Of Evidence).FindLastIndex(Int32, Predicate(Of Evidence))
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).FindLastIndex(System.Int32, System.Predicate(Of SMACD.AppTree.Evidence.Evidence))
  name.vb: FindLastIndex(Int32, Predicate(Of Evidence))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<Evidence>.FindLastIndex
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of Evidence).FindLastIndex
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.FindLastIndex(System.Predicate{SMACD.AppTree.Evidence.Evidence})
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.FindLastIndex(System.Predicate{SMACD.AppTree.Evidence.Evidence})
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
  name: FindLastIndex(Predicate<Evidence>)
  nameWithType: List<Evidence>.FindLastIndex(Predicate<Evidence>)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.FindLastIndex(System.Predicate<SMACD.AppTree.Evidence.Evidence>)
  nameWithType.vb: List(Of Evidence).FindLastIndex(Predicate(Of Evidence))
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).FindLastIndex(System.Predicate(Of SMACD.AppTree.Evidence.Evidence))
  name.vb: FindLastIndex(Predicate(Of Evidence))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<Evidence>.FindLastIndex
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of Evidence).FindLastIndex
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.ForEach(System.Action{SMACD.AppTree.Evidence.Evidence})
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.ForEach(System.Action{SMACD.AppTree.Evidence.Evidence})
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.ForEach(System.Action{`0})
  name: ForEach(Action<Evidence>)
  nameWithType: List<Evidence>.ForEach(Action<Evidence>)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.ForEach(System.Action<SMACD.AppTree.Evidence.Evidence>)
  nameWithType.vb: List(Of Evidence).ForEach(Action(Of Evidence))
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).ForEach(System.Action(Of SMACD.AppTree.Evidence.Evidence))
  name.vb: ForEach(Action(Of Evidence))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
    name: ForEach
    nameWithType: List<Evidence>.ForEach
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.ForEach
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
    name: ForEach
    nameWithType: List(Of Evidence).ForEach
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).ForEach
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.GetEnumerator
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.GetEnumerator
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: List<Evidence>.GetEnumerator()
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.GetEnumerator()
  nameWithType.vb: List(Of Evidence).GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.GetEnumerator
    name: GetEnumerator
    nameWithType: List<Evidence>.GetEnumerator
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.GetEnumerator
    name: GetEnumerator
    nameWithType: List(Of Evidence).GetEnumerator
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.GetRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.GetRange(System.Int32,System.Int32)
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  name: GetRange(Int32, Int32)
  nameWithType: List<Evidence>.GetRange(Int32, Int32)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.GetRange(System.Int32, System.Int32)
  nameWithType.vb: List(Of Evidence).GetRange(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).GetRange(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
    name: GetRange
    nameWithType: List<Evidence>.GetRange
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.GetRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
    name: GetRange
    nameWithType: List(Of Evidence).GetRange
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).GetRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.IndexOf(SMACD.AppTree.Evidence.Evidence)
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.IndexOf(SMACD.AppTree.Evidence.Evidence)
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.IndexOf(`0)
  name: IndexOf(Evidence)
  nameWithType: List<Evidence>.IndexOf(Evidence)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.IndexOf(SMACD.AppTree.Evidence.Evidence)
  nameWithType.vb: List(Of Evidence).IndexOf(Evidence)
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).IndexOf(SMACD.AppTree.Evidence.Evidence)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0)
    name: IndexOf
    nameWithType: List<Evidence>.IndexOf
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0)
    name: IndexOf
    nameWithType: List(Of Evidence).IndexOf
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.IndexOf(SMACD.AppTree.Evidence.Evidence,System.Int32)
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.IndexOf(SMACD.AppTree.Evidence.Evidence,System.Int32)
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  name: IndexOf(Evidence, Int32)
  nameWithType: List<Evidence>.IndexOf(Evidence, Int32)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.IndexOf(SMACD.AppTree.Evidence.Evidence, System.Int32)
  nameWithType.vb: List(Of Evidence).IndexOf(Evidence, Int32)
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).IndexOf(SMACD.AppTree.Evidence.Evidence, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
    name: IndexOf
    nameWithType: List<Evidence>.IndexOf
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
    name: IndexOf
    nameWithType: List(Of Evidence).IndexOf
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.IndexOf(SMACD.AppTree.Evidence.Evidence,System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.IndexOf(SMACD.AppTree.Evidence.Evidence,System.Int32,System.Int32)
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  name: IndexOf(Evidence, Int32, Int32)
  nameWithType: List<Evidence>.IndexOf(Evidence, Int32, Int32)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.IndexOf(SMACD.AppTree.Evidence.Evidence, System.Int32, System.Int32)
  nameWithType.vb: List(Of Evidence).IndexOf(Evidence, Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).IndexOf(SMACD.AppTree.Evidence.Evidence, System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
    name: IndexOf
    nameWithType: List<Evidence>.IndexOf
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
    name: IndexOf
    nameWithType: List(Of Evidence).IndexOf
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Insert(System.Int32,SMACD.AppTree.Evidence.Evidence)
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Insert(System.Int32,SMACD.AppTree.Evidence.Evidence)
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.Insert(System.Int32,`0)
  name: Insert(Int32, Evidence)
  nameWithType: List<Evidence>.Insert(Int32, Evidence)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.Insert(System.Int32, SMACD.AppTree.Evidence.Evidence)
  nameWithType.vb: List(Of Evidence).Insert(Int32, Evidence)
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).Insert(System.Int32, SMACD.AppTree.Evidence.Evidence)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: List<Evidence>.Insert
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: List(Of Evidence).Insert
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{SMACD.AppTree.Evidence.Evidence})
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{SMACD.AppTree.Evidence.Evidence})
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  name: InsertRange(Int32, IEnumerable<Evidence>)
  nameWithType: List<Evidence>.InsertRange(Int32, IEnumerable<Evidence>)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.InsertRange(System.Int32, System.Collections.Generic.IEnumerable<SMACD.AppTree.Evidence.Evidence>)
  nameWithType.vb: List(Of Evidence).InsertRange(Int32, IEnumerable(Of Evidence))
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).InsertRange(System.Int32, System.Collections.Generic.IEnumerable(Of SMACD.AppTree.Evidence.Evidence))
  name.vb: InsertRange(Int32, IEnumerable(Of Evidence))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    name: InsertRange
    nameWithType: List<Evidence>.InsertRange
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.InsertRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    name: InsertRange
    nameWithType: List(Of Evidence).InsertRange
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).InsertRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.LastIndexOf(SMACD.AppTree.Evidence.Evidence)
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.LastIndexOf(SMACD.AppTree.Evidence.Evidence)
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.LastIndexOf(`0)
  name: LastIndexOf(Evidence)
  nameWithType: List<Evidence>.LastIndexOf(Evidence)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.LastIndexOf(SMACD.AppTree.Evidence.Evidence)
  nameWithType.vb: List(Of Evidence).LastIndexOf(Evidence)
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).LastIndexOf(SMACD.AppTree.Evidence.Evidence)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0)
    name: LastIndexOf
    nameWithType: List<Evidence>.LastIndexOf
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0)
    name: LastIndexOf
    nameWithType: List(Of Evidence).LastIndexOf
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.LastIndexOf(SMACD.AppTree.Evidence.Evidence,System.Int32)
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.LastIndexOf(SMACD.AppTree.Evidence.Evidence,System.Int32)
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  name: LastIndexOf(Evidence, Int32)
  nameWithType: List<Evidence>.LastIndexOf(Evidence, Int32)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.LastIndexOf(SMACD.AppTree.Evidence.Evidence, System.Int32)
  nameWithType.vb: List(Of Evidence).LastIndexOf(Evidence, Int32)
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).LastIndexOf(SMACD.AppTree.Evidence.Evidence, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
    name: LastIndexOf
    nameWithType: List<Evidence>.LastIndexOf
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
    name: LastIndexOf
    nameWithType: List(Of Evidence).LastIndexOf
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.LastIndexOf(SMACD.AppTree.Evidence.Evidence,System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.LastIndexOf(SMACD.AppTree.Evidence.Evidence,System.Int32,System.Int32)
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  name: LastIndexOf(Evidence, Int32, Int32)
  nameWithType: List<Evidence>.LastIndexOf(Evidence, Int32, Int32)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.LastIndexOf(SMACD.AppTree.Evidence.Evidence, System.Int32, System.Int32)
  nameWithType.vb: List(Of Evidence).LastIndexOf(Evidence, Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).LastIndexOf(SMACD.AppTree.Evidence.Evidence, System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
    name: LastIndexOf
    nameWithType: List<Evidence>.LastIndexOf
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
    name: LastIndexOf
    nameWithType: List(Of Evidence).LastIndexOf
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Remove(SMACD.AppTree.Evidence.Evidence)
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Remove(SMACD.AppTree.Evidence.Evidence)
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.Remove(`0)
  name: Remove(Evidence)
  nameWithType: List<Evidence>.Remove(Evidence)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.Remove(SMACD.AppTree.Evidence.Evidence)
  nameWithType.vb: List(Of Evidence).Remove(Evidence)
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).Remove(SMACD.AppTree.Evidence.Evidence)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Remove(`0)
    name: Remove
    nameWithType: List<Evidence>.Remove
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Remove(`0)
    name: Remove
    nameWithType: List(Of Evidence).Remove
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.RemoveAll(System.Predicate{SMACD.AppTree.Evidence.Evidence})
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.RemoveAll(System.Predicate{SMACD.AppTree.Evidence.Evidence})
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
  name: RemoveAll(Predicate<Evidence>)
  nameWithType: List<Evidence>.RemoveAll(Predicate<Evidence>)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.RemoveAll(System.Predicate<SMACD.AppTree.Evidence.Evidence>)
  nameWithType.vb: List(Of Evidence).RemoveAll(Predicate(Of Evidence))
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).RemoveAll(System.Predicate(Of SMACD.AppTree.Evidence.Evidence))
  name.vb: RemoveAll(Predicate(Of Evidence))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
    name: RemoveAll
    nameWithType: List<Evidence>.RemoveAll
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.RemoveAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
    name: RemoveAll
    nameWithType: List(Of Evidence).RemoveAll
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).RemoveAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.RemoveAt(System.Int32)
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.RemoveAt(System.Int32)
  name: RemoveAt(Int32)
  nameWithType: List<Evidence>.RemoveAt(Int32)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.RemoveAt(System.Int32)
  nameWithType.vb: List(Of Evidence).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: List<Evidence>.RemoveAt
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: List(Of Evidence).RemoveAt
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.RemoveRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.RemoveRange(System.Int32,System.Int32)
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  name: RemoveRange(Int32, Int32)
  nameWithType: List<Evidence>.RemoveRange(Int32, Int32)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.RemoveRange(System.Int32, System.Int32)
  nameWithType.vb: List(Of Evidence).RemoveRange(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).RemoveRange(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    name: RemoveRange
    nameWithType: List<Evidence>.RemoveRange
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.RemoveRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    name: RemoveRange
    nameWithType: List(Of Evidence).RemoveRange
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).RemoveRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Reverse
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Reverse
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.Reverse
  name: Reverse()
  nameWithType: List<Evidence>.Reverse()
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.Reverse()
  nameWithType.vb: List(Of Evidence).Reverse()
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).Reverse()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Reverse
    name: Reverse
    nameWithType: List<Evidence>.Reverse
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Reverse
    name: Reverse
    nameWithType: List(Of Evidence).Reverse
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Reverse(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Reverse(System.Int32,System.Int32)
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  name: Reverse(Int32, Int32)
  nameWithType: List<Evidence>.Reverse(Int32, Int32)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.Reverse(System.Int32, System.Int32)
  nameWithType.vb: List(Of Evidence).Reverse(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).Reverse(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
    name: Reverse
    nameWithType: List<Evidence>.Reverse
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
    name: Reverse
    nameWithType: List(Of Evidence).Reverse
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Sort
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Sort
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.Sort
  name: Sort()
  nameWithType: List<Evidence>.Sort()
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.Sort()
  nameWithType.vb: List(Of Evidence).Sort()
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).Sort()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort
    name: Sort
    nameWithType: List<Evidence>.Sort
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort
    name: Sort
    nameWithType: List(Of Evidence).Sort
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Sort(System.Collections.Generic.IComparer{SMACD.AppTree.Evidence.Evidence})
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Sort(System.Collections.Generic.IComparer{SMACD.AppTree.Evidence.Evidence})
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
  name: Sort(IComparer<Evidence>)
  nameWithType: List<Evidence>.Sort(IComparer<Evidence>)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.Sort(System.Collections.Generic.IComparer<SMACD.AppTree.Evidence.Evidence>)
  nameWithType.vb: List(Of Evidence).Sort(IComparer(Of Evidence))
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).Sort(System.Collections.Generic.IComparer(Of SMACD.AppTree.Evidence.Evidence))
  name.vb: Sort(IComparer(Of Evidence))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List<Evidence>.Sort
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List(Of Evidence).Sort
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Sort(System.Comparison{SMACD.AppTree.Evidence.Evidence})
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Sort(System.Comparison{SMACD.AppTree.Evidence.Evidence})
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
  name: Sort(Comparison<Evidence>)
  nameWithType: List<Evidence>.Sort(Comparison<Evidence>)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.Sort(System.Comparison<SMACD.AppTree.Evidence.Evidence>)
  nameWithType.vb: List(Of Evidence).Sort(Comparison(Of Evidence))
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).Sort(System.Comparison(Of SMACD.AppTree.Evidence.Evidence))
  name.vb: Sort(Comparison(Of Evidence))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
    name: Sort
    nameWithType: List<Evidence>.Sort
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
    name: Sort
    nameWithType: List(Of Evidence).Sort
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{SMACD.AppTree.Evidence.Evidence})
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{SMACD.AppTree.Evidence.Evidence})
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  name: Sort(Int32, Int32, IComparer<Evidence>)
  nameWithType: List<Evidence>.Sort(Int32, Int32, IComparer<Evidence>)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer<SMACD.AppTree.Evidence.Evidence>)
  nameWithType.vb: List(Of Evidence).Sort(Int32, Int32, IComparer(Of Evidence))
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer(Of SMACD.AppTree.Evidence.Evidence))
  name.vb: Sort(Int32, Int32, IComparer(Of Evidence))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List<Evidence>.Sort
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List(Of Evidence).Sort
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  name: IEnumerable<Evidence>.GetEnumerator()
  nameWithType: List<Evidence>.IEnumerable<Evidence>.GetEnumerator()
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.System.Collections.Generic.IEnumerable<SMACD.AppTree.Evidence.Evidence>.GetEnumerator()
  nameWithType.vb: List(Of Evidence).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    name: IEnumerable<Evidence>.GetEnumerator
    nameWithType: List<Evidence>.IEnumerable<Evidence>.GetEnumerator
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.System.Collections.Generic.IEnumerable<SMACD.AppTree.Evidence.Evidence>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    name: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    nameWithType: List(Of Evidence).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: List<Evidence>.ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  nameWithType.vb: List(Of Evidence).System.Collections.ICollection.CopyTo(Array, Int32)
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: ICollection.CopyTo
    nameWithType: List<Evidence>.ICollection.CopyTo
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: System.Collections.ICollection.CopyTo
    nameWithType: List(Of Evidence).System.Collections.ICollection.CopyTo
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator()
  nameWithType: List<Evidence>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: List(Of Evidence).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: List<Evidence>.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: List(Of Evidence).System.Collections.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#IList#Add(System.Object)
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#IList#Add(System.Object)
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
  name: IList.Add(Object)
  nameWithType: List<Evidence>.IList.Add(Object)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.System.Collections.IList.Add(System.Object)
  nameWithType.vb: List(Of Evidence).System.Collections.IList.Add(Object)
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).System.Collections.IList.Add(System.Object)
  name.vb: System.Collections.IList.Add(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
    name: IList.Add
    nameWithType: List<Evidence>.IList.Add
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
    name: System.Collections.IList.Add
    nameWithType: List(Of Evidence).System.Collections.IList.Add
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#IList#Contains(System.Object)
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#IList#Contains(System.Object)
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
  name: IList.Contains(Object)
  nameWithType: List<Evidence>.IList.Contains(Object)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.System.Collections.IList.Contains(System.Object)
  nameWithType.vb: List(Of Evidence).System.Collections.IList.Contains(Object)
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).System.Collections.IList.Contains(System.Object)
  name.vb: System.Collections.IList.Contains(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
    name: IList.Contains
    nameWithType: List<Evidence>.IList.Contains
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
    name: System.Collections.IList.Contains
    nameWithType: List(Of Evidence).System.Collections.IList.Contains
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#IList#IndexOf(System.Object)
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#IList#IndexOf(System.Object)
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
  name: IList.IndexOf(Object)
  nameWithType: List<Evidence>.IList.IndexOf(Object)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.System.Collections.IList.IndexOf(System.Object)
  nameWithType.vb: List(Of Evidence).System.Collections.IList.IndexOf(Object)
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).System.Collections.IList.IndexOf(System.Object)
  name.vb: System.Collections.IList.IndexOf(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
    name: IList.IndexOf
    nameWithType: List<Evidence>.IList.IndexOf
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
    name: System.Collections.IList.IndexOf
    nameWithType: List(Of Evidence).System.Collections.IList.IndexOf
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#IList#Insert(System.Int32,System.Object)
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
  name: IList.Insert(Int32, Object)
  nameWithType: List<Evidence>.IList.Insert(Int32, Object)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.System.Collections.IList.Insert(System.Int32, System.Object)
  nameWithType.vb: List(Of Evidence).System.Collections.IList.Insert(Int32, Object)
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).System.Collections.IList.Insert(System.Int32, System.Object)
  name.vb: System.Collections.IList.Insert(Int32, Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: IList.Insert
    nameWithType: List<Evidence>.IList.Insert
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: System.Collections.IList.Insert
    nameWithType: List(Of Evidence).System.Collections.IList.Insert
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#IList#Remove(System.Object)
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#IList#Remove(System.Object)
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
  name: IList.Remove(Object)
  nameWithType: List<Evidence>.IList.Remove(Object)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.System.Collections.IList.Remove(System.Object)
  nameWithType.vb: List(Of Evidence).System.Collections.IList.Remove(Object)
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).System.Collections.IList.Remove(System.Object)
  name.vb: System.Collections.IList.Remove(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
    name: IList.Remove
    nameWithType: List<Evidence>.IList.Remove
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
    name: System.Collections.IList.Remove
    nameWithType: List(Of Evidence).System.Collections.IList.Remove
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.ToArray
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.ToArray
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.ToArray
  name: ToArray()
  nameWithType: List<Evidence>.ToArray()
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.ToArray()
  nameWithType.vb: List(Of Evidence).ToArray()
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).ToArray()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ToArray
    name: ToArray
    nameWithType: List<Evidence>.ToArray
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.ToArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ToArray
    name: ToArray
    nameWithType: List(Of Evidence).ToArray
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).ToArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.TrimExcess
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.TrimExcess
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.TrimExcess
  name: TrimExcess()
  nameWithType: List<Evidence>.TrimExcess()
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.TrimExcess()
  nameWithType.vb: List(Of Evidence).TrimExcess()
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).TrimExcess()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.TrimExcess
    name: TrimExcess
    nameWithType: List<Evidence>.TrimExcess
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.TrimExcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.TrimExcess
    name: TrimExcess
    nameWithType: List(Of Evidence).TrimExcess
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).TrimExcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.TrueForAll(System.Predicate{SMACD.AppTree.Evidence.Evidence})
  commentId: M:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.TrueForAll(System.Predicate{SMACD.AppTree.Evidence.Evidence})
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  name: TrueForAll(Predicate<Evidence>)
  nameWithType: List<Evidence>.TrueForAll(Predicate<Evidence>)
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.TrueForAll(System.Predicate<SMACD.AppTree.Evidence.Evidence>)
  nameWithType.vb: List(Of Evidence).TrueForAll(Predicate(Of Evidence))
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).TrueForAll(System.Predicate(Of SMACD.AppTree.Evidence.Evidence))
  name.vb: TrueForAll(Predicate(Of Evidence))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    name: TrueForAll
    nameWithType: List<Evidence>.TrueForAll
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.TrueForAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    name: TrueForAll
    nameWithType: List(Of Evidence).TrueForAll
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).TrueForAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Capacity
  commentId: P:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Capacity
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.Capacity
  name: Capacity
  nameWithType: List<Evidence>.Capacity
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.Capacity
  nameWithType.vb: List(Of Evidence).Capacity
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).Capacity
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Count
  commentId: P:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Count
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.Count
  name: Count
  nameWithType: List<Evidence>.Count
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.Count
  nameWithType.vb: List(Of Evidence).Count
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).Count
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Item(System.Int32)
  commentId: P:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.Item(System.Int32)
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.Item(System.Int32)
  name: Item[Int32]
  nameWithType: List<Evidence>.Item[Int32]
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.Item[System.Int32]
  nameWithType.vb: List(Of Evidence).Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Item(System.Int32)
    name: Item
    nameWithType: List<Evidence>.Item
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.List`1.Item(System.Int32)
    name: Item
    nameWithType: List(Of Evidence).Item
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#Generic#ICollection{T}#IsReadOnly
  commentId: P:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#Generic#ICollection{T}#IsReadOnly
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  name: ICollection<Evidence>.IsReadOnly
  nameWithType: List<Evidence>.ICollection<Evidence>.IsReadOnly
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.System.Collections.Generic.ICollection<SMACD.AppTree.Evidence.Evidence>.IsReadOnly
  nameWithType.vb: List(Of Evidence).System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized
  name: ICollection.IsSynchronized
  nameWithType: List<Evidence>.ICollection.IsSynchronized
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.System.Collections.ICollection.IsSynchronized
  nameWithType.vb: List(Of Evidence).System.Collections.ICollection.IsSynchronized
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#ICollection#SyncRoot
  commentId: P:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#ICollection#SyncRoot
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot
  name: ICollection.SyncRoot
  nameWithType: List<Evidence>.ICollection.SyncRoot
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.System.Collections.ICollection.SyncRoot
  nameWithType.vb: List(Of Evidence).System.Collections.ICollection.SyncRoot
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#IList#IsFixedSize
  commentId: P:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#IList#IsFixedSize
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize
  name: IList.IsFixedSize
  nameWithType: List<Evidence>.IList.IsFixedSize
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.System.Collections.IList.IsFixedSize
  nameWithType.vb: List(Of Evidence).System.Collections.IList.IsFixedSize
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).System.Collections.IList.IsFixedSize
  name.vb: System.Collections.IList.IsFixedSize
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#IList#IsReadOnly
  commentId: P:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#IList#IsReadOnly
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly
  name: IList.IsReadOnly
  nameWithType: List<Evidence>.IList.IsReadOnly
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.System.Collections.IList.IsReadOnly
  nameWithType.vb: List(Of Evidence).System.Collections.IList.IsReadOnly
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).System.Collections.IList.IsReadOnly
  name.vb: System.Collections.IList.IsReadOnly
- uid: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#IList#Item(System.Int32)
  commentId: P:System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}.System#Collections#IList#Item(System.Int32)
  parent: System.Collections.Generic.List{SMACD.AppTree.Evidence.Evidence}
  definition: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
  name: IList.Item[Int32]
  nameWithType: List<Evidence>.IList.Item[Int32]
  fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.System.Collections.IList.Item[System.Int32]
  nameWithType.vb: List(Of Evidence).System.Collections.IList.Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).System.Collections.IList.Item(System.Int32)
  name.vb: System.Collections.IList.Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
    name: IList.Item
    nameWithType: List<Evidence>.IList.Item
    fullName: System.Collections.Generic.List<SMACD.AppTree.Evidence.Evidence>.System.Collections.IList.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
    name: System.Collections.IList.Item
    nameWithType: List(Of Evidence).System.Collections.IList.Item
    fullName: System.Collections.Generic.List(Of SMACD.AppTree.Evidence.Evidence).System.Collections.IList.Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
  isExternal: true
  name: IList.get_Item(Int32)
  nameWithType: List<T>.IList.get_Item(Int32)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.get_Item(System.Int32)
  nameWithType.vb: List(Of T).System.Collections.IList.get_Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.get_Item(System.Int32)
  name.vb: System.Collections.IList.get_Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
    name: IList.get_Item
    nameWithType: List<T>.IList.get_Item
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#get_Item(System.Int32)
    name: System.Collections.IList.get_Item
    nameWithType: List(Of T).System.Collections.IList.get_Item
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.get_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
  isExternal: true
  name: IList.set_Item(Int32, Object)
  nameWithType: List<T>.IList.set_Item(Int32, Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.set_Item(System.Int32, System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.set_Item(Int32, Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.set_Item(System.Int32, System.Object)
  name.vb: System.Collections.IList.set_Item(Int32, Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
    name: IList.set_Item
    nameWithType: List<T>.IList.set_Item
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#set_Item(System.Int32,System.Object)
    name: System.Collections.IList.set_Item
    nameWithType: List(Of T).System.Collections.IList.set_Item
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.set_Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Add(`0)
  commentId: M:System.Collections.Generic.List`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: List<T>.Add(T)
  fullName: System.Collections.Generic.List<T>.Add(T)
  nameWithType.vb: List(Of T).Add(T)
  fullName.vb: System.Collections.Generic.List(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Add(`0)
    name: Add
    nameWithType: List<T>.Add
    fullName: System.Collections.Generic.List<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Add(`0)
    name: Add
    nameWithType: List(Of T).Add
    fullName: System.Collections.Generic.List(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: AddRange(IEnumerable<T>)
  nameWithType: List<T>.AddRange(IEnumerable<T>)
  fullName: System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: List(Of T).AddRange(IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).AddRange(System.Collections.Generic.IEnumerable(Of T))
  name.vb: AddRange(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    name: AddRange
    nameWithType: List<T>.AddRange
    fullName: System.Collections.Generic.List<T>.AddRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
    name: AddRange
    nameWithType: List(Of T).AddRange
    fullName: System.Collections.Generic.List(Of T).AddRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.AsReadOnly
  commentId: M:System.Collections.Generic.List`1.AsReadOnly
  isExternal: true
  name: AsReadOnly()
  nameWithType: List<T>.AsReadOnly()
  fullName: System.Collections.Generic.List<T>.AsReadOnly()
  nameWithType.vb: List(Of T).AsReadOnly()
  fullName.vb: System.Collections.Generic.List(Of T).AsReadOnly()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.AsReadOnly
    name: AsReadOnly
    nameWithType: List<T>.AsReadOnly
    fullName: System.Collections.Generic.List<T>.AsReadOnly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.AsReadOnly
    name: AsReadOnly
    nameWithType: List(Of T).AsReadOnly
    fullName: System.Collections.Generic.List(Of T).AsReadOnly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  isExternal: true
  name: BinarySearch(Int32, Int32, T, IComparer<T>)
  nameWithType: List<T>.BinarySearch(Int32, Int32, T, IComparer<T>)
  fullName: System.Collections.Generic.List<T>.BinarySearch(System.Int32, System.Int32, T, System.Collections.Generic.IComparer<T>)
  nameWithType.vb: List(Of T).BinarySearch(Int32, Int32, T, IComparer(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).BinarySearch(System.Int32, System.Int32, T, System.Collections.Generic.IComparer(Of T))
  name.vb: BinarySearch(Int32, Int32, T, IComparer(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List<T>.BinarySearch
    fullName: System.Collections.Generic.List<T>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List(Of T).BinarySearch
    fullName: System.Collections.Generic.List(Of T).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.BinarySearch(`0)
  commentId: M:System.Collections.Generic.List`1.BinarySearch(`0)
  isExternal: true
  name: BinarySearch(T)
  nameWithType: List<T>.BinarySearch(T)
  fullName: System.Collections.Generic.List<T>.BinarySearch(T)
  nameWithType.vb: List(Of T).BinarySearch(T)
  fullName.vb: System.Collections.Generic.List(Of T).BinarySearch(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0)
    name: BinarySearch
    nameWithType: List<T>.BinarySearch
    fullName: System.Collections.Generic.List<T>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0)
    name: BinarySearch
    nameWithType: List(Of T).BinarySearch
    fullName: System.Collections.Generic.List(Of T).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  isExternal: true
  name: BinarySearch(T, IComparer<T>)
  nameWithType: List<T>.BinarySearch(T, IComparer<T>)
  fullName: System.Collections.Generic.List<T>.BinarySearch(T, System.Collections.Generic.IComparer<T>)
  nameWithType.vb: List(Of T).BinarySearch(T, IComparer(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).BinarySearch(T, System.Collections.Generic.IComparer(Of T))
  name.vb: BinarySearch(T, IComparer(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List<T>.BinarySearch
    fullName: System.Collections.Generic.List<T>.BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
    name: BinarySearch
    nameWithType: List(Of T).BinarySearch
    fullName: System.Collections.Generic.List(Of T).BinarySearch
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Clear
  commentId: M:System.Collections.Generic.List`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: List<T>.Clear()
  fullName: System.Collections.Generic.List<T>.Clear()
  nameWithType.vb: List(Of T).Clear()
  fullName.vb: System.Collections.Generic.List(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Clear
    name: Clear
    nameWithType: List<T>.Clear
    fullName: System.Collections.Generic.List<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Clear
    name: Clear
    nameWithType: List(Of T).Clear
    fullName: System.Collections.Generic.List(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Contains(`0)
  commentId: M:System.Collections.Generic.List`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: List<T>.Contains(T)
  fullName: System.Collections.Generic.List<T>.Contains(T)
  nameWithType.vb: List(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.List(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Contains(`0)
    name: Contains
    nameWithType: List<T>.Contains
    fullName: System.Collections.Generic.List<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Contains(`0)
    name: Contains
    nameWithType: List(Of T).Contains
    fullName: System.Collections.Generic.List(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
  commentId: M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
  isExternal: true
  name: ConvertAll<TOutput>(Converter<T, TOutput>)
  nameWithType: List<T>.ConvertAll<TOutput>(Converter<T, TOutput>)
  fullName: System.Collections.Generic.List<T>.ConvertAll<TOutput>(System.Converter<T, TOutput>)
  nameWithType.vb: List(Of T).ConvertAll(Of TOutput)(Converter(Of T, TOutput))
  fullName.vb: System.Collections.Generic.List(Of T).ConvertAll(Of TOutput)(System.Converter(Of T, TOutput))
  name.vb: ConvertAll(Of TOutput)(Converter(Of T, TOutput))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
    name: ConvertAll<TOutput>
    nameWithType: List<T>.ConvertAll<TOutput>
    fullName: System.Collections.Generic.List<T>.ConvertAll<TOutput>
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})
    name: ConvertAll(Of TOutput)
    nameWithType: List(Of T).ConvertAll(Of TOutput)
    fullName: System.Collections.Generic.List(Of T).ConvertAll(Of TOutput)
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  isExternal: true
  name: CopyTo(Int32, T[], Int32, Int32)
  nameWithType: List<T>.CopyTo(Int32, T[], Int32, Int32)
  fullName: System.Collections.Generic.List<T>.CopyTo(System.Int32, T[], System.Int32, System.Int32)
  nameWithType.vb: List(Of T).CopyTo(Int32, T(), Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).CopyTo(System.Int32, T(), System.Int32, System.Int32)
  name.vb: CopyTo(Int32, T(), Int32, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
    name: CopyTo
    nameWithType: List<T>.CopyTo
    fullName: System.Collections.Generic.List<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
    name: CopyTo
    nameWithType: List(Of T).CopyTo
    fullName: System.Collections.Generic.List(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.CopyTo(`0[])
  commentId: M:System.Collections.Generic.List`1.CopyTo(`0[])
  isExternal: true
  name: CopyTo(T[])
  nameWithType: List<T>.CopyTo(T[])
  fullName: System.Collections.Generic.List<T>.CopyTo(T[])
  nameWithType.vb: List(Of T).CopyTo(T())
  fullName.vb: System.Collections.Generic.List(Of T).CopyTo(T())
  name.vb: CopyTo(T())
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[])
    name: CopyTo
    nameWithType: List<T>.CopyTo
    fullName: System.Collections.Generic.List<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[])
    name: CopyTo
    nameWithType: List(Of T).CopyTo
    fullName: System.Collections.Generic.List(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: List<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.List<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: List(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.List(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: List<T>.CopyTo
    fullName: System.Collections.Generic.List<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: List(Of T).CopyTo
    fullName: System.Collections.Generic.List(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  isExternal: true
  name: Exists(Predicate<T>)
  nameWithType: List<T>.Exists(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.Exists(System.Predicate<T>)
  nameWithType.vb: List(Of T).Exists(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Exists(System.Predicate(Of T))
  name.vb: Exists(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    name: Exists
    nameWithType: List<T>.Exists
    fullName: System.Collections.Generic.List<T>.Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    name: Exists
    nameWithType: List(Of T).Exists
    fullName: System.Collections.Generic.List(Of T).Exists
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.Find(System.Predicate{`0})
  isExternal: true
  name: Find(Predicate<T>)
  nameWithType: List<T>.Find(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.Find(System.Predicate<T>)
  nameWithType.vb: List(Of T).Find(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Find(System.Predicate(Of T))
  name.vb: Find(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    name: Find
    nameWithType: List<T>.Find
    fullName: System.Collections.Generic.List<T>.Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
    name: Find
    nameWithType: List(Of T).Find
    fullName: System.Collections.Generic.List(Of T).Find
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  isExternal: true
  name: FindAll(Predicate<T>)
  nameWithType: List<T>.FindAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindAll(System.Predicate<T>)
  nameWithType.vb: List(Of T).FindAll(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindAll(System.Predicate(Of T))
  name.vb: FindAll(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    name: FindAll
    nameWithType: List<T>.FindAll
    fullName: System.Collections.Generic.List<T>.FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
    name: FindAll
    nameWithType: List(Of T).FindAll
    fullName: System.Collections.Generic.List(Of T).FindAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  isExternal: true
  name: FindIndex(Int32, Int32, Predicate<T>)
  nameWithType: List<T>.FindIndex(Int32, Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(System.Int32, System.Int32, System.Predicate<T>)
  nameWithType.vb: List(Of T).FindIndex(Int32, Int32, Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindIndex(System.Int32, System.Int32, System.Predicate(Of T))
  name.vb: FindIndex(Int32, Int32, Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List<T>.FindIndex
    fullName: System.Collections.Generic.List<T>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of T).FindIndex
    fullName: System.Collections.Generic.List(Of T).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
  isExternal: true
  name: FindIndex(Int32, Predicate<T>)
  nameWithType: List<T>.FindIndex(Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(System.Int32, System.Predicate<T>)
  nameWithType.vb: List(Of T).FindIndex(Int32, Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindIndex(System.Int32, System.Predicate(Of T))
  name.vb: FindIndex(Int32, Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List<T>.FindIndex
    fullName: System.Collections.Generic.List<T>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of T).FindIndex
    fullName: System.Collections.Generic.List(Of T).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
  isExternal: true
  name: FindIndex(Predicate<T>)
  nameWithType: List<T>.FindIndex(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(System.Predicate<T>)
  nameWithType.vb: List(Of T).FindIndex(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindIndex(System.Predicate(Of T))
  name.vb: FindIndex(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
    name: FindIndex
    nameWithType: List<T>.FindIndex
    fullName: System.Collections.Generic.List<T>.FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
    name: FindIndex
    nameWithType: List(Of T).FindIndex
    fullName: System.Collections.Generic.List(Of T).FindIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  isExternal: true
  name: FindLast(Predicate<T>)
  nameWithType: List<T>.FindLast(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLast(System.Predicate<T>)
  nameWithType.vb: List(Of T).FindLast(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindLast(System.Predicate(Of T))
  name.vb: FindLast(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    name: FindLast
    nameWithType: List<T>.FindLast
    fullName: System.Collections.Generic.List<T>.FindLast
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
    name: FindLast
    nameWithType: List(Of T).FindLast
    fullName: System.Collections.Generic.List(Of T).FindLast
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  isExternal: true
  name: FindLastIndex(Int32, Int32, Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Int32, Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(System.Int32, System.Int32, System.Predicate<T>)
  nameWithType.vb: List(Of T).FindLastIndex(Int32, Int32, Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindLastIndex(System.Int32, System.Int32, System.Predicate(Of T))
  name.vb: FindLastIndex(Int32, Int32, Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<T>.FindLastIndex
    fullName: System.Collections.Generic.List<T>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of T).FindLastIndex
    fullName: System.Collections.Generic.List(Of T).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
  isExternal: true
  name: FindLastIndex(Int32, Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(System.Int32, System.Predicate<T>)
  nameWithType.vb: List(Of T).FindLastIndex(Int32, Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindLastIndex(System.Int32, System.Predicate(Of T))
  name.vb: FindLastIndex(Int32, Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<T>.FindLastIndex
    fullName: System.Collections.Generic.List<T>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of T).FindLastIndex
    fullName: System.Collections.Generic.List(Of T).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
  isExternal: true
  name: FindLastIndex(Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(System.Predicate<T>)
  nameWithType.vb: List(Of T).FindLastIndex(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).FindLastIndex(System.Predicate(Of T))
  name.vb: FindLastIndex(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List<T>.FindLastIndex
    fullName: System.Collections.Generic.List<T>.FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
    name: FindLastIndex
    nameWithType: List(Of T).FindLastIndex
    fullName: System.Collections.Generic.List(Of T).FindLastIndex
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
  commentId: M:System.Collections.Generic.List`1.ForEach(System.Action{`0})
  isExternal: true
  name: ForEach(Action<T>)
  nameWithType: List<T>.ForEach(Action<T>)
  fullName: System.Collections.Generic.List<T>.ForEach(System.Action<T>)
  nameWithType.vb: List(Of T).ForEach(Action(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).ForEach(System.Action(Of T))
  name.vb: ForEach(Action(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
    name: ForEach
    nameWithType: List<T>.ForEach
    fullName: System.Collections.Generic.List<T>.ForEach
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
    name: ForEach
    nameWithType: List(Of T).ForEach
    fullName: System.Collections.Generic.List(Of T).ForEach
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.GetEnumerator
  commentId: M:System.Collections.Generic.List`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: List<T>.GetEnumerator()
  fullName: System.Collections.Generic.List<T>.GetEnumerator()
  nameWithType.vb: List(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.GetEnumerator
    name: GetEnumerator
    nameWithType: List<T>.GetEnumerator
    fullName: System.Collections.Generic.List<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.GetEnumerator
    name: GetEnumerator
    nameWithType: List(Of T).GetEnumerator
    fullName: System.Collections.Generic.List(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  isExternal: true
  name: GetRange(Int32, Int32)
  nameWithType: List<T>.GetRange(Int32, Int32)
  fullName: System.Collections.Generic.List<T>.GetRange(System.Int32, System.Int32)
  nameWithType.vb: List(Of T).GetRange(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).GetRange(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
    name: GetRange
    nameWithType: List<T>.GetRange
    fullName: System.Collections.Generic.List<T>.GetRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
    name: GetRange
    nameWithType: List(Of T).GetRange
    fullName: System.Collections.Generic.List(Of T).GetRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.IndexOf(`0)
  commentId: M:System.Collections.Generic.List`1.IndexOf(`0)
  isExternal: true
  name: IndexOf(T)
  nameWithType: List<T>.IndexOf(T)
  fullName: System.Collections.Generic.List<T>.IndexOf(T)
  nameWithType.vb: List(Of T).IndexOf(T)
  fullName.vb: System.Collections.Generic.List(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0)
    name: IndexOf
    nameWithType: List<T>.IndexOf
    fullName: System.Collections.Generic.List<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0)
    name: IndexOf
    nameWithType: List(Of T).IndexOf
    fullName: System.Collections.Generic.List(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  commentId: M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  isExternal: true
  name: IndexOf(T, Int32)
  nameWithType: List<T>.IndexOf(T, Int32)
  fullName: System.Collections.Generic.List<T>.IndexOf(T, System.Int32)
  nameWithType.vb: List(Of T).IndexOf(T, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).IndexOf(T, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
    name: IndexOf
    nameWithType: List<T>.IndexOf
    fullName: System.Collections.Generic.List<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
    name: IndexOf
    nameWithType: List(Of T).IndexOf
    fullName: System.Collections.Generic.List(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  isExternal: true
  name: IndexOf(T, Int32, Int32)
  nameWithType: List<T>.IndexOf(T, Int32, Int32)
  fullName: System.Collections.Generic.List<T>.IndexOf(T, System.Int32, System.Int32)
  nameWithType.vb: List(Of T).IndexOf(T, Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).IndexOf(T, System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
    name: IndexOf
    nameWithType: List<T>.IndexOf
    fullName: System.Collections.Generic.List<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
    name: IndexOf
    nameWithType: List(Of T).IndexOf
    fullName: System.Collections.Generic.List(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
  commentId: M:System.Collections.Generic.List`1.Insert(System.Int32,`0)
  isExternal: true
  name: Insert(Int32, T)
  nameWithType: List<T>.Insert(Int32, T)
  fullName: System.Collections.Generic.List<T>.Insert(System.Int32, T)
  nameWithType.vb: List(Of T).Insert(Int32, T)
  fullName.vb: System.Collections.Generic.List(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: List<T>.Insert
    fullName: System.Collections.Generic.List<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: List(Of T).Insert
    fullName: System.Collections.Generic.List(Of T).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  isExternal: true
  name: InsertRange(Int32, IEnumerable<T>)
  nameWithType: List<T>.InsertRange(Int32, IEnumerable<T>)
  fullName: System.Collections.Generic.List<T>.InsertRange(System.Int32, System.Collections.Generic.IEnumerable<T>)
  nameWithType.vb: List(Of T).InsertRange(Int32, IEnumerable(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).InsertRange(System.Int32, System.Collections.Generic.IEnumerable(Of T))
  name.vb: InsertRange(Int32, IEnumerable(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    name: InsertRange
    nameWithType: List<T>.InsertRange
    fullName: System.Collections.Generic.List<T>.InsertRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
    name: InsertRange
    nameWithType: List(Of T).InsertRange
    fullName: System.Collections.Generic.List(Of T).InsertRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.LastIndexOf(`0)
  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0)
  isExternal: true
  name: LastIndexOf(T)
  nameWithType: List<T>.LastIndexOf(T)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T)
  nameWithType.vb: List(Of T).LastIndexOf(T)
  fullName.vb: System.Collections.Generic.List(Of T).LastIndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0)
    name: LastIndexOf
    nameWithType: List<T>.LastIndexOf
    fullName: System.Collections.Generic.List<T>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0)
    name: LastIndexOf
    nameWithType: List(Of T).LastIndexOf
    fullName: System.Collections.Generic.List(Of T).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  isExternal: true
  name: LastIndexOf(T, Int32)
  nameWithType: List<T>.LastIndexOf(T, Int32)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T, System.Int32)
  nameWithType.vb: List(Of T).LastIndexOf(T, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).LastIndexOf(T, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
    name: LastIndexOf
    nameWithType: List<T>.LastIndexOf
    fullName: System.Collections.Generic.List<T>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
    name: LastIndexOf
    nameWithType: List(Of T).LastIndexOf
    fullName: System.Collections.Generic.List(Of T).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  isExternal: true
  name: LastIndexOf(T, Int32, Int32)
  nameWithType: List<T>.LastIndexOf(T, Int32, Int32)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T, System.Int32, System.Int32)
  nameWithType.vb: List(Of T).LastIndexOf(T, Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).LastIndexOf(T, System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
    name: LastIndexOf
    nameWithType: List<T>.LastIndexOf
    fullName: System.Collections.Generic.List<T>.LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
    name: LastIndexOf
    nameWithType: List(Of T).LastIndexOf
    fullName: System.Collections.Generic.List(Of T).LastIndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Remove(`0)
  commentId: M:System.Collections.Generic.List`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: List<T>.Remove(T)
  fullName: System.Collections.Generic.List<T>.Remove(T)
  nameWithType.vb: List(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.List(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Remove(`0)
    name: Remove
    nameWithType: List<T>.Remove
    fullName: System.Collections.Generic.List<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Remove(`0)
    name: Remove
    nameWithType: List(Of T).Remove
    fullName: System.Collections.Generic.List(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
  isExternal: true
  name: RemoveAll(Predicate<T>)
  nameWithType: List<T>.RemoveAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.RemoveAll(System.Predicate<T>)
  nameWithType.vb: List(Of T).RemoveAll(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).RemoveAll(System.Predicate(Of T))
  name.vb: RemoveAll(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
    name: RemoveAll
    nameWithType: List<T>.RemoveAll
    fullName: System.Collections.Generic.List<T>.RemoveAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
    name: RemoveAll
    nameWithType: List(Of T).RemoveAll
    fullName: System.Collections.Generic.List(Of T).RemoveAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.List`1.RemoveAt(System.Int32)
  isExternal: true
  name: RemoveAt(Int32)
  nameWithType: List<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.List<T>.RemoveAt(System.Int32)
  nameWithType.vb: List(Of T).RemoveAt(Int32)
  fullName.vb: System.Collections.Generic.List(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: List<T>.RemoveAt
    fullName: System.Collections.Generic.List<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: List(Of T).RemoveAt
    fullName: System.Collections.Generic.List(Of T).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  isExternal: true
  name: RemoveRange(Int32, Int32)
  nameWithType: List<T>.RemoveRange(Int32, Int32)
  fullName: System.Collections.Generic.List<T>.RemoveRange(System.Int32, System.Int32)
  nameWithType.vb: List(Of T).RemoveRange(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).RemoveRange(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    name: RemoveRange
    nameWithType: List<T>.RemoveRange
    fullName: System.Collections.Generic.List<T>.RemoveRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
    name: RemoveRange
    nameWithType: List(Of T).RemoveRange
    fullName: System.Collections.Generic.List(Of T).RemoveRange
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Reverse
  commentId: M:System.Collections.Generic.List`1.Reverse
  isExternal: true
  name: Reverse()
  nameWithType: List<T>.Reverse()
  fullName: System.Collections.Generic.List<T>.Reverse()
  nameWithType.vb: List(Of T).Reverse()
  fullName.vb: System.Collections.Generic.List(Of T).Reverse()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Reverse
    name: Reverse
    nameWithType: List<T>.Reverse
    fullName: System.Collections.Generic.List<T>.Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Reverse
    name: Reverse
    nameWithType: List(Of T).Reverse
    fullName: System.Collections.Generic.List(Of T).Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  isExternal: true
  name: Reverse(Int32, Int32)
  nameWithType: List<T>.Reverse(Int32, Int32)
  fullName: System.Collections.Generic.List<T>.Reverse(System.Int32, System.Int32)
  nameWithType.vb: List(Of T).Reverse(Int32, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).Reverse(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
    name: Reverse
    nameWithType: List<T>.Reverse
    fullName: System.Collections.Generic.List<T>.Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
    name: Reverse
    nameWithType: List(Of T).Reverse
    fullName: System.Collections.Generic.List(Of T).Reverse
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Sort
  commentId: M:System.Collections.Generic.List`1.Sort
  isExternal: true
  name: Sort()
  nameWithType: List<T>.Sort()
  fullName: System.Collections.Generic.List<T>.Sort()
  nameWithType.vb: List(Of T).Sort()
  fullName.vb: System.Collections.Generic.List(Of T).Sort()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort
    name: Sort
    nameWithType: List<T>.Sort
    fullName: System.Collections.Generic.List<T>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort
    name: Sort
    nameWithType: List(Of T).Sort
    fullName: System.Collections.Generic.List(Of T).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
  isExternal: true
  name: Sort(IComparer<T>)
  nameWithType: List<T>.Sort(IComparer<T>)
  fullName: System.Collections.Generic.List<T>.Sort(System.Collections.Generic.IComparer<T>)
  nameWithType.vb: List(Of T).Sort(IComparer(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Sort(System.Collections.Generic.IComparer(Of T))
  name.vb: Sort(IComparer(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List<T>.Sort
    fullName: System.Collections.Generic.List<T>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List(Of T).Sort
    fullName: System.Collections.Generic.List(Of T).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
  commentId: M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})
  isExternal: true
  name: Sort(Comparison<T>)
  nameWithType: List<T>.Sort(Comparison<T>)
  fullName: System.Collections.Generic.List<T>.Sort(System.Comparison<T>)
  nameWithType.vb: List(Of T).Sort(Comparison(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Sort(System.Comparison(Of T))
  name.vb: Sort(Comparison(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
    name: Sort
    nameWithType: List<T>.Sort
    fullName: System.Collections.Generic.List<T>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
    name: Sort
    nameWithType: List(Of T).Sort
    fullName: System.Collections.Generic.List(Of T).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  isExternal: true
  name: Sort(Int32, Int32, IComparer<T>)
  nameWithType: List<T>.Sort(Int32, Int32, IComparer<T>)
  fullName: System.Collections.Generic.List<T>.Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer<T>)
  nameWithType.vb: List(Of T).Sort(Int32, Int32, IComparer(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer(Of T))
  name.vb: Sort(Int32, Int32, IComparer(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List<T>.Sort
    fullName: System.Collections.Generic.List<T>.Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
    name: Sort
    nameWithType: List(Of T).Sort
    fullName: System.Collections.Generic.List(Of T).Sort
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  commentId: M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  isExternal: true
  name: IEnumerable<T>.GetEnumerator()
  nameWithType: List<T>.IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.List<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: List(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    name: IEnumerable<T>.GetEnumerator
    nameWithType: List<T>.IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.List<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
    name: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    nameWithType: List(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.List(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isExternal: true
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: List<T>.ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  nameWithType.vb: List(Of T).System.Collections.ICollection.CopyTo(Array, Int32)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: ICollection.CopyTo
    nameWithType: List<T>.ICollection.CopyTo
    fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
    name: System.Collections.ICollection.CopyTo
    nameWithType: List(Of T).System.Collections.ICollection.CopyTo
    fullName: System.Collections.Generic.List(Of T).System.Collections.ICollection.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
  isExternal: true
  name: IEnumerable.GetEnumerator()
  nameWithType: List<T>.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.List<T>.System.Collections.IEnumerable.GetEnumerator()
  nameWithType.vb: List(Of T).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    nameWithType: List<T>.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.List<T>.System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    nameWithType: List(Of T).System.Collections.IEnumerable.GetEnumerator
    fullName: System.Collections.Generic.List(Of T).System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
  isExternal: true
  name: IList.Add(Object)
  nameWithType: List<T>.IList.Add(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Add(System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.Add(Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Add(System.Object)
  name.vb: System.Collections.IList.Add(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
    name: IList.Add
    nameWithType: List<T>.IList.Add
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
    name: System.Collections.IList.Add
    nameWithType: List(Of T).System.Collections.IList.Add
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
  isExternal: true
  name: IList.Contains(Object)
  nameWithType: List<T>.IList.Contains(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Contains(System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.Contains(Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Contains(System.Object)
  name.vb: System.Collections.IList.Contains(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
    name: IList.Contains
    nameWithType: List<T>.IList.Contains
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
    name: System.Collections.IList.Contains
    nameWithType: List(Of T).System.Collections.IList.Contains
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
  isExternal: true
  name: IList.IndexOf(Object)
  nameWithType: List<T>.IList.IndexOf(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.IndexOf(System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.IndexOf(Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.IndexOf(System.Object)
  name.vb: System.Collections.IList.IndexOf(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
    name: IList.IndexOf
    nameWithType: List<T>.IList.IndexOf
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
    name: System.Collections.IList.IndexOf
    nameWithType: List(Of T).System.Collections.IList.IndexOf
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
  isExternal: true
  name: IList.Insert(Int32, Object)
  nameWithType: List<T>.IList.Insert(Int32, Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Insert(System.Int32, System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.Insert(Int32, Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Insert(System.Int32, System.Object)
  name.vb: System.Collections.IList.Insert(Int32, Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: IList.Insert
    nameWithType: List<T>.IList.Insert
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
    name: System.Collections.IList.Insert
    nameWithType: List(Of T).System.Collections.IList.Insert
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
  commentId: M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
  isExternal: true
  name: IList.Remove(Object)
  nameWithType: List<T>.IList.Remove(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Remove(System.Object)
  nameWithType.vb: List(Of T).System.Collections.IList.Remove(Object)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Remove(System.Object)
  name.vb: System.Collections.IList.Remove(Object)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
    name: IList.Remove
    nameWithType: List<T>.IList.Remove
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
    name: System.Collections.IList.Remove
    nameWithType: List(Of T).System.Collections.IList.Remove
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.ToArray
  commentId: M:System.Collections.Generic.List`1.ToArray
  isExternal: true
  name: ToArray()
  nameWithType: List<T>.ToArray()
  fullName: System.Collections.Generic.List<T>.ToArray()
  nameWithType.vb: List(Of T).ToArray()
  fullName.vb: System.Collections.Generic.List(Of T).ToArray()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.ToArray
    name: ToArray
    nameWithType: List<T>.ToArray
    fullName: System.Collections.Generic.List<T>.ToArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.ToArray
    name: ToArray
    nameWithType: List(Of T).ToArray
    fullName: System.Collections.Generic.List(Of T).ToArray
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.TrimExcess
  commentId: M:System.Collections.Generic.List`1.TrimExcess
  isExternal: true
  name: TrimExcess()
  nameWithType: List<T>.TrimExcess()
  fullName: System.Collections.Generic.List<T>.TrimExcess()
  nameWithType.vb: List(Of T).TrimExcess()
  fullName.vb: System.Collections.Generic.List(Of T).TrimExcess()
  spec.csharp:
  - uid: System.Collections.Generic.List`1.TrimExcess
    name: TrimExcess
    nameWithType: List<T>.TrimExcess
    fullName: System.Collections.Generic.List<T>.TrimExcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.TrimExcess
    name: TrimExcess
    nameWithType: List(Of T).TrimExcess
    fullName: System.Collections.Generic.List(Of T).TrimExcess
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  isExternal: true
  name: TrueForAll(Predicate<T>)
  nameWithType: List<T>.TrueForAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.TrueForAll(System.Predicate<T>)
  nameWithType.vb: List(Of T).TrueForAll(Predicate(Of T))
  fullName.vb: System.Collections.Generic.List(Of T).TrueForAll(System.Predicate(Of T))
  name.vb: TrueForAll(Predicate(Of T))
  spec.csharp:
  - uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    name: TrueForAll
    nameWithType: List<T>.TrueForAll
    fullName: System.Collections.Generic.List<T>.TrueForAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    name: TrueForAll
    nameWithType: List(Of T).TrueForAll
    fullName: System.Collections.Generic.List(Of T).TrueForAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.Capacity
  commentId: P:System.Collections.Generic.List`1.Capacity
  isExternal: true
  name: Capacity
  nameWithType: List<T>.Capacity
  fullName: System.Collections.Generic.List<T>.Capacity
  nameWithType.vb: List(Of T).Capacity
  fullName.vb: System.Collections.Generic.List(Of T).Capacity
- uid: System.Collections.Generic.List`1.Count
  commentId: P:System.Collections.Generic.List`1.Count
  isExternal: true
  name: Count
  nameWithType: List<T>.Count
  fullName: System.Collections.Generic.List<T>.Count
  nameWithType.vb: List(Of T).Count
  fullName.vb: System.Collections.Generic.List(Of T).Count
- uid: System.Collections.Generic.List`1.Item(System.Int32)
  commentId: P:System.Collections.Generic.List`1.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: List<T>.Item[Int32]
  fullName: System.Collections.Generic.List<T>.Item[System.Int32]
  nameWithType.vb: List(Of T).Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Item(System.Int32)
    name: Item
    nameWithType: List<T>.Item
    fullName: System.Collections.Generic.List<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.List`1.Item(System.Int32)
    name: Item
    nameWithType: List(Of T).Item
    fullName: System.Collections.Generic.List(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  commentId: P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  isExternal: true
  name: ICollection<T>.IsReadOnly
  nameWithType: List<T>.ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.List<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: List(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized
  isExternal: true
  name: ICollection.IsSynchronized
  nameWithType: List<T>.ICollection.IsSynchronized
  fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.IsSynchronized
  nameWithType.vb: List(Of T).System.Collections.ICollection.IsSynchronized
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot
  commentId: P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot
  isExternal: true
  name: ICollection.SyncRoot
  nameWithType: List<T>.ICollection.SyncRoot
  fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.SyncRoot
  nameWithType.vb: List(Of T).System.Collections.ICollection.SyncRoot
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize
  commentId: P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize
  isExternal: true
  name: IList.IsFixedSize
  nameWithType: List<T>.IList.IsFixedSize
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.IsFixedSize
  nameWithType.vb: List(Of T).System.Collections.IList.IsFixedSize
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.IsFixedSize
  name.vb: System.Collections.IList.IsFixedSize
- uid: System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly
  commentId: P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly
  isExternal: true
  name: IList.IsReadOnly
  nameWithType: List<T>.IList.IsReadOnly
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.IsReadOnly
  nameWithType.vb: List(Of T).System.Collections.IList.IsReadOnly
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.IsReadOnly
  name.vb: System.Collections.IList.IsReadOnly
- uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
  commentId: P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
  isExternal: true
  name: IList.Item[Int32]
  nameWithType: List<T>.IList.Item[Int32]
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Item[System.Int32]
  nameWithType.vb: List(Of T).System.Collections.IList.Item(Int32)
  fullName.vb: System.Collections.Generic.List(Of T).System.Collections.IList.Item(System.Int32)
  name.vb: System.Collections.IList.Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
    name: IList.Item
    nameWithType: List<T>.IList.Item
    fullName: System.Collections.Generic.List<T>.System.Collections.IList.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
    name: System.Collections.IList.Item
    nameWithType: List(Of T).System.Collections.IList.Item
    fullName: System.Collections.Generic.List(Of T).System.Collections.IList.Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SMACD.AppTree.Evidence.EvidenceCollection.Item*
  commentId: Overload:SMACD.AppTree.Evidence.EvidenceCollection.Item
  name: Item
  nameWithType: EvidenceCollection.Item
  fullName: SMACD.AppTree.Evidence.EvidenceCollection.Item
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SMACD.AppTree.Evidence.Evidence
  commentId: T:SMACD.AppTree.Evidence.Evidence
  parent: SMACD.AppTree.Evidence
  name: Evidence
  nameWithType: Evidence
  fullName: SMACD.AppTree.Evidence.Evidence
- uid: System.EventHandler{SMACD.AppTree.Evidence.Evidence}
  commentId: T:System.EventHandler{SMACD.AppTree.Evidence.Evidence}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<Evidence>
  nameWithType: EventHandler<Evidence>
  fullName: System.EventHandler<SMACD.AppTree.Evidence.Evidence>
  nameWithType.vb: EventHandler(Of Evidence)
  fullName.vb: System.EventHandler(Of SMACD.AppTree.Evidence.Evidence)
  name.vb: EventHandler(Of Evidence)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SMACD.AppTree.Evidence.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: SMACD.AppTree.Evidence.Evidence
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: SMACD.AppTree.Evidence.EvidenceCollection.CreateOrLoadNativePath*
  commentId: Overload:SMACD.AppTree.Evidence.EvidenceCollection.CreateOrLoadNativePath
  name: CreateOrLoadNativePath
  nameWithType: EvidenceCollection.CreateOrLoadNativePath
  fullName: SMACD.AppTree.Evidence.EvidenceCollection.CreateOrLoadNativePath
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: SMACD.AppTree.Evidence.NativeDirectoryEvidence
  commentId: T:SMACD.AppTree.Evidence.NativeDirectoryEvidence
  parent: SMACD.AppTree.Evidence
  name: NativeDirectoryEvidence
  nameWithType: NativeDirectoryEvidence
  fullName: SMACD.AppTree.Evidence.NativeDirectoryEvidence
- uid: SMACD.AppTree.Evidence.EvidenceCollection.Save*
  commentId: Overload:SMACD.AppTree.Evidence.EvidenceCollection.Save
  name: Save
  nameWithType: EvidenceCollection.Save
  fullName: SMACD.AppTree.Evidence.EvidenceCollection.Save
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: SMACD.AppTree.Evidence.ObjectEvidence
  commentId: T:SMACD.AppTree.Evidence.ObjectEvidence
  parent: SMACD.AppTree.Evidence
  name: ObjectEvidence
  nameWithType: ObjectEvidence
  fullName: SMACD.AppTree.Evidence.ObjectEvidence
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
