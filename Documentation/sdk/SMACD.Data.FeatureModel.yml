### YamlMime:ManagedReference
items:
- uid: SMACD.Data.FeatureModel
  commentId: T:SMACD.Data.FeatureModel
  id: FeatureModel
  parent: SMACD.Data
  children:
  - SMACD.Data.FeatureModel.BusinessRisk
  - SMACD.Data.FeatureModel.Description
  - SMACD.Data.FeatureModel.Name
  - SMACD.Data.FeatureModel.Owners
  - SMACD.Data.FeatureModel.TechnicalRisk
  - SMACD.Data.FeatureModel.UseCases
  langs:
  - csharp
  - vb
  name: FeatureModel
  nameWithType: FeatureModel
  fullName: SMACD.Data.FeatureModel
  type: Class
  source:
    remote:
      path: SMACD.Data/FeatureModel.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: FeatureModel
    path: ../SMACD.Data/FeatureModel.cs
    startLine: 7
  assemblies:
  - SMACD.Data
  namespace: SMACD.Data
  summary: "\nRepresents a Feature: A group of Use Cases that, together, accomplish a larger functional task\n"
  example: []
  syntax:
    content: 'public class FeatureModel : IBusinessEntityModel, IModel'
    content.vb: >-
      Public Class FeatureModel

          Implements IBusinessEntityModel, IModel
  inheritance:
  - System.Object
  implements:
  - SMACD.Data.IBusinessEntityModel
  - SMACD.Data.IModel
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SMACD.Data.FeatureModel.UseCases
  commentId: P:SMACD.Data.FeatureModel.UseCases
  id: UseCases
  parent: SMACD.Data.FeatureModel
  langs:
  - csharp
  - vb
  name: UseCases
  nameWithType: FeatureModel.UseCases
  fullName: SMACD.Data.FeatureModel.UseCases
  type: Property
  source:
    remote:
      path: SMACD.Data/FeatureModel.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: UseCases
    path: ../SMACD.Data/FeatureModel.cs
    startLine: 12
  assemblies:
  - SMACD.Data
  namespace: SMACD.Data
  summary: "\nUse Cases that make up the Feature\n"
  example: []
  syntax:
    content: public IList<UseCaseModel> UseCases { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{SMACD.Data.UseCaseModel}
    content.vb: Public Property UseCases As IList(Of UseCaseModel)
  overload: SMACD.Data.FeatureModel.UseCases*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SMACD.Data.FeatureModel.Name
  commentId: P:SMACD.Data.FeatureModel.Name
  id: Name
  parent: SMACD.Data.FeatureModel
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: FeatureModel.Name
  fullName: SMACD.Data.FeatureModel.Name
  type: Property
  source:
    remote:
      path: SMACD.Data/FeatureModel.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: Name
    path: ../SMACD.Data/FeatureModel.cs
    startLine: 17
  assemblies:
  - SMACD.Data
  namespace: SMACD.Data
  summary: "\nName of the Feature\n"
  example: []
  syntax:
    content: public string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Name As String
  overload: SMACD.Data.FeatureModel.Name*
  implements:
  - SMACD.Data.IBusinessEntityModel.Name
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SMACD.Data.FeatureModel.Description
  commentId: P:SMACD.Data.FeatureModel.Description
  id: Description
  parent: SMACD.Data.FeatureModel
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: FeatureModel.Description
  fullName: SMACD.Data.FeatureModel.Description
  type: Property
  source:
    remote:
      path: SMACD.Data/FeatureModel.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: Description
    path: ../SMACD.Data/FeatureModel.cs
    startLine: 22
  assemblies:
  - SMACD.Data
  namespace: SMACD.Data
  summary: "\nDescription of what the Feature does\n"
  example: []
  syntax:
    content: public string Description { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Description As String
  overload: SMACD.Data.FeatureModel.Description*
  implements:
  - SMACD.Data.IBusinessEntityModel.Description
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SMACD.Data.FeatureModel.Owners
  commentId: P:SMACD.Data.FeatureModel.Owners
  id: Owners
  parent: SMACD.Data.FeatureModel
  langs:
  - csharp
  - vb
  name: Owners
  nameWithType: FeatureModel.Owners
  fullName: SMACD.Data.FeatureModel.Owners
  type: Property
  source:
    remote:
      path: SMACD.Data/FeatureModel.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: Owners
    path: ../SMACD.Data/FeatureModel.cs
    startLine: 27
  assemblies:
  - SMACD.Data
  namespace: SMACD.Data
  summary: "\nBusiness owners for the Feature\n"
  example: []
  syntax:
    content: public IList<OwnerPointerModel> Owners { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{SMACD.Data.OwnerPointerModel}
    content.vb: Public Property Owners As IList(Of OwnerPointerModel)
  overload: SMACD.Data.FeatureModel.Owners*
  implements:
  - SMACD.Data.IBusinessEntityModel.Owners
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SMACD.Data.FeatureModel.BusinessRisk
  commentId: P:SMACD.Data.FeatureModel.BusinessRisk
  id: BusinessRisk
  parent: SMACD.Data.FeatureModel
  langs:
  - csharp
  - vb
  name: BusinessRisk
  nameWithType: FeatureModel.BusinessRisk
  fullName: SMACD.Data.FeatureModel.BusinessRisk
  type: Property
  source:
    remote:
      path: SMACD.Data/FeatureModel.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: BusinessRisk
    path: ../SMACD.Data/FeatureModel.cs
    startLine: 33
  assemblies:
  - SMACD.Data
  namespace: SMACD.Data
  summary: "\nRelative level of risk for this Feature in comparison to other Features\nA high business risk may indicate that the Feature could access sensitive data\n"
  example: []
  syntax:
    content: public int? BusinessRisk { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Int32}
    content.vb: Public Property BusinessRisk As Integer?
  overload: SMACD.Data.FeatureModel.BusinessRisk*
  implements:
  - SMACD.Data.IBusinessEntityModel.BusinessRisk
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SMACD.Data.FeatureModel.TechnicalRisk
  commentId: P:SMACD.Data.FeatureModel.TechnicalRisk
  id: TechnicalRisk
  parent: SMACD.Data.FeatureModel
  langs:
  - csharp
  - vb
  name: TechnicalRisk
  nameWithType: FeatureModel.TechnicalRisk
  fullName: SMACD.Data.FeatureModel.TechnicalRisk
  type: Property
  source:
    remote:
      path: SMACD.Data/FeatureModel.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: TechnicalRisk
    path: ../SMACD.Data/FeatureModel.cs
    startLine: 40
  assemblies:
  - SMACD.Data
  namespace: SMACD.Data
  summary: "\nRelative level of technical risk for this Feature in comparison to other Features\nA high technical risk may indicate that there is a low degree of complexity to technically attack the targets\nassociated with this Feature\n"
  example: []
  syntax:
    content: public int? TechnicalRisk { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Int32}
    content.vb: Public Property TechnicalRisk As Integer?
  overload: SMACD.Data.FeatureModel.TechnicalRisk*
  implements:
  - SMACD.Data.IBusinessEntityModel.TechnicalRisk
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: SMACD.Data
  commentId: N:SMACD.Data
  name: SMACD.Data
  nameWithType: SMACD.Data
  fullName: SMACD.Data
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SMACD.Data.IBusinessEntityModel
  commentId: T:SMACD.Data.IBusinessEntityModel
  parent: SMACD.Data
  name: IBusinessEntityModel
  nameWithType: IBusinessEntityModel
  fullName: SMACD.Data.IBusinessEntityModel
- uid: SMACD.Data.IModel
  commentId: T:SMACD.Data.IModel
  parent: SMACD.Data
  name: IModel
  nameWithType: IModel
  fullName: SMACD.Data.IModel
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SMACD.Data.FeatureModel.UseCases*
  commentId: Overload:SMACD.Data.FeatureModel.UseCases
  name: UseCases
  nameWithType: FeatureModel.UseCases
  fullName: SMACD.Data.FeatureModel.UseCases
- uid: System.Collections.Generic.IList{SMACD.Data.UseCaseModel}
  commentId: T:System.Collections.Generic.IList{SMACD.Data.UseCaseModel}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<UseCaseModel>
  nameWithType: IList<UseCaseModel>
  fullName: System.Collections.Generic.IList<SMACD.Data.UseCaseModel>
  nameWithType.vb: IList(Of UseCaseModel)
  fullName.vb: System.Collections.Generic.IList(Of SMACD.Data.UseCaseModel)
  name.vb: IList(Of UseCaseModel)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SMACD.Data.UseCaseModel
    name: UseCaseModel
    nameWithType: UseCaseModel
    fullName: SMACD.Data.UseCaseModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SMACD.Data.UseCaseModel
    name: UseCaseModel
    nameWithType: UseCaseModel
    fullName: SMACD.Data.UseCaseModel
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: SMACD.Data.FeatureModel.Name*
  commentId: Overload:SMACD.Data.FeatureModel.Name
  name: Name
  nameWithType: FeatureModel.Name
  fullName: SMACD.Data.FeatureModel.Name
- uid: SMACD.Data.IBusinessEntityModel.Name
  commentId: P:SMACD.Data.IBusinessEntityModel.Name
  parent: SMACD.Data.IBusinessEntityModel
  name: Name
  nameWithType: IBusinessEntityModel.Name
  fullName: SMACD.Data.IBusinessEntityModel.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SMACD.Data.FeatureModel.Description*
  commentId: Overload:SMACD.Data.FeatureModel.Description
  name: Description
  nameWithType: FeatureModel.Description
  fullName: SMACD.Data.FeatureModel.Description
- uid: SMACD.Data.IBusinessEntityModel.Description
  commentId: P:SMACD.Data.IBusinessEntityModel.Description
  parent: SMACD.Data.IBusinessEntityModel
  name: Description
  nameWithType: IBusinessEntityModel.Description
  fullName: SMACD.Data.IBusinessEntityModel.Description
- uid: SMACD.Data.FeatureModel.Owners*
  commentId: Overload:SMACD.Data.FeatureModel.Owners
  name: Owners
  nameWithType: FeatureModel.Owners
  fullName: SMACD.Data.FeatureModel.Owners
- uid: SMACD.Data.IBusinessEntityModel.Owners
  commentId: P:SMACD.Data.IBusinessEntityModel.Owners
  parent: SMACD.Data.IBusinessEntityModel
  name: Owners
  nameWithType: IBusinessEntityModel.Owners
  fullName: SMACD.Data.IBusinessEntityModel.Owners
- uid: System.Collections.Generic.IList{SMACD.Data.OwnerPointerModel}
  commentId: T:System.Collections.Generic.IList{SMACD.Data.OwnerPointerModel}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<OwnerPointerModel>
  nameWithType: IList<OwnerPointerModel>
  fullName: System.Collections.Generic.IList<SMACD.Data.OwnerPointerModel>
  nameWithType.vb: IList(Of OwnerPointerModel)
  fullName.vb: System.Collections.Generic.IList(Of SMACD.Data.OwnerPointerModel)
  name.vb: IList(Of OwnerPointerModel)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SMACD.Data.OwnerPointerModel
    name: OwnerPointerModel
    nameWithType: OwnerPointerModel
    fullName: SMACD.Data.OwnerPointerModel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SMACD.Data.OwnerPointerModel
    name: OwnerPointerModel
    nameWithType: OwnerPointerModel
    fullName: SMACD.Data.OwnerPointerModel
  - name: )
    nameWithType: )
    fullName: )
- uid: SMACD.Data.FeatureModel.BusinessRisk*
  commentId: Overload:SMACD.Data.FeatureModel.BusinessRisk
  name: BusinessRisk
  nameWithType: FeatureModel.BusinessRisk
  fullName: SMACD.Data.FeatureModel.BusinessRisk
- uid: SMACD.Data.IBusinessEntityModel.BusinessRisk
  commentId: P:SMACD.Data.IBusinessEntityModel.BusinessRisk
  parent: SMACD.Data.IBusinessEntityModel
  name: BusinessRisk
  nameWithType: IBusinessEntityModel.BusinessRisk
  fullName: SMACD.Data.IBusinessEntityModel.BusinessRisk
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SMACD.Data.FeatureModel.TechnicalRisk*
  commentId: Overload:SMACD.Data.FeatureModel.TechnicalRisk
  name: TechnicalRisk
  nameWithType: FeatureModel.TechnicalRisk
  fullName: SMACD.Data.FeatureModel.TechnicalRisk
- uid: SMACD.Data.IBusinessEntityModel.TechnicalRisk
  commentId: P:SMACD.Data.IBusinessEntityModel.TechnicalRisk
  parent: SMACD.Data.IBusinessEntityModel
  name: TechnicalRisk
  nameWithType: IBusinessEntityModel.TechnicalRisk
  fullName: SMACD.Data.IBusinessEntityModel.TechnicalRisk
