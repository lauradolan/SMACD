### YamlMime:ManagedReference
items:
- uid: Synthesys.SDK.Extensions.ReactionExtension
  commentId: T:Synthesys.SDK.Extensions.ReactionExtension
  id: ReactionExtension
  parent: Synthesys.SDK.Extensions
  children:
  - Synthesys.SDK.Extensions.ReactionExtension.React(Synthesys.SDK.Triggers.TriggerDescriptor)
  - Synthesys.SDK.Extensions.ReactionExtension.Triggers
  langs:
  - csharp
  - vb
  name: ReactionExtension
  nameWithType: ReactionExtension
  fullName: Synthesys.SDK.Extensions.ReactionExtension
  type: Class
  source:
    remote:
      path: Synthesys.SDK/Extensions/ReactionExtension.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: ReactionExtension
    path: ../Synthesys.SDK/Extensions/ReactionExtension.cs
    startLine: 40
  assemblies:
  - Synthesys.SDK
  namespace: Synthesys.SDK.Extensions
  summary: "\nA ReactionExtension is added to the end of the Task Queue when some given event occurs during the scan process. The\nconcept behind ReactionExtensions is to enrich the Artifact Tree and, in doing so, trigger other\nReactionExtensions.\nReactionExtensions can be triggered by:\n<ul><li>ActionExtension completes or fails</li><li>Artifact Tree element has a child added to it</li><li>Artifact Tree element changes</li><li>Artifact Tree element is created</li><li>Task is started by the Task Queue</li><li>Task is completed</li><li>Task is added to the Task Queue</li><li>Task Queue is completely drained</li></ul>\n"
  example: []
  syntax:
    content: 'public abstract class ReactionExtension : Extension'
    content.vb: >-
      Public MustInherit Class ReactionExtension

          Inherits Extension
  inheritance:
  - System.Object
  - Synthesys.SDK.Extensions.Extension
  derivedClasses:
  - Synthesys.Plugins.AzureDevOps.AzureDevOpsService
  - Synthesys.Plugins.Dummy.DummyReaction
  - Synthesys.Plugins.HTMLExplorer.HtmlExplorerReaction
  - Synthesys.Plugins.SQLMap.SqlMapReaction
  inheritedMembers:
  - Synthesys.SDK.Extensions.Extension.Logger
  - Synthesys.SDK.Extensions.Extension.Initialize
  - Synthesys.SDK.Extensions.Extension.ValidateEnvironmentReadiness
  - Synthesys.SDK.Extensions.Extension.SetLoggerName(System.String)
  - Synthesys.SDK.Extensions.Extension.Metadata
  - Synthesys.SDK.Extensions.Extension.ConfigurableProperties
  - Synthesys.SDK.Extensions.Extension.ConfigurablePropertyValues
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - Synthesys.SDK.Extensions.Extension.Synthesys.Tasks.ExtensionConfigurator.Configure(SMACD.AppTree.AppTreeNode,System.Collections.Generic.Dictionary{System.String,System.String})
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Synthesys.SDK.Extensions.ReactionExtension.React(Synthesys.SDK.Triggers.TriggerDescriptor)
  commentId: M:Synthesys.SDK.Extensions.ReactionExtension.React(Synthesys.SDK.Triggers.TriggerDescriptor)
  id: React(Synthesys.SDK.Triggers.TriggerDescriptor)
  parent: Synthesys.SDK.Extensions.ReactionExtension
  langs:
  - csharp
  - vb
  name: React(TriggerDescriptor)
  nameWithType: ReactionExtension.React(TriggerDescriptor)
  fullName: Synthesys.SDK.Extensions.ReactionExtension.React(Synthesys.SDK.Triggers.TriggerDescriptor)
  type: Method
  source:
    remote:
      path: Synthesys.SDK/Extensions/ReactionExtension.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: React
    path: ../Synthesys.SDK/Extensions/ReactionExtension.cs
    startLine: 47
  assemblies:
  - Synthesys.SDK
  namespace: Synthesys.SDK.Extensions
  summary: "\nThis method is called when the ReactionExtension is popped from the Task Queue and executed\n"
  example: []
  syntax:
    content: public abstract ExtensionReport React(TriggerDescriptor trigger)
    parameters:
    - id: trigger
      type: Synthesys.SDK.Triggers.TriggerDescriptor
      description: Trigger causing the ReactionExtension to fire
    return:
      type: Synthesys.SDK.ExtensionReport
      description: ''
    content.vb: Public MustOverride Function React(trigger As TriggerDescriptor) As ExtensionReport
  overload: Synthesys.SDK.Extensions.ReactionExtension.React*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: Synthesys.SDK.Extensions.ReactionExtension.Triggers
  commentId: P:Synthesys.SDK.Extensions.ReactionExtension.Triggers
  id: Triggers
  parent: Synthesys.SDK.Extensions.ReactionExtension
  langs:
  - csharp
  - vb
  name: Triggers
  nameWithType: ReactionExtension.Triggers
  fullName: Synthesys.SDK.Extensions.ReactionExtension.Triggers
  type: Property
  source:
    remote:
      path: Synthesys.SDK/Extensions/ReactionExtension.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: Triggers
    path: ../Synthesys.SDK/Extensions/ReactionExtension.cs
    startLine: 52
  assemblies:
  - Synthesys.SDK
  namespace: Synthesys.SDK.Extensions
  summary: "\nRetrieve a list of Triggers which cause this Extension to react\n"
  example: []
  syntax:
    content: public List<TriggeredByAttribute> Triggers { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Synthesys.SDK.Attributes.TriggeredByAttribute}
    content.vb: Public ReadOnly Property Triggers As List(Of TriggeredByAttribute)
  overload: Synthesys.SDK.Extensions.ReactionExtension.Triggers*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Synthesys.SDK.Extensions
  commentId: N:Synthesys.SDK.Extensions
  name: Synthesys.SDK.Extensions
  nameWithType: Synthesys.SDK.Extensions
  fullName: Synthesys.SDK.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Synthesys.SDK.Extensions.Extension
  commentId: T:Synthesys.SDK.Extensions.Extension
  parent: Synthesys.SDK.Extensions
  name: Extension
  nameWithType: Extension
  fullName: Synthesys.SDK.Extensions.Extension
- uid: Synthesys.SDK.Extensions.Extension.Logger
  commentId: P:Synthesys.SDK.Extensions.Extension.Logger
  parent: Synthesys.SDK.Extensions.Extension
  name: Logger
  nameWithType: Extension.Logger
  fullName: Synthesys.SDK.Extensions.Extension.Logger
- uid: Synthesys.SDK.Extensions.Extension.Initialize
  commentId: M:Synthesys.SDK.Extensions.Extension.Initialize
  parent: Synthesys.SDK.Extensions.Extension
  name: Initialize()
  nameWithType: Extension.Initialize()
  fullName: Synthesys.SDK.Extensions.Extension.Initialize()
  spec.csharp:
  - uid: Synthesys.SDK.Extensions.Extension.Initialize
    name: Initialize
    nameWithType: Extension.Initialize
    fullName: Synthesys.SDK.Extensions.Extension.Initialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Synthesys.SDK.Extensions.Extension.Initialize
    name: Initialize
    nameWithType: Extension.Initialize
    fullName: Synthesys.SDK.Extensions.Extension.Initialize
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Synthesys.SDK.Extensions.Extension.ValidateEnvironmentReadiness
  commentId: M:Synthesys.SDK.Extensions.Extension.ValidateEnvironmentReadiness
  parent: Synthesys.SDK.Extensions.Extension
  name: ValidateEnvironmentReadiness()
  nameWithType: Extension.ValidateEnvironmentReadiness()
  fullName: Synthesys.SDK.Extensions.Extension.ValidateEnvironmentReadiness()
  spec.csharp:
  - uid: Synthesys.SDK.Extensions.Extension.ValidateEnvironmentReadiness
    name: ValidateEnvironmentReadiness
    nameWithType: Extension.ValidateEnvironmentReadiness
    fullName: Synthesys.SDK.Extensions.Extension.ValidateEnvironmentReadiness
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Synthesys.SDK.Extensions.Extension.ValidateEnvironmentReadiness
    name: ValidateEnvironmentReadiness
    nameWithType: Extension.ValidateEnvironmentReadiness
    fullName: Synthesys.SDK.Extensions.Extension.ValidateEnvironmentReadiness
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Synthesys.SDK.Extensions.Extension.SetLoggerName(System.String)
  commentId: M:Synthesys.SDK.Extensions.Extension.SetLoggerName(System.String)
  parent: Synthesys.SDK.Extensions.Extension
  isExternal: true
  name: SetLoggerName(String)
  nameWithType: Extension.SetLoggerName(String)
  fullName: Synthesys.SDK.Extensions.Extension.SetLoggerName(System.String)
  spec.csharp:
  - uid: Synthesys.SDK.Extensions.Extension.SetLoggerName(System.String)
    name: SetLoggerName
    nameWithType: Extension.SetLoggerName
    fullName: Synthesys.SDK.Extensions.Extension.SetLoggerName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Synthesys.SDK.Extensions.Extension.SetLoggerName(System.String)
    name: SetLoggerName
    nameWithType: Extension.SetLoggerName
    fullName: Synthesys.SDK.Extensions.Extension.SetLoggerName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Synthesys.SDK.Extensions.Extension.Metadata
  commentId: P:Synthesys.SDK.Extensions.Extension.Metadata
  parent: Synthesys.SDK.Extensions.Extension
  name: Metadata
  nameWithType: Extension.Metadata
  fullName: Synthesys.SDK.Extensions.Extension.Metadata
- uid: Synthesys.SDK.Extensions.Extension.ConfigurableProperties
  commentId: P:Synthesys.SDK.Extensions.Extension.ConfigurableProperties
  parent: Synthesys.SDK.Extensions.Extension
  name: ConfigurableProperties
  nameWithType: Extension.ConfigurableProperties
  fullName: Synthesys.SDK.Extensions.Extension.ConfigurableProperties
- uid: Synthesys.SDK.Extensions.Extension.ConfigurablePropertyValues
  commentId: P:Synthesys.SDK.Extensions.Extension.ConfigurablePropertyValues
  parent: Synthesys.SDK.Extensions.Extension
  name: ConfigurablePropertyValues
  nameWithType: Extension.ConfigurablePropertyValues
  fullName: Synthesys.SDK.Extensions.Extension.ConfigurablePropertyValues
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Synthesys.SDK.Extensions.Extension.Synthesys.Tasks.ExtensionConfigurator.Configure(SMACD.AppTree.AppTreeNode,System.Collections.Generic.Dictionary{System.String,System.String})
  commentId: M:Synthesys.Tasks.ExtensionConfigurator.Configure(Synthesys.SDK.Extensions.Extension,SMACD.AppTree.AppTreeNode,System.Collections.Generic.Dictionary{System.String,System.String})
  parent: Synthesys.Tasks.ExtensionConfigurator
  definition: Synthesys.Tasks.ExtensionConfigurator.Configure(Synthesys.SDK.Extensions.Extension,SMACD.AppTree.AppTreeNode,System.Collections.Generic.Dictionary{System.String,System.String})
  name: Configure(AppTreeNode, Dictionary<String, String>)
  nameWithType: ExtensionConfigurator.Configure(AppTreeNode, Dictionary<String, String>)
  fullName: Synthesys.Tasks.ExtensionConfigurator.Configure(SMACD.AppTree.AppTreeNode, System.Collections.Generic.Dictionary<System.String, System.String>)
  nameWithType.vb: ExtensionConfigurator.Configure(AppTreeNode, Dictionary(Of String, String))
  fullName.vb: Synthesys.Tasks.ExtensionConfigurator.Configure(SMACD.AppTree.AppTreeNode, System.Collections.Generic.Dictionary(Of System.String, System.String))
  name.vb: Configure(AppTreeNode, Dictionary(Of String, String))
  spec.csharp:
  - uid: Synthesys.Tasks.ExtensionConfigurator.Configure(SMACD.AppTree.AppTreeNode,System.Collections.Generic.Dictionary{System.String,System.String})
    name: Configure
    nameWithType: ExtensionConfigurator.Configure
    fullName: Synthesys.Tasks.ExtensionConfigurator.Configure
  - name: (
    nameWithType: (
    fullName: (
  - uid: SMACD.AppTree.AppTreeNode
    name: AppTreeNode
    nameWithType: AppTreeNode
    fullName: SMACD.AppTree.AppTreeNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Synthesys.Tasks.ExtensionConfigurator.Configure(SMACD.AppTree.AppTreeNode,System.Collections.Generic.Dictionary{System.String,System.String})
    name: Configure
    nameWithType: ExtensionConfigurator.Configure
    fullName: Synthesys.Tasks.ExtensionConfigurator.Configure
  - name: (
    nameWithType: (
    fullName: (
  - uid: SMACD.AppTree.AppTreeNode
    name: AppTreeNode
    nameWithType: AppTreeNode
    fullName: SMACD.AppTree.AppTreeNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Synthesys.Tasks.ExtensionConfigurator.Configure(Synthesys.SDK.Extensions.Extension,SMACD.AppTree.AppTreeNode,System.Collections.Generic.Dictionary{System.String,System.String})
  commentId: M:Synthesys.Tasks.ExtensionConfigurator.Configure(Synthesys.SDK.Extensions.Extension,SMACD.AppTree.AppTreeNode,System.Collections.Generic.Dictionary{System.String,System.String})
  isExternal: true
  name: Configure(Extension, AppTreeNode, Dictionary<String, String>)
  nameWithType: ExtensionConfigurator.Configure(Extension, AppTreeNode, Dictionary<String, String>)
  fullName: Synthesys.Tasks.ExtensionConfigurator.Configure(Synthesys.SDK.Extensions.Extension, SMACD.AppTree.AppTreeNode, System.Collections.Generic.Dictionary<System.String, System.String>)
  nameWithType.vb: ExtensionConfigurator.Configure(Extension, AppTreeNode, Dictionary(Of String, String))
  fullName.vb: Synthesys.Tasks.ExtensionConfigurator.Configure(Synthesys.SDK.Extensions.Extension, SMACD.AppTree.AppTreeNode, System.Collections.Generic.Dictionary(Of System.String, System.String))
  name.vb: Configure(Extension, AppTreeNode, Dictionary(Of String, String))
  spec.csharp:
  - uid: Synthesys.Tasks.ExtensionConfigurator.Configure(Synthesys.SDK.Extensions.Extension,SMACD.AppTree.AppTreeNode,System.Collections.Generic.Dictionary{System.String,System.String})
    name: Configure
    nameWithType: ExtensionConfigurator.Configure
    fullName: Synthesys.Tasks.ExtensionConfigurator.Configure
  - name: (
    nameWithType: (
    fullName: (
  - uid: Synthesys.SDK.Extensions.Extension
    name: Extension
    nameWithType: Extension
    fullName: Synthesys.SDK.Extensions.Extension
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SMACD.AppTree.AppTreeNode
    name: AppTreeNode
    nameWithType: AppTreeNode
    fullName: SMACD.AppTree.AppTreeNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Synthesys.Tasks.ExtensionConfigurator.Configure(Synthesys.SDK.Extensions.Extension,SMACD.AppTree.AppTreeNode,System.Collections.Generic.Dictionary{System.String,System.String})
    name: Configure
    nameWithType: ExtensionConfigurator.Configure
    fullName: Synthesys.Tasks.ExtensionConfigurator.Configure
  - name: (
    nameWithType: (
    fullName: (
  - uid: Synthesys.SDK.Extensions.Extension
    name: Extension
    nameWithType: Extension
    fullName: Synthesys.SDK.Extensions.Extension
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SMACD.AppTree.AppTreeNode
    name: AppTreeNode
    nameWithType: AppTreeNode
    fullName: SMACD.AppTree.AppTreeNode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Synthesys.Tasks.ExtensionConfigurator
  commentId: T:Synthesys.Tasks.ExtensionConfigurator
  parent: Synthesys.Tasks
  name: ExtensionConfigurator
  nameWithType: ExtensionConfigurator
  fullName: Synthesys.Tasks.ExtensionConfigurator
- uid: Synthesys.Tasks
  commentId: N:Synthesys.Tasks
  name: Synthesys.Tasks
  nameWithType: Synthesys.Tasks
  fullName: Synthesys.Tasks
- uid: Synthesys.SDK.Extensions.ReactionExtension.React*
  commentId: Overload:Synthesys.SDK.Extensions.ReactionExtension.React
  name: React
  nameWithType: ReactionExtension.React
  fullName: Synthesys.SDK.Extensions.ReactionExtension.React
- uid: Synthesys.SDK.Triggers.TriggerDescriptor
  commentId: T:Synthesys.SDK.Triggers.TriggerDescriptor
  parent: Synthesys.SDK.Triggers
  name: TriggerDescriptor
  nameWithType: TriggerDescriptor
  fullName: Synthesys.SDK.Triggers.TriggerDescriptor
- uid: Synthesys.SDK.ExtensionReport
  commentId: T:Synthesys.SDK.ExtensionReport
  parent: Synthesys.SDK
  name: ExtensionReport
  nameWithType: ExtensionReport
  fullName: Synthesys.SDK.ExtensionReport
- uid: Synthesys.SDK.Triggers
  commentId: N:Synthesys.SDK.Triggers
  name: Synthesys.SDK.Triggers
  nameWithType: Synthesys.SDK.Triggers
  fullName: Synthesys.SDK.Triggers
- uid: Synthesys.SDK
  commentId: N:Synthesys.SDK
  name: Synthesys.SDK
  nameWithType: Synthesys.SDK
  fullName: Synthesys.SDK
- uid: Synthesys.SDK.Extensions.ReactionExtension.Triggers*
  commentId: Overload:Synthesys.SDK.Extensions.ReactionExtension.Triggers
  name: Triggers
  nameWithType: ReactionExtension.Triggers
  fullName: Synthesys.SDK.Extensions.ReactionExtension.Triggers
- uid: System.Collections.Generic.List{Synthesys.SDK.Attributes.TriggeredByAttribute}
  commentId: T:System.Collections.Generic.List{Synthesys.SDK.Attributes.TriggeredByAttribute}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<TriggeredByAttribute>
  nameWithType: List<TriggeredByAttribute>
  fullName: System.Collections.Generic.List<Synthesys.SDK.Attributes.TriggeredByAttribute>
  nameWithType.vb: List(Of TriggeredByAttribute)
  fullName.vb: System.Collections.Generic.List(Of Synthesys.SDK.Attributes.TriggeredByAttribute)
  name.vb: List(Of TriggeredByAttribute)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Synthesys.SDK.Attributes.TriggeredByAttribute
    name: TriggeredByAttribute
    nameWithType: TriggeredByAttribute
    fullName: Synthesys.SDK.Attributes.TriggeredByAttribute
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Synthesys.SDK.Attributes.TriggeredByAttribute
    name: TriggeredByAttribute
    nameWithType: TriggeredByAttribute
    fullName: Synthesys.SDK.Attributes.TriggeredByAttribute
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
