### YamlMime:ManagedReference
items:
- uid: Synthesys.Tasks.ExtensionToolbox
  commentId: T:Synthesys.Tasks.ExtensionToolbox
  id: ExtensionToolbox
  parent: Synthesys.Tasks
  children:
  - Synthesys.Tasks.ExtensionToolbox.EmitAction(System.String)
  - Synthesys.Tasks.ExtensionToolbox.ExtensionLibraries
  - Synthesys.Tasks.ExtensionToolbox.GetExtensionMetadata
  - Synthesys.Tasks.ExtensionToolbox.GetExtensionMetadata(System.String)
  - Synthesys.Tasks.ExtensionToolbox.GetReactionExtensionsTriggeredBy(SMACD.AppTree.AppTreeNode,Synthesys.SDK.Triggers.AppTreeNodeEvents)
  - Synthesys.Tasks.ExtensionToolbox.GetReactionExtensionsTriggeredBy(Synthesys.SDK.Extensions.Extension,Synthesys.SDK.Triggers.ExtensionConditionTrigger)
  - Synthesys.Tasks.ExtensionToolbox.GetReactionExtensionsTriggeredBy(Synthesys.SDK.Triggers.SystemEvents)
  - Synthesys.Tasks.ExtensionToolbox.GetReactionExtensionsTriggeredBy(Synthesys.SDK.Triggers.TriggerDescriptor)
  - Synthesys.Tasks.ExtensionToolbox.GetReactionExtensionsTriggeredBy(System.String,Synthesys.SDK.Triggers.AppTreeNodeEvents)
  - Synthesys.Tasks.ExtensionToolbox.Instance
  - Synthesys.Tasks.ExtensionToolbox.LoadExtensionLibrariesFromPath(System.String,System.String,System.Boolean)
  - Synthesys.Tasks.ExtensionToolbox.LoadExtensionLibrary(System.String)
  - Synthesys.Tasks.ExtensionToolbox.Logger
  - Synthesys.Tasks.ExtensionToolbox.ResolveExtensionFromId(System.String)
  langs:
  - csharp
  - vb
  name: ExtensionToolbox
  nameWithType: ExtensionToolbox
  fullName: Synthesys.Tasks.ExtensionToolbox
  type: Class
  source:
    remote:
      path: Synthesys.Tasks/ExtensionToolbox.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: ExtensionToolbox
    path: ../Synthesys.Tasks/ExtensionToolbox.cs
    startLine: 13
  assemblies:
  - Synthesys.Tasks
  namespace: Synthesys.Tasks
  syntax:
    content: public class ExtensionToolbox
    content.vb: Public Class ExtensionToolbox
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Synthesys.Tasks.ExtensionToolbox.Instance
  commentId: P:Synthesys.Tasks.ExtensionToolbox.Instance
  id: Instance
  parent: Synthesys.Tasks.ExtensionToolbox
  langs:
  - csharp
  - vb
  name: Instance
  nameWithType: ExtensionToolbox.Instance
  fullName: Synthesys.Tasks.ExtensionToolbox.Instance
  type: Property
  source:
    remote:
      path: Synthesys.Tasks/ExtensionToolbox.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: Instance
    path: ../Synthesys.Tasks/ExtensionToolbox.cs
    startLine: 23
  assemblies:
  - Synthesys.Tasks
  namespace: Synthesys.Tasks
  summary: "\nExtension toolbox singleton instance\n"
  example: []
  syntax:
    content: public static ExtensionToolbox Instance { get; }
    parameters: []
    return:
      type: Synthesys.Tasks.ExtensionToolbox
    content.vb: Public Shared ReadOnly Property Instance As ExtensionToolbox
  overload: Synthesys.Tasks.ExtensionToolbox.Instance*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Synthesys.Tasks.ExtensionToolbox.ExtensionLibraries
  commentId: P:Synthesys.Tasks.ExtensionToolbox.ExtensionLibraries
  id: ExtensionLibraries
  parent: Synthesys.Tasks.ExtensionToolbox
  langs:
  - csharp
  - vb
  name: ExtensionLibraries
  nameWithType: ExtensionToolbox.ExtensionLibraries
  fullName: Synthesys.Tasks.ExtensionToolbox.ExtensionLibraries
  type: Property
  source:
    remote:
      path: Synthesys.Tasks/ExtensionToolbox.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: ExtensionLibraries
    path: ../Synthesys.Tasks/ExtensionToolbox.cs
    startLine: 36
  assemblies:
  - Synthesys.Tasks
  namespace: Synthesys.Tasks
  summary: "\nExtension libraries loaded in this toolbox\n"
  example: []
  syntax:
    content: public IReadOnlyList<ExtensionLibrary> ExtensionLibraries { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyList{Synthesys.Tasks.ExtensionLibrary}
    content.vb: Public ReadOnly Property ExtensionLibraries As IReadOnlyList(Of ExtensionLibrary)
  overload: Synthesys.Tasks.ExtensionToolbox.ExtensionLibraries*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Synthesys.Tasks.ExtensionToolbox.Logger
  commentId: P:Synthesys.Tasks.ExtensionToolbox.Logger
  id: Logger
  parent: Synthesys.Tasks.ExtensionToolbox
  langs:
  - csharp
  - vb
  name: Logger
  nameWithType: ExtensionToolbox.Logger
  fullName: Synthesys.Tasks.ExtensionToolbox.Logger
  type: Property
  source:
    remote:
      path: Synthesys.Tasks/ExtensionToolbox.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: Logger
    path: ../Synthesys.Tasks/ExtensionToolbox.cs
    startLine: 38
  assemblies:
  - Synthesys.Tasks
  namespace: Synthesys.Tasks
  syntax:
    content: protected ILogger Logger { get; }
    parameters: []
    return:
      type: Microsoft.Extensions.Logging.ILogger
    content.vb: Protected ReadOnly Property Logger As ILogger
  overload: Synthesys.Tasks.ExtensionToolbox.Logger*
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: Synthesys.Tasks.ExtensionToolbox.ResolveExtensionFromId(System.String)
  commentId: M:Synthesys.Tasks.ExtensionToolbox.ResolveExtensionFromId(System.String)
  id: ResolveExtensionFromId(System.String)
  parent: Synthesys.Tasks.ExtensionToolbox
  langs:
  - csharp
  - vb
  name: ResolveExtensionFromId(String)
  nameWithType: ExtensionToolbox.ResolveExtensionFromId(String)
  fullName: Synthesys.Tasks.ExtensionToolbox.ResolveExtensionFromId(System.String)
  type: Method
  source:
    remote:
      path: Synthesys.Tasks/ExtensionToolbox.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: ResolveExtensionFromId
    path: ../Synthesys.Tasks/ExtensionToolbox.cs
    startLine: 45
  assemblies:
  - Synthesys.Tasks
  namespace: Synthesys.Tasks
  summary: "\nResolve an ActionExtension or ReactionExtension from its Extension identifier\n"
  example: []
  syntax:
    content: public Extension ResolveExtensionFromId(string extensionId)
    parameters:
    - id: extensionId
      type: System.String
      description: Extension identifier
    return:
      type: Synthesys.SDK.Extensions.Extension
      description: ''
    content.vb: Public Function ResolveExtensionFromId(extensionId As String) As Extension
  overload: Synthesys.Tasks.ExtensionToolbox.ResolveExtensionFromId*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Synthesys.Tasks.ExtensionToolbox.LoadExtensionLibrariesFromPath(System.String,System.String,System.Boolean)
  commentId: M:Synthesys.Tasks.ExtensionToolbox.LoadExtensionLibrariesFromPath(System.String,System.String,System.Boolean)
  id: LoadExtensionLibrariesFromPath(System.String,System.String,System.Boolean)
  parent: Synthesys.Tasks.ExtensionToolbox
  langs:
  - csharp
  - vb
  name: LoadExtensionLibrariesFromPath(String, String, Boolean)
  nameWithType: ExtensionToolbox.LoadExtensionLibrariesFromPath(String, String, Boolean)
  fullName: Synthesys.Tasks.ExtensionToolbox.LoadExtensionLibrariesFromPath(System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: Synthesys.Tasks/ExtensionToolbox.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: LoadExtensionLibrariesFromPath
    path: ../Synthesys.Tasks/ExtensionToolbox.cs
    startLine: 64
  assemblies:
  - Synthesys.Tasks
  namespace: Synthesys.Tasks
  summary: "\nLoad libraries from a directory\n"
  example: []
  syntax:
    content: public void LoadExtensionLibrariesFromPath(string path, string filePattern, bool recursive = false)
    parameters:
    - id: path
      type: System.String
      description: Search path
    - id: filePattern
      type: System.String
      description: File mask patterm (my.plugins.*.dll)
    - id: recursive
      type: System.Boolean
      description: Search inside directories below the given path
    content.vb: Public Sub LoadExtensionLibrariesFromPath(path As String, filePattern As String, recursive As Boolean = False)
  overload: Synthesys.Tasks.ExtensionToolbox.LoadExtensionLibrariesFromPath*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Synthesys.Tasks.ExtensionToolbox.LoadExtensionLibrary(System.String)
  commentId: M:Synthesys.Tasks.ExtensionToolbox.LoadExtensionLibrary(System.String)
  id: LoadExtensionLibrary(System.String)
  parent: Synthesys.Tasks.ExtensionToolbox
  langs:
  - csharp
  - vb
  name: LoadExtensionLibrary(String)
  nameWithType: ExtensionToolbox.LoadExtensionLibrary(String)
  fullName: Synthesys.Tasks.ExtensionToolbox.LoadExtensionLibrary(System.String)
  type: Method
  source:
    remote:
      path: Synthesys.Tasks/ExtensionToolbox.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: LoadExtensionLibrary
    path: ../Synthesys.Tasks/ExtensionToolbox.cs
    startLine: 75
  assemblies:
  - Synthesys.Tasks
  namespace: Synthesys.Tasks
  summary: "\nLoad a single extension library from a path\n"
  example: []
  syntax:
    content: public void LoadExtensionLibrary(string path)
    parameters:
    - id: path
      type: System.String
      description: Extension library path
    content.vb: Public Sub LoadExtensionLibrary(path As String)
  overload: Synthesys.Tasks.ExtensionToolbox.LoadExtensionLibrary*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Synthesys.Tasks.ExtensionToolbox.GetExtensionMetadata(System.String)
  commentId: M:Synthesys.Tasks.ExtensionToolbox.GetExtensionMetadata(System.String)
  id: GetExtensionMetadata(System.String)
  parent: Synthesys.Tasks.ExtensionToolbox
  langs:
  - csharp
  - vb
  name: GetExtensionMetadata(String)
  nameWithType: ExtensionToolbox.GetExtensionMetadata(String)
  fullName: Synthesys.Tasks.ExtensionToolbox.GetExtensionMetadata(System.String)
  type: Method
  source:
    remote:
      path: Synthesys.Tasks/ExtensionToolbox.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: GetExtensionMetadata
    path: ../Synthesys.Tasks/ExtensionToolbox.cs
    startLine: 85
  assemblies:
  - Synthesys.Tasks
  namespace: Synthesys.Tasks
  summary: "\nGet the metadata associated with a given Extension\n"
  example: []
  syntax:
    content: public ExtensionAttribute GetExtensionMetadata(string identifier)
    parameters:
    - id: identifier
      type: System.String
      description: Action or Reaction Extension ID
    return:
      type: Synthesys.SDK.Attributes.ExtensionAttribute
      description: ''
    content.vb: Public Function GetExtensionMetadata(identifier As String) As ExtensionAttribute
  overload: Synthesys.Tasks.ExtensionToolbox.GetExtensionMetadata*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Synthesys.Tasks.ExtensionToolbox.GetExtensionMetadata
  commentId: M:Synthesys.Tasks.ExtensionToolbox.GetExtensionMetadata
  id: GetExtensionMetadata
  parent: Synthesys.Tasks.ExtensionToolbox
  langs:
  - csharp
  - vb
  name: GetExtensionMetadata()
  nameWithType: ExtensionToolbox.GetExtensionMetadata()
  fullName: Synthesys.Tasks.ExtensionToolbox.GetExtensionMetadata()
  type: Method
  source:
    remote:
      path: Synthesys.Tasks/ExtensionToolbox.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: GetExtensionMetadata
    path: ../Synthesys.Tasks/ExtensionToolbox.cs
    startLine: 95
  assemblies:
  - Synthesys.Tasks
  namespace: Synthesys.Tasks
  summary: "\nGet the metadata for all loaded Extensions\n"
  example: []
  syntax:
    content: public IEnumerable<ExtensionAttribute> GetExtensionMetadata()
    return:
      type: System.Collections.Generic.IEnumerable{Synthesys.SDK.Attributes.ExtensionAttribute}
      description: ''
    content.vb: Public Function GetExtensionMetadata As IEnumerable(Of ExtensionAttribute)
  overload: Synthesys.Tasks.ExtensionToolbox.GetExtensionMetadata*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Synthesys.Tasks.ExtensionToolbox.EmitAction(System.String)
  commentId: M:Synthesys.Tasks.ExtensionToolbox.EmitAction(System.String)
  id: EmitAction(System.String)
  parent: Synthesys.Tasks.ExtensionToolbox
  langs:
  - csharp
  - vb
  name: EmitAction(String)
  nameWithType: ExtensionToolbox.EmitAction(String)
  fullName: Synthesys.Tasks.ExtensionToolbox.EmitAction(System.String)
  type: Method
  source:
    remote:
      path: Synthesys.Tasks/ExtensionToolbox.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: EmitAction
    path: ../Synthesys.Tasks/ExtensionToolbox.cs
    startLine: 107
  assemblies:
  - Synthesys.Tasks
  namespace: Synthesys.Tasks
  summary: "\nEmit an ActionExtension\n"
  example: []
  syntax:
    content: public ActionExtension EmitAction(string extensionIdentifier)
    parameters:
    - id: extensionIdentifier
      type: System.String
      description: Action identifier
    return:
      type: Synthesys.SDK.Extensions.ActionExtension
      description: ''
    content.vb: Public Function EmitAction(extensionIdentifier As String) As ActionExtension
  overload: Synthesys.Tasks.ExtensionToolbox.EmitAction*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Synthesys.Tasks.ExtensionToolbox.GetReactionExtensionsTriggeredBy(System.String,Synthesys.SDK.Triggers.AppTreeNodeEvents)
  commentId: M:Synthesys.Tasks.ExtensionToolbox.GetReactionExtensionsTriggeredBy(System.String,Synthesys.SDK.Triggers.AppTreeNodeEvents)
  id: GetReactionExtensionsTriggeredBy(System.String,Synthesys.SDK.Triggers.AppTreeNodeEvents)
  parent: Synthesys.Tasks.ExtensionToolbox
  langs:
  - csharp
  - vb
  name: GetReactionExtensionsTriggeredBy(String, AppTreeNodeEvents)
  nameWithType: ExtensionToolbox.GetReactionExtensionsTriggeredBy(String, AppTreeNodeEvents)
  fullName: Synthesys.Tasks.ExtensionToolbox.GetReactionExtensionsTriggeredBy(System.String, Synthesys.SDK.Triggers.AppTreeNodeEvents)
  type: Method
  source:
    remote:
      path: Synthesys.Tasks/ExtensionToolbox.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: GetReactionExtensionsTriggeredBy
    path: ../Synthesys.Tasks/ExtensionToolbox.cs
    startLine: 125
  assemblies:
  - Synthesys.Tasks
  namespace: Synthesys.Tasks
  summary: "\nGet a list of ReactionExtensions triggered by an action performed on a given Artifact node\n"
  example: []
  syntax:
    content: public List<ReactionExtension> GetReactionExtensionsTriggeredBy(string appTreeNodePath, AppTreeNodeEvents trigger)
    parameters:
    - id: appTreeNodePath
      type: System.String
    - id: trigger
      type: Synthesys.SDK.Triggers.AppTreeNodeEvents
      description: Trigger action type
    return:
      type: System.Collections.Generic.List{Synthesys.SDK.Extensions.ReactionExtension}
      description: ''
    content.vb: Public Function GetReactionExtensionsTriggeredBy(appTreeNodePath As String, trigger As AppTreeNodeEvents) As List(Of ReactionExtension)
  overload: Synthesys.Tasks.ExtensionToolbox.GetReactionExtensionsTriggeredBy*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Synthesys.Tasks.ExtensionToolbox.GetReactionExtensionsTriggeredBy(SMACD.AppTree.AppTreeNode,Synthesys.SDK.Triggers.AppTreeNodeEvents)
  commentId: M:Synthesys.Tasks.ExtensionToolbox.GetReactionExtensionsTriggeredBy(SMACD.AppTree.AppTreeNode,Synthesys.SDK.Triggers.AppTreeNodeEvents)
  id: GetReactionExtensionsTriggeredBy(SMACD.AppTree.AppTreeNode,Synthesys.SDK.Triggers.AppTreeNodeEvents)
  parent: Synthesys.Tasks.ExtensionToolbox
  langs:
  - csharp
  - vb
  name: GetReactionExtensionsTriggeredBy(AppTreeNode, AppTreeNodeEvents)
  nameWithType: ExtensionToolbox.GetReactionExtensionsTriggeredBy(AppTreeNode, AppTreeNodeEvents)
  fullName: Synthesys.Tasks.ExtensionToolbox.GetReactionExtensionsTriggeredBy(SMACD.AppTree.AppTreeNode, Synthesys.SDK.Triggers.AppTreeNodeEvents)
  type: Method
  source:
    remote:
      path: Synthesys.Tasks/ExtensionToolbox.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: GetReactionExtensionsTriggeredBy
    path: ../Synthesys.Tasks/ExtensionToolbox.cs
    startLine: 137
  assemblies:
  - Synthesys.Tasks
  namespace: Synthesys.Tasks
  summary: "\nGet a list of ReactionExtensions triggered by an action performed on a given Artifact node\n"
  example: []
  syntax:
    content: public List<ReactionExtension> GetReactionExtensionsTriggeredBy(AppTreeNode appTreeNode, AppTreeNodeEvents trigger)
    parameters:
    - id: appTreeNode
      type: SMACD.AppTree.AppTreeNode
      description: Node causing the trigger
    - id: trigger
      type: Synthesys.SDK.Triggers.AppTreeNodeEvents
      description: Trigger action type
    return:
      type: System.Collections.Generic.List{Synthesys.SDK.Extensions.ReactionExtension}
      description: ''
    content.vb: Public Function GetReactionExtensionsTriggeredBy(appTreeNode As AppTreeNode, trigger As AppTreeNodeEvents) As List(Of ReactionExtension)
  overload: Synthesys.Tasks.ExtensionToolbox.GetReactionExtensionsTriggeredBy*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Synthesys.Tasks.ExtensionToolbox.GetReactionExtensionsTriggeredBy(Synthesys.SDK.Extensions.Extension,Synthesys.SDK.Triggers.ExtensionConditionTrigger)
  commentId: M:Synthesys.Tasks.ExtensionToolbox.GetReactionExtensionsTriggeredBy(Synthesys.SDK.Extensions.Extension,Synthesys.SDK.Triggers.ExtensionConditionTrigger)
  id: GetReactionExtensionsTriggeredBy(Synthesys.SDK.Extensions.Extension,Synthesys.SDK.Triggers.ExtensionConditionTrigger)
  parent: Synthesys.Tasks.ExtensionToolbox
  langs:
  - csharp
  - vb
  name: GetReactionExtensionsTriggeredBy(Extension, ExtensionConditionTrigger)
  nameWithType: ExtensionToolbox.GetReactionExtensionsTriggeredBy(Extension, ExtensionConditionTrigger)
  fullName: Synthesys.Tasks.ExtensionToolbox.GetReactionExtensionsTriggeredBy(Synthesys.SDK.Extensions.Extension, Synthesys.SDK.Triggers.ExtensionConditionTrigger)
  type: Method
  source:
    remote:
      path: Synthesys.Tasks/ExtensionToolbox.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: GetReactionExtensionsTriggeredBy
    path: ../Synthesys.Tasks/ExtensionToolbox.cs
    startLine: 149
  assemblies:
  - Synthesys.Tasks
  namespace: Synthesys.Tasks
  summary: "\nGet a list of ReactionExtensions triggered by an extension being run\n"
  example: []
  syntax:
    content: public List<ReactionExtension> GetReactionExtensionsTriggeredBy(Extension triggeringExtension, ExtensionConditionTrigger trigger)
    parameters:
    - id: triggeringExtension
      type: Synthesys.SDK.Extensions.Extension
      description: Extension causing the trigger
    - id: trigger
      type: Synthesys.SDK.Triggers.ExtensionConditionTrigger
      description: Trigger execution state condition
    return:
      type: System.Collections.Generic.List{Synthesys.SDK.Extensions.ReactionExtension}
      description: ''
    content.vb: Public Function GetReactionExtensionsTriggeredBy(triggeringExtension As Extension, trigger As ExtensionConditionTrigger) As List(Of ReactionExtension)
  overload: Synthesys.Tasks.ExtensionToolbox.GetReactionExtensionsTriggeredBy*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Synthesys.Tasks.ExtensionToolbox.GetReactionExtensionsTriggeredBy(Synthesys.SDK.Triggers.SystemEvents)
  commentId: M:Synthesys.Tasks.ExtensionToolbox.GetReactionExtensionsTriggeredBy(Synthesys.SDK.Triggers.SystemEvents)
  id: GetReactionExtensionsTriggeredBy(Synthesys.SDK.Triggers.SystemEvents)
  parent: Synthesys.Tasks.ExtensionToolbox
  langs:
  - csharp
  - vb
  name: GetReactionExtensionsTriggeredBy(SystemEvents)
  nameWithType: ExtensionToolbox.GetReactionExtensionsTriggeredBy(SystemEvents)
  fullName: Synthesys.Tasks.ExtensionToolbox.GetReactionExtensionsTriggeredBy(Synthesys.SDK.Triggers.SystemEvents)
  type: Method
  source:
    remote:
      path: Synthesys.Tasks/ExtensionToolbox.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: GetReactionExtensionsTriggeredBy
    path: ../Synthesys.Tasks/ExtensionToolbox.cs
    startLine: 160
  assemblies:
  - Synthesys.Tasks
  namespace: Synthesys.Tasks
  summary: "\nGet a list of ReactionExtensions triggered by a system event\n"
  example: []
  syntax:
    content: public List<ReactionExtension> GetReactionExtensionsTriggeredBy(SystemEvents triggeringEvent)
    parameters:
    - id: triggeringEvent
      type: Synthesys.SDK.Triggers.SystemEvents
      description: System event causing the trigger
    return:
      type: System.Collections.Generic.List{Synthesys.SDK.Extensions.ReactionExtension}
      description: ''
    content.vb: Public Function GetReactionExtensionsTriggeredBy(triggeringEvent As SystemEvents) As List(Of ReactionExtension)
  overload: Synthesys.Tasks.ExtensionToolbox.GetReactionExtensionsTriggeredBy*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Synthesys.Tasks.ExtensionToolbox.GetReactionExtensionsTriggeredBy(Synthesys.SDK.Triggers.TriggerDescriptor)
  commentId: M:Synthesys.Tasks.ExtensionToolbox.GetReactionExtensionsTriggeredBy(Synthesys.SDK.Triggers.TriggerDescriptor)
  id: GetReactionExtensionsTriggeredBy(Synthesys.SDK.Triggers.TriggerDescriptor)
  parent: Synthesys.Tasks.ExtensionToolbox
  langs:
  - csharp
  - vb
  name: GetReactionExtensionsTriggeredBy(TriggerDescriptor)
  nameWithType: ExtensionToolbox.GetReactionExtensionsTriggeredBy(TriggerDescriptor)
  fullName: Synthesys.Tasks.ExtensionToolbox.GetReactionExtensionsTriggeredBy(Synthesys.SDK.Triggers.TriggerDescriptor)
  type: Method
  source:
    remote:
      path: Synthesys.Tasks/ExtensionToolbox.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: GetReactionExtensionsTriggeredBy
    path: ../Synthesys.Tasks/ExtensionToolbox.cs
    startLine: 170
  assemblies:
  - Synthesys.Tasks
  namespace: Synthesys.Tasks
  summary: "\nGet a list of ReactionExtensions triggered by a given event\n"
  example: []
  syntax:
    content: public List<ReactionExtension> GetReactionExtensionsTriggeredBy(TriggerDescriptor trigger)
    parameters:
    - id: trigger
      type: Synthesys.SDK.Triggers.TriggerDescriptor
      description: Trigger description of event
    return:
      type: System.Collections.Generic.List{Synthesys.SDK.Extensions.ReactionExtension}
      description: ''
    content.vb: Public Function GetReactionExtensionsTriggeredBy(trigger As TriggerDescriptor) As List(Of ReactionExtension)
  overload: Synthesys.Tasks.ExtensionToolbox.GetReactionExtensionsTriggeredBy*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Synthesys.Tasks
  commentId: N:Synthesys.Tasks
  name: Synthesys.Tasks
  nameWithType: Synthesys.Tasks
  fullName: Synthesys.Tasks
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Synthesys.Tasks.ExtensionToolbox.Instance*
  commentId: Overload:Synthesys.Tasks.ExtensionToolbox.Instance
  name: Instance
  nameWithType: ExtensionToolbox.Instance
  fullName: Synthesys.Tasks.ExtensionToolbox.Instance
- uid: Synthesys.Tasks.ExtensionToolbox
  commentId: T:Synthesys.Tasks.ExtensionToolbox
  parent: Synthesys.Tasks
  name: ExtensionToolbox
  nameWithType: ExtensionToolbox
  fullName: Synthesys.Tasks.ExtensionToolbox
- uid: Synthesys.Tasks.ExtensionToolbox.ExtensionLibraries*
  commentId: Overload:Synthesys.Tasks.ExtensionToolbox.ExtensionLibraries
  name: ExtensionLibraries
  nameWithType: ExtensionToolbox.ExtensionLibraries
  fullName: Synthesys.Tasks.ExtensionToolbox.ExtensionLibraries
- uid: System.Collections.Generic.IReadOnlyList{Synthesys.Tasks.ExtensionLibrary}
  commentId: T:System.Collections.Generic.IReadOnlyList{Synthesys.Tasks.ExtensionLibrary}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<ExtensionLibrary>
  nameWithType: IReadOnlyList<ExtensionLibrary>
  fullName: System.Collections.Generic.IReadOnlyList<Synthesys.Tasks.ExtensionLibrary>
  nameWithType.vb: IReadOnlyList(Of ExtensionLibrary)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of Synthesys.Tasks.ExtensionLibrary)
  name.vb: IReadOnlyList(Of ExtensionLibrary)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Synthesys.Tasks.ExtensionLibrary
    name: ExtensionLibrary
    nameWithType: ExtensionLibrary
    fullName: Synthesys.Tasks.ExtensionLibrary
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Synthesys.Tasks.ExtensionLibrary
    name: ExtensionLibrary
    nameWithType: ExtensionLibrary
    fullName: Synthesys.Tasks.ExtensionLibrary
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Synthesys.Tasks.ExtensionToolbox.Logger*
  commentId: Overload:Synthesys.Tasks.ExtensionToolbox.Logger
  name: Logger
  nameWithType: ExtensionToolbox.Logger
  fullName: Synthesys.Tasks.ExtensionToolbox.Logger
- uid: Microsoft.Extensions.Logging.ILogger
  commentId: T:Microsoft.Extensions.Logging.ILogger
  parent: Microsoft.Extensions.Logging
  isExternal: true
  name: ILogger
  nameWithType: ILogger
  fullName: Microsoft.Extensions.Logging.ILogger
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: true
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
- uid: Synthesys.Tasks.ExtensionToolbox.ResolveExtensionFromId*
  commentId: Overload:Synthesys.Tasks.ExtensionToolbox.ResolveExtensionFromId
  name: ResolveExtensionFromId
  nameWithType: ExtensionToolbox.ResolveExtensionFromId
  fullName: Synthesys.Tasks.ExtensionToolbox.ResolveExtensionFromId
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Synthesys.SDK.Extensions.Extension
  commentId: T:Synthesys.SDK.Extensions.Extension
  parent: Synthesys.SDK.Extensions
  name: Extension
  nameWithType: Extension
  fullName: Synthesys.SDK.Extensions.Extension
- uid: Synthesys.SDK.Extensions
  commentId: N:Synthesys.SDK.Extensions
  name: Synthesys.SDK.Extensions
  nameWithType: Synthesys.SDK.Extensions
  fullName: Synthesys.SDK.Extensions
- uid: Synthesys.Tasks.ExtensionToolbox.LoadExtensionLibrariesFromPath*
  commentId: Overload:Synthesys.Tasks.ExtensionToolbox.LoadExtensionLibrariesFromPath
  name: LoadExtensionLibrariesFromPath
  nameWithType: ExtensionToolbox.LoadExtensionLibrariesFromPath
  fullName: Synthesys.Tasks.ExtensionToolbox.LoadExtensionLibrariesFromPath
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Synthesys.Tasks.ExtensionToolbox.LoadExtensionLibrary*
  commentId: Overload:Synthesys.Tasks.ExtensionToolbox.LoadExtensionLibrary
  name: LoadExtensionLibrary
  nameWithType: ExtensionToolbox.LoadExtensionLibrary
  fullName: Synthesys.Tasks.ExtensionToolbox.LoadExtensionLibrary
- uid: Synthesys.Tasks.ExtensionToolbox.GetExtensionMetadata*
  commentId: Overload:Synthesys.Tasks.ExtensionToolbox.GetExtensionMetadata
  name: GetExtensionMetadata
  nameWithType: ExtensionToolbox.GetExtensionMetadata
  fullName: Synthesys.Tasks.ExtensionToolbox.GetExtensionMetadata
- uid: Synthesys.SDK.Attributes.ExtensionAttribute
  commentId: T:Synthesys.SDK.Attributes.ExtensionAttribute
  parent: Synthesys.SDK.Attributes
  name: ExtensionAttribute
  nameWithType: ExtensionAttribute
  fullName: Synthesys.SDK.Attributes.ExtensionAttribute
- uid: Synthesys.SDK.Attributes
  commentId: N:Synthesys.SDK.Attributes
  name: Synthesys.SDK.Attributes
  nameWithType: Synthesys.SDK.Attributes
  fullName: Synthesys.SDK.Attributes
- uid: System.Collections.Generic.IEnumerable{Synthesys.SDK.Attributes.ExtensionAttribute}
  commentId: T:System.Collections.Generic.IEnumerable{Synthesys.SDK.Attributes.ExtensionAttribute}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ExtensionAttribute>
  nameWithType: IEnumerable<ExtensionAttribute>
  fullName: System.Collections.Generic.IEnumerable<Synthesys.SDK.Attributes.ExtensionAttribute>
  nameWithType.vb: IEnumerable(Of ExtensionAttribute)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Synthesys.SDK.Attributes.ExtensionAttribute)
  name.vb: IEnumerable(Of ExtensionAttribute)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Synthesys.SDK.Attributes.ExtensionAttribute
    name: ExtensionAttribute
    nameWithType: ExtensionAttribute
    fullName: Synthesys.SDK.Attributes.ExtensionAttribute
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Synthesys.SDK.Attributes.ExtensionAttribute
    name: ExtensionAttribute
    nameWithType: ExtensionAttribute
    fullName: Synthesys.SDK.Attributes.ExtensionAttribute
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Synthesys.Tasks.ExtensionToolbox.EmitAction*
  commentId: Overload:Synthesys.Tasks.ExtensionToolbox.EmitAction
  name: EmitAction
  nameWithType: ExtensionToolbox.EmitAction
  fullName: Synthesys.Tasks.ExtensionToolbox.EmitAction
- uid: Synthesys.SDK.Extensions.ActionExtension
  commentId: T:Synthesys.SDK.Extensions.ActionExtension
  parent: Synthesys.SDK.Extensions
  name: ActionExtension
  nameWithType: ActionExtension
  fullName: Synthesys.SDK.Extensions.ActionExtension
- uid: Synthesys.Tasks.ExtensionToolbox.GetReactionExtensionsTriggeredBy*
  commentId: Overload:Synthesys.Tasks.ExtensionToolbox.GetReactionExtensionsTriggeredBy
  name: GetReactionExtensionsTriggeredBy
  nameWithType: ExtensionToolbox.GetReactionExtensionsTriggeredBy
  fullName: Synthesys.Tasks.ExtensionToolbox.GetReactionExtensionsTriggeredBy
- uid: Synthesys.SDK.Triggers.AppTreeNodeEvents
  commentId: T:Synthesys.SDK.Triggers.AppTreeNodeEvents
  parent: Synthesys.SDK.Triggers
  name: AppTreeNodeEvents
  nameWithType: AppTreeNodeEvents
  fullName: Synthesys.SDK.Triggers.AppTreeNodeEvents
- uid: System.Collections.Generic.List{Synthesys.SDK.Extensions.ReactionExtension}
  commentId: T:System.Collections.Generic.List{Synthesys.SDK.Extensions.ReactionExtension}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<ReactionExtension>
  nameWithType: List<ReactionExtension>
  fullName: System.Collections.Generic.List<Synthesys.SDK.Extensions.ReactionExtension>
  nameWithType.vb: List(Of ReactionExtension)
  fullName.vb: System.Collections.Generic.List(Of Synthesys.SDK.Extensions.ReactionExtension)
  name.vb: List(Of ReactionExtension)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Synthesys.SDK.Extensions.ReactionExtension
    name: ReactionExtension
    nameWithType: ReactionExtension
    fullName: Synthesys.SDK.Extensions.ReactionExtension
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Synthesys.SDK.Extensions.ReactionExtension
    name: ReactionExtension
    nameWithType: ReactionExtension
    fullName: Synthesys.SDK.Extensions.ReactionExtension
  - name: )
    nameWithType: )
    fullName: )
- uid: Synthesys.SDK.Triggers
  commentId: N:Synthesys.SDK.Triggers
  name: Synthesys.SDK.Triggers
  nameWithType: Synthesys.SDK.Triggers
  fullName: Synthesys.SDK.Triggers
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SMACD.AppTree.AppTreeNode
  commentId: T:SMACD.AppTree.AppTreeNode
  parent: SMACD.AppTree
  name: AppTreeNode
  nameWithType: AppTreeNode
  fullName: SMACD.AppTree.AppTreeNode
- uid: SMACD.AppTree
  commentId: N:SMACD.AppTree
  name: SMACD.AppTree
  nameWithType: SMACD.AppTree
  fullName: SMACD.AppTree
- uid: Synthesys.SDK.Triggers.ExtensionConditionTrigger
  commentId: T:Synthesys.SDK.Triggers.ExtensionConditionTrigger
  parent: Synthesys.SDK.Triggers
  name: ExtensionConditionTrigger
  nameWithType: ExtensionConditionTrigger
  fullName: Synthesys.SDK.Triggers.ExtensionConditionTrigger
- uid: Synthesys.SDK.Triggers.SystemEvents
  commentId: T:Synthesys.SDK.Triggers.SystemEvents
  parent: Synthesys.SDK.Triggers
  name: SystemEvents
  nameWithType: SystemEvents
  fullName: Synthesys.SDK.Triggers.SystemEvents
- uid: Synthesys.SDK.Triggers.TriggerDescriptor
  commentId: T:Synthesys.SDK.Triggers.TriggerDescriptor
  parent: Synthesys.SDK.Triggers
  name: TriggerDescriptor
  nameWithType: TriggerDescriptor
  fullName: Synthesys.SDK.Triggers.TriggerDescriptor
