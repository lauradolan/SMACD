### YamlMime:ManagedReference
items:
- uid: SMACD.AppTree.ObservableDictionary`2
  commentId: T:SMACD.AppTree.ObservableDictionary`2
  id: ObservableDictionary`2
  parent: SMACD.AppTree
  children:
  - SMACD.AppTree.ObservableDictionary`2.#ctor
  - SMACD.AppTree.ObservableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})
  - SMACD.AppTree.ObservableDictionary`2.Add(`0,`1)
  - SMACD.AppTree.ObservableDictionary`2.CollectionChanged
  - SMACD.AppTree.ObservableDictionary`2.ContainsKey(`0)
  - SMACD.AppTree.ObservableDictionary`2.Item(`0)
  - SMACD.AppTree.ObservableDictionary`2.Keys
  - SMACD.AppTree.ObservableDictionary`2.PropertyChanged
  - SMACD.AppTree.ObservableDictionary`2.RaisePropertyChanged(System.ComponentModel.PropertyChangedEventArgs)
  - SMACD.AppTree.ObservableDictionary`2.Remove(`0)
  - SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
  - SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Clear
  - SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  - SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  - SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Count
  - SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  - SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  - SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
  - SMACD.AppTree.ObservableDictionary`2.System#Collections#IEnumerable#GetEnumerator
  - SMACD.AppTree.ObservableDictionary`2.TryGetValue(`0,`1@)
  - SMACD.AppTree.ObservableDictionary`2.Values
  langs:
  - csharp
  - vb
  name: ObservableDictionary<TKey, TValue>
  nameWithType: ObservableDictionary<TKey, TValue>
  fullName: SMACD.AppTree.ObservableDictionary<TKey, TValue>
  type: Class
  source:
    remote:
      path: SMACD.AppTree/ObservableDictionary.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: ObservableDictionary
    path: ../SMACD.AppTree/ObservableDictionary.cs
    startLine: 12
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree
  summary: "\nProvides a dictionary for use with data binding.\n"
  example: []
  syntax:
    content: 'public class ObservableDictionary<TKey, TValue> : IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable, INotifyCollectionChanged, INotifyPropertyChanged'
    typeParameters:
    - id: TKey
      description: Specifies the type of the keys in this collection.
    - id: TValue
      description: Specifies the type of the values in this collection.
    content.vb: >-
      Public Class ObservableDictionary(Of TKey, TValue)

          Implements IDictionary(Of TKey, TValue), ICollection(Of KeyValuePair(Of TKey, TValue)), IEnumerable(Of KeyValuePair(Of TKey, TValue)), IEnumerable, INotifyCollectionChanged, INotifyPropertyChanged
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  - System.Collections.IEnumerable
  - System.Collections.Specialized.INotifyCollectionChanged
  - System.ComponentModel.INotifyPropertyChanged
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: ObservableDictionary(Of TKey, TValue)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: SMACD.AppTree.ObservableDictionary(Of TKey, TValue)
  name.vb: ObservableDictionary(Of TKey, TValue)
- uid: SMACD.AppTree.ObservableDictionary`2.#ctor
  commentId: M:SMACD.AppTree.ObservableDictionary`2.#ctor
  id: '#ctor'
  parent: SMACD.AppTree.ObservableDictionary`2
  langs:
  - csharp
  - vb
  name: ObservableDictionary()
  nameWithType: ObservableDictionary<TKey, TValue>.ObservableDictionary()
  fullName: SMACD.AppTree.ObservableDictionary<TKey, TValue>.ObservableDictionary()
  type: Constructor
  source:
    remote:
      path: SMACD.AppTree/ObservableDictionary.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: .ctor
    path: ../SMACD.AppTree/ObservableDictionary.cs
    startLine: 21
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree
  summary: "\nInitializes an instance of the class.\n"
  example: []
  syntax:
    content: public ObservableDictionary()
    content.vb: Public Sub New
  overload: SMACD.AppTree.ObservableDictionary`2.#ctor*
  nameWithType.vb: ObservableDictionary(Of TKey, TValue).ObservableDictionary()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SMACD.AppTree.ObservableDictionary(Of TKey, TValue).ObservableDictionary()
- uid: SMACD.AppTree.ObservableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})
  commentId: M:SMACD.AppTree.ObservableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})
  id: '#ctor(System.Collections.Generic.IDictionary{`0,`1})'
  parent: SMACD.AppTree.ObservableDictionary`2
  langs:
  - csharp
  - vb
  name: ObservableDictionary(IDictionary<TKey, TValue>)
  nameWithType: ObservableDictionary<TKey, TValue>.ObservableDictionary(IDictionary<TKey, TValue>)
  fullName: SMACD.AppTree.ObservableDictionary<TKey, TValue>.ObservableDictionary(System.Collections.Generic.IDictionary<TKey, TValue>)
  type: Constructor
  source:
    remote:
      path: SMACD.AppTree/ObservableDictionary.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: .ctor
    path: ../SMACD.AppTree/ObservableDictionary.cs
    startLine: 30
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree
  summary: "\nInitializes an instance of the class using another dictionary as\nthe key/value store.\n"
  example: []
  syntax:
    content: public ObservableDictionary(IDictionary<TKey, TValue> dictionary)
    parameters:
    - id: dictionary
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
    content.vb: Public Sub New(dictionary As IDictionary(Of TKey, TValue))
  overload: SMACD.AppTree.ObservableDictionary`2.#ctor*
  nameWithType.vb: ObservableDictionary(Of TKey, TValue).ObservableDictionary(IDictionary(Of TKey, TValue))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SMACD.AppTree.ObservableDictionary(Of TKey, TValue).ObservableDictionary(System.Collections.Generic.IDictionary(Of TKey, TValue))
  name.vb: ObservableDictionary(IDictionary(Of TKey, TValue))
- uid: SMACD.AppTree.ObservableDictionary`2.CollectionChanged
  commentId: E:SMACD.AppTree.ObservableDictionary`2.CollectionChanged
  id: CollectionChanged
  parent: SMACD.AppTree.ObservableDictionary`2
  langs:
  - csharp
  - vb
  name: CollectionChanged
  nameWithType: ObservableDictionary<TKey, TValue>.CollectionChanged
  fullName: SMACD.AppTree.ObservableDictionary<TKey, TValue>.CollectionChanged
  type: Event
  source:
    remote:
      path: SMACD.AppTree/ObservableDictionary.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: CollectionChanged
    path: ../SMACD.AppTree/ObservableDictionary.cs
    startLine: 36
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree
  summary: Event raised when the collection changes.
  example: []
  syntax:
    content: public event NotifyCollectionChangedEventHandler CollectionChanged
    return:
      type: System.Collections.Specialized.NotifyCollectionChangedEventHandler
    content.vb: Public Event CollectionChanged As NotifyCollectionChangedEventHandler
  implements:
  - System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
  nameWithType.vb: ObservableDictionary(Of TKey, TValue).CollectionChanged
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SMACD.AppTree.ObservableDictionary(Of TKey, TValue).CollectionChanged
- uid: SMACD.AppTree.ObservableDictionary`2.PropertyChanged
  commentId: E:SMACD.AppTree.ObservableDictionary`2.PropertyChanged
  id: PropertyChanged
  parent: SMACD.AppTree.ObservableDictionary`2
  langs:
  - csharp
  - vb
  name: PropertyChanged
  nameWithType: ObservableDictionary<TKey, TValue>.PropertyChanged
  fullName: SMACD.AppTree.ObservableDictionary<TKey, TValue>.PropertyChanged
  type: Event
  source:
    remote:
      path: SMACD.AppTree/ObservableDictionary.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: PropertyChanged
    path: ../SMACD.AppTree/ObservableDictionary.cs
    startLine: 39
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree
  summary: Event raised when a property on the collection changes.
  example: []
  syntax:
    content: public event PropertyChangedEventHandler PropertyChanged
    return:
      type: System.ComponentModel.PropertyChangedEventHandler
    content.vb: Public Event PropertyChanged As PropertyChangedEventHandler
  implements:
  - System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  nameWithType.vb: ObservableDictionary(Of TKey, TValue).PropertyChanged
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SMACD.AppTree.ObservableDictionary(Of TKey, TValue).PropertyChanged
- uid: SMACD.AppTree.ObservableDictionary`2.RaisePropertyChanged(System.ComponentModel.PropertyChangedEventArgs)
  commentId: M:SMACD.AppTree.ObservableDictionary`2.RaisePropertyChanged(System.ComponentModel.PropertyChangedEventArgs)
  id: RaisePropertyChanged(System.ComponentModel.PropertyChangedEventArgs)
  parent: SMACD.AppTree.ObservableDictionary`2
  langs:
  - csharp
  - vb
  name: RaisePropertyChanged(PropertyChangedEventArgs)
  nameWithType: ObservableDictionary<TKey, TValue>.RaisePropertyChanged(PropertyChangedEventArgs)
  fullName: SMACD.AppTree.ObservableDictionary<TKey, TValue>.RaisePropertyChanged(System.ComponentModel.PropertyChangedEventArgs)
  type: Method
  source:
    remote:
      path: SMACD.AppTree/ObservableDictionary.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: RaisePropertyChanged
    path: ../SMACD.AppTree/ObservableDictionary.cs
    startLine: 93
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree
  summary: "\nAllows derived classes to raise custom property changed events.\n"
  example: []
  syntax:
    content: protected void RaisePropertyChanged(PropertyChangedEventArgs args)
    parameters:
    - id: args
      type: System.ComponentModel.PropertyChangedEventArgs
    content.vb: Protected Sub RaisePropertyChanged(args As PropertyChangedEventArgs)
  overload: SMACD.AppTree.ObservableDictionary`2.RaisePropertyChanged*
  nameWithType.vb: ObservableDictionary(Of TKey, TValue).RaisePropertyChanged(PropertyChangedEventArgs)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: SMACD.AppTree.ObservableDictionary(Of TKey, TValue).RaisePropertyChanged(System.ComponentModel.PropertyChangedEventArgs)
- uid: SMACD.AppTree.ObservableDictionary`2.Add(`0,`1)
  commentId: M:SMACD.AppTree.ObservableDictionary`2.Add(`0,`1)
  id: Add(`0,`1)
  parent: SMACD.AppTree.ObservableDictionary`2
  langs:
  - csharp
  - vb
  name: Add(TKey, TValue)
  nameWithType: ObservableDictionary<TKey, TValue>.Add(TKey, TValue)
  fullName: SMACD.AppTree.ObservableDictionary<TKey, TValue>.Add(TKey, TValue)
  type: Method
  source:
    remote:
      path: SMACD.AppTree/ObservableDictionary.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: Add
    path: ../SMACD.AppTree/ObservableDictionary.cs
    startLine: 105
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree
  summary: "\nAdds an element with the provided key and value to the <xref href=\"System.Collections.Generic.IDictionary%602\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void Add(TKey key, TValue value)
    parameters:
    - id: key
      type: '{TKey}'
      description: The object to use as the key of the element to add.
    - id: value
      type: '{TValue}'
      description: The object to use as the value of the element to add.
    content.vb: Public Sub Add(key As TKey, value As TValue)
  overload: SMACD.AppTree.ObservableDictionary`2.Add*
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}.Add({TKey},{TValue})
  nameWithType.vb: ObservableDictionary(Of TKey, TValue).Add(TKey, TValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SMACD.AppTree.ObservableDictionary(Of TKey, TValue).Add(TKey, TValue)
- uid: SMACD.AppTree.ObservableDictionary`2.ContainsKey(`0)
  commentId: M:SMACD.AppTree.ObservableDictionary`2.ContainsKey(`0)
  id: ContainsKey(`0)
  parent: SMACD.AppTree.ObservableDictionary`2
  langs:
  - csharp
  - vb
  name: ContainsKey(TKey)
  nameWithType: ObservableDictionary<TKey, TValue>.ContainsKey(TKey)
  fullName: SMACD.AppTree.ObservableDictionary<TKey, TValue>.ContainsKey(TKey)
  type: Method
  source:
    remote:
      path: SMACD.AppTree/ObservableDictionary.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: ContainsKey
    path: ../SMACD.AppTree/ObservableDictionary.cs
    startLine: 119
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree
  summary: "\nDetermines whether the <xref href=\"System.Collections.Generic.IDictionary%602\" data-throw-if-not-resolved=\"false\"></xref> contains an element with the\nspecified key.\n"
  example: []
  syntax:
    content: public bool ContainsKey(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key to locate in the <xref href="System.Collections.Generic.IDictionary%602" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: "\ntrue if the <xref href=\"System.Collections.Generic.IDictionary%602\" data-throw-if-not-resolved=\"false\"></xref> contains an element with the key; otherwise,\nfalse.\n"
    content.vb: Public Function ContainsKey(key As TKey) As Boolean
  overload: SMACD.AppTree.ObservableDictionary`2.ContainsKey*
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}.ContainsKey({TKey})
  nameWithType.vb: ObservableDictionary(Of TKey, TValue).ContainsKey(TKey)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SMACD.AppTree.ObservableDictionary(Of TKey, TValue).ContainsKey(TKey)
- uid: SMACD.AppTree.ObservableDictionary`2.Keys
  commentId: P:SMACD.AppTree.ObservableDictionary`2.Keys
  id: Keys
  parent: SMACD.AppTree.ObservableDictionary`2
  langs:
  - csharp
  - vb
  name: Keys
  nameWithType: ObservableDictionary<TKey, TValue>.Keys
  fullName: SMACD.AppTree.ObservableDictionary<TKey, TValue>.Keys
  type: Property
  source:
    remote:
      path: SMACD.AppTree/ObservableDictionary.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: Keys
    path: ../SMACD.AppTree/ObservableDictionary.cs
    startLine: 132
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree
  summary: "\nGets an <xref href=\"System.Collections.Generic.ICollection%601\" data-throw-if-not-resolved=\"false\"></xref> containing the keys of the\n<xref href=\"System.Collections.Generic.IDictionary%602\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ICollection<TKey> Keys { get; }
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{{TKey}}
      description: "\nAn <xref href=\"System.Collections.Generic.ICollection%601\" data-throw-if-not-resolved=\"false\"></xref> containing the keys of the object that implements\n<xref href=\"System.Collections.Generic.IDictionary%602\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: Public ReadOnly Property Keys As ICollection(Of TKey)
  overload: SMACD.AppTree.ObservableDictionary`2.Keys*
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}.Keys
  nameWithType.vb: ObservableDictionary(Of TKey, TValue).Keys
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: SMACD.AppTree.ObservableDictionary(Of TKey, TValue).Keys
- uid: SMACD.AppTree.ObservableDictionary`2.Remove(`0)
  commentId: M:SMACD.AppTree.ObservableDictionary`2.Remove(`0)
  id: Remove(`0)
  parent: SMACD.AppTree.ObservableDictionary`2
  langs:
  - csharp
  - vb
  name: Remove(TKey)
  nameWithType: ObservableDictionary<TKey, TValue>.Remove(TKey)
  fullName: SMACD.AppTree.ObservableDictionary<TKey, TValue>.Remove(TKey)
  type: Method
  source:
    remote:
      path: SMACD.AppTree/ObservableDictionary.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: Remove
    path: ../SMACD.AppTree/ObservableDictionary.cs
    startLine: 142
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree
  summary: "\nRemoves the element with the specified key from the <xref href=\"System.Collections.Generic.IDictionary%602\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool Remove(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the element to remove.
    return:
      type: System.Boolean
      description: "\ntrue if the element is successfully removed; otherwise, false.  This method also returns false if\n<code data-dev-comment-type=\"paramref\" class=\"paramref\">key</code> was not found in the original <xref href=\"System.Collections.Generic.IDictionary%602\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: Public Function Remove(key As TKey) As Boolean
  overload: SMACD.AppTree.ObservableDictionary`2.Remove*
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}.Remove({TKey})
  nameWithType.vb: ObservableDictionary(Of TKey, TValue).Remove(TKey)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SMACD.AppTree.ObservableDictionary(Of TKey, TValue).Remove(TKey)
- uid: SMACD.AppTree.ObservableDictionary`2.TryGetValue(`0,`1@)
  commentId: M:SMACD.AppTree.ObservableDictionary`2.TryGetValue(`0,`1@)
  id: TryGetValue(`0,`1@)
  parent: SMACD.AppTree.ObservableDictionary`2
  langs:
  - csharp
  - vb
  name: TryGetValue(TKey, out TValue)
  nameWithType: ObservableDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  fullName: SMACD.AppTree.ObservableDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  type: Method
  source:
    remote:
      path: SMACD.AppTree/ObservableDictionary.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: TryGetValue
    path: ../SMACD.AppTree/ObservableDictionary.cs
    startLine: 160
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree
  summary: "\nGets the value associated with the specified key.\n"
  example: []
  syntax:
    content: public bool TryGetValue(TKey key, out TValue value)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key whose value to get.
    - id: value
      type: '{TValue}'
      description: "\nWhen this method returns, the value associated with the specified key, if the key is found;\notherwise, the default value for the type of the <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> parameter. This parameter is passed\nuninitialized.\n"
    return:
      type: System.Boolean
      description: "\ntrue if the object that implements <xref href=\"System.Collections.Generic.IDictionary%602\" data-throw-if-not-resolved=\"false\"></xref> contains an element\nwith the specified key; otherwise, false.\n"
    content.vb: Public Function TryGetValue(key As TKey, ByRef value As TValue) As Boolean
  overload: SMACD.AppTree.ObservableDictionary`2.TryGetValue*
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}.TryGetValue({TKey},{TValue}@)
  nameWithType.vb: ObservableDictionary(Of TKey, TValue).TryGetValue(TKey, ByRef TValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: SMACD.AppTree.ObservableDictionary(Of TKey, TValue).TryGetValue(TKey, ByRef TValue)
  name.vb: TryGetValue(TKey, ByRef TValue)
- uid: SMACD.AppTree.ObservableDictionary`2.Values
  commentId: P:SMACD.AppTree.ObservableDictionary`2.Values
  id: Values
  parent: SMACD.AppTree.ObservableDictionary`2
  langs:
  - csharp
  - vb
  name: Values
  nameWithType: ObservableDictionary<TKey, TValue>.Values
  fullName: SMACD.AppTree.ObservableDictionary<TKey, TValue>.Values
  type: Property
  source:
    remote:
      path: SMACD.AppTree/ObservableDictionary.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: Values
    path: ../SMACD.AppTree/ObservableDictionary.cs
    startLine: 173
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree
  summary: "\nGets an <xref href=\"System.Collections.Generic.ICollection%601\" data-throw-if-not-resolved=\"false\"></xref> containing the values in the\n<xref href=\"System.Collections.Generic.IDictionary%602\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ICollection<TValue> Values { get; }
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{{TValue}}
      description: "\nAn <xref href=\"System.Collections.Generic.ICollection%601\" data-throw-if-not-resolved=\"false\"></xref> containing the values in the object that\nimplements <xref href=\"System.Collections.Generic.IDictionary%602\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: Public ReadOnly Property Values As ICollection(Of TValue)
  overload: SMACD.AppTree.ObservableDictionary`2.Values*
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}.Values
  nameWithType.vb: ObservableDictionary(Of TKey, TValue).Values
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: SMACD.AppTree.ObservableDictionary(Of TKey, TValue).Values
- uid: SMACD.AppTree.ObservableDictionary`2.Item(`0)
  commentId: P:SMACD.AppTree.ObservableDictionary`2.Item(`0)
  id: Item(`0)
  parent: SMACD.AppTree.ObservableDictionary`2
  langs:
  - csharp
  - vb
  name: Item[TKey]
  nameWithType: ObservableDictionary<TKey, TValue>.Item[TKey]
  fullName: SMACD.AppTree.ObservableDictionary<TKey, TValue>.Item[TKey]
  type: Property
  source:
    remote:
      path: SMACD.AppTree/ObservableDictionary.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: this[]
    path: ../SMACD.AppTree/ObservableDictionary.cs
    startLine: 180
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree
  summary: "\nGets or sets the element with the specified key.\n"
  example: []
  syntax:
    content: public TValue this[TKey key] { get; set; }
    parameters:
    - id: key
      type: '{TKey}'
      description: The key.
    return:
      type: '{TValue}'
      description: ''
    content.vb: Public Property Item(key As TKey) As TValue
  overload: SMACD.AppTree.ObservableDictionary`2.Item*
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}.Item({TKey})
  nameWithType.vb: ObservableDictionary(Of TKey, TValue).Item(TKey)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: SMACD.AppTree.ObservableDictionary(Of TKey, TValue).Item(TKey)
  name.vb: Item(TKey)
- uid: SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
  commentId: M:SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
  isEii: true
  parent: SMACD.AppTree.ObservableDictionary`2
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<TKey, TValue>>.Add(KeyValuePair<TKey, TValue>)
  nameWithType: ObservableDictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.Add(KeyValuePair<TKey, TValue>)
  fullName: SMACD.AppTree.ObservableDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Add(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  type: Method
  source:
    remote:
      path: SMACD.AppTree/ObservableDictionary.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
    path: ../SMACD.AppTree/ObservableDictionary.cs
    startLine: 190
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree
  syntax:
    content: void ICollection<KeyValuePair<TKey, TValue>>.Add(KeyValuePair<TKey, TValue> item)
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
    content.vb: Sub System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(item As KeyValuePair(Of TKey, TValue)) Implements ICollection(Of KeyValuePair(Of TKey, TValue)).Add
  overload: SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Add(System.Collections.Generic.KeyValuePair{{TKey},{TValue}})
  nameWithType.vb: ObservableDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair(Of TKey, TValue))
  fullName.vb: SMACD.AppTree.ObservableDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair(Of TKey, TValue))
- uid: SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Clear
  commentId: M:SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Clear
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Clear
  isEii: true
  parent: SMACD.AppTree.ObservableDictionary`2
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<TKey, TValue>>.Clear()
  nameWithType: ObservableDictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.Clear()
  fullName: SMACD.AppTree.ObservableDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Clear()
  type: Method
  source:
    remote:
      path: SMACD.AppTree/ObservableDictionary.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Clear
    path: ../SMACD.AppTree/ObservableDictionary.cs
    startLine: 195
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree
  syntax:
    content: void ICollection<KeyValuePair<TKey, TValue>>.Clear()
    content.vb: Sub System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Clear Implements ICollection(Of KeyValuePair(Of TKey, TValue)).Clear
  overload: SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Clear*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Clear
  nameWithType.vb: ObservableDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Clear()
  fullName.vb: SMACD.AppTree.ObservableDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Clear()
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Clear()
- uid: SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  commentId: M:SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  isEii: true
  parent: SMACD.AppTree.ObservableDictionary`2
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<TKey, TValue>>.Contains(KeyValuePair<TKey, TValue>)
  nameWithType: ObservableDictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.Contains(KeyValuePair<TKey, TValue>)
  fullName: SMACD.AppTree.ObservableDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  type: Method
  source:
    remote:
      path: SMACD.AppTree/ObservableDictionary.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
    path: ../SMACD.AppTree/ObservableDictionary.cs
    startLine: 205
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree
  syntax:
    content: bool ICollection<KeyValuePair<TKey, TValue>>.Contains(KeyValuePair<TKey, TValue> item)
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
    return:
      type: System.Boolean
    content.vb: Function System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(item As KeyValuePair(Of TKey, TValue)) As Boolean Implements ICollection(Of KeyValuePair(Of TKey, TValue)).Contains
  overload: SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Contains(System.Collections.Generic.KeyValuePair{{TKey},{TValue}})
  nameWithType.vb: ObservableDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair(Of TKey, TValue))
  fullName.vb: SMACD.AppTree.ObservableDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair(Of TKey, TValue))
- uid: SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  commentId: M:SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  isEii: true
  parent: SMACD.AppTree.ObservableDictionary`2
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<TKey, TValue>>.CopyTo(KeyValuePair<TKey, TValue>[], Int32)
  nameWithType: ObservableDictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.CopyTo(KeyValuePair<TKey, TValue>[], Int32)
  fullName: SMACD.AppTree.ObservableDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue>[], System.Int32)
  type: Method
  source:
    remote:
      path: SMACD.AppTree/ObservableDictionary.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
    path: ../SMACD.AppTree/ObservableDictionary.cs
    startLine: 210
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree
  syntax:
    content: void ICollection<KeyValuePair<TKey, TValue>>.CopyTo(KeyValuePair<TKey, TValue>[] array, int arrayIndex)
    parameters:
    - id: array
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}[]
    - id: arrayIndex
      type: System.Int32
    content.vb: Sub System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(array As KeyValuePair(Of TKey, TValue)(), arrayIndex As Integer) Implements ICollection(Of KeyValuePair(Of TKey, TValue)).CopyTo
  overload: SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.CopyTo(System.Collections.Generic.KeyValuePair{{TKey},{TValue}}[],System.Int32)
  nameWithType.vb: ObservableDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair(Of TKey, TValue)(), Int32)
  fullName.vb: SMACD.AppTree.ObservableDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(System.Collections.Generic.KeyValuePair(Of TKey, TValue)(), System.Int32)
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair(Of TKey, TValue)(), Int32)
- uid: SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Count
  commentId: P:SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Count
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Count
  isEii: true
  parent: SMACD.AppTree.ObservableDictionary`2
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<TKey, TValue>>.Count
  nameWithType: ObservableDictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.Count
  fullName: SMACD.AppTree.ObservableDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Count
  type: Property
  source:
    remote:
      path: SMACD.AppTree/ObservableDictionary.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Count
    path: ../SMACD.AppTree/ObservableDictionary.cs
    startLine: 215
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree
  syntax:
    content: int ICollection<KeyValuePair<TKey, TValue>>.Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Count As Integer Implements ICollection(Of KeyValuePair(Of TKey, TValue)).Count
  overload: SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Count*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Count
  nameWithType.vb: ObservableDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Count
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: SMACD.AppTree.ObservableDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Count
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Count
- uid: SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  commentId: P:SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  isEii: true
  parent: SMACD.AppTree.ObservableDictionary`2
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<TKey, TValue>>.IsReadOnly
  nameWithType: ObservableDictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.IsReadOnly
  fullName: SMACD.AppTree.ObservableDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.IsReadOnly
  type: Property
  source:
    remote:
      path: SMACD.AppTree/ObservableDictionary.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
    path: ../SMACD.AppTree/ObservableDictionary.cs
    startLine: 217
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree
  syntax:
    content: bool ICollection<KeyValuePair<TKey, TValue>>.IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly As Boolean Implements ICollection(Of KeyValuePair(Of TKey, TValue)).IsReadOnly
  overload: SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.IsReadOnly
  nameWithType.vb: ObservableDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: SMACD.AppTree.ObservableDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
- uid: SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  commentId: M:SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  isEii: true
  parent: SMACD.AppTree.ObservableDictionary`2
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<TKey, TValue>>.Remove(KeyValuePair<TKey, TValue>)
  nameWithType: ObservableDictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.Remove(KeyValuePair<TKey, TValue>)
  fullName: SMACD.AppTree.ObservableDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  type: Method
  source:
    remote:
      path: SMACD.AppTree/ObservableDictionary.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
    path: ../SMACD.AppTree/ObservableDictionary.cs
    startLine: 219
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree
  syntax:
    content: bool ICollection<KeyValuePair<TKey, TValue>>.Remove(KeyValuePair<TKey, TValue> item)
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
    return:
      type: System.Boolean
    content.vb: Function System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(item As KeyValuePair(Of TKey, TValue)) As Boolean Implements ICollection(Of KeyValuePair(Of TKey, TValue)).Remove
  overload: SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Remove(System.Collections.Generic.KeyValuePair{{TKey},{TValue}})
  nameWithType.vb: ObservableDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair(Of TKey, TValue))
  fullName.vb: SMACD.AppTree.ObservableDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair(Of TKey, TValue))
- uid: SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
  commentId: M:SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
  isEii: true
  parent: SMACD.AppTree.ObservableDictionary`2
  langs:
  - csharp
  - vb
  name: IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator()
  nameWithType: ObservableDictionary<TKey, TValue>.IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator()
  fullName: SMACD.AppTree.ObservableDictionary<TKey, TValue>.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>.GetEnumerator()
  type: Method
  source:
    remote:
      path: SMACD.AppTree/ObservableDictionary.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator
    path: ../SMACD.AppTree/ObservableDictionary.cs
    startLine: 228
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree
  syntax:
    content: IEnumerator<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
    content.vb: Function System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator As IEnumerator(Of KeyValuePair(Of TKey, TValue)) Implements IEnumerable(Of KeyValuePair(Of TKey, TValue)).GetEnumerator
  overload: SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.GetEnumerator
  nameWithType.vb: ObservableDictionary(Of TKey, TValue).System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator()
  fullName.vb: SMACD.AppTree.ObservableDictionary(Of TKey, TValue).System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator()
- uid: SMACD.AppTree.ObservableDictionary`2.System#Collections#IEnumerable#GetEnumerator
  commentId: M:SMACD.AppTree.ObservableDictionary`2.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: SMACD.AppTree.ObservableDictionary`2
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: ObservableDictionary<TKey, TValue>.IEnumerable.GetEnumerator()
  fullName: SMACD.AppTree.ObservableDictionary<TKey, TValue>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: SMACD.AppTree/ObservableDictionary.cs
      branch: reactions
      repo: https://github.com/anthturner/SMACD.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: ../SMACD.AppTree/ObservableDictionary.cs
    startLine: 233
  assemblies:
  - SMACD.AppTree
  namespace: SMACD.AppTree
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
  overload: SMACD.AppTree.ObservableDictionary`2.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: ObservableDictionary(Of TKey, TValue).System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: SMACD.AppTree.ObservableDictionary(Of TKey, TValue).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
references:
- uid: SMACD.AppTree
  commentId: N:SMACD.AppTree
  name: SMACD.AppTree
  nameWithType: SMACD.AppTree
  fullName: SMACD.AppTree
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  commentId: T:System.Collections.Generic.IDictionary{`0,`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  commentId: T:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<KeyValuePair<TKey, TValue>>
  nameWithType: ICollection<KeyValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  nameWithType.vb: ICollection(Of KeyValuePair(Of TKey, TValue))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: ICollection(Of KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<TKey, TValue>>
  nameWithType: IEnumerable<KeyValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of TKey, TValue))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: IEnumerable(Of KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.Specialized.INotifyCollectionChanged
  commentId: T:System.Collections.Specialized.INotifyCollectionChanged
  parent: System.Collections.Specialized
  isExternal: true
  name: INotifyCollectionChanged
  nameWithType: INotifyCollectionChanged
  fullName: System.Collections.Specialized.INotifyCollectionChanged
- uid: System.ComponentModel.INotifyPropertyChanged
  commentId: T:System.ComponentModel.INotifyPropertyChanged
  parent: System.ComponentModel
  isExternal: true
  name: INotifyPropertyChanged
  nameWithType: INotifyPropertyChanged
  fullName: System.ComponentModel.INotifyPropertyChanged
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Collections.Specialized
  commentId: N:System.Collections.Specialized
  isExternal: true
  name: System.Collections.Specialized
  nameWithType: System.Collections.Specialized
  fullName: System.Collections.Specialized
- uid: System.ComponentModel
  commentId: N:System.ComponentModel
  isExternal: true
  name: System.ComponentModel
  nameWithType: System.ComponentModel
  fullName: System.ComponentModel
- uid: SMACD.AppTree.ObservableDictionary`2.#ctor*
  commentId: Overload:SMACD.AppTree.ObservableDictionary`2.#ctor
  name: ObservableDictionary
  nameWithType: ObservableDictionary<TKey, TValue>.ObservableDictionary
  fullName: SMACD.AppTree.ObservableDictionary<TKey, TValue>.ObservableDictionary
  nameWithType.vb: ObservableDictionary(Of TKey, TValue).ObservableDictionary
  fullName.vb: SMACD.AppTree.ObservableDictionary(Of TKey, TValue).ObservableDictionary
- uid: System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
  commentId: E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
  parent: System.Collections.Specialized.INotifyCollectionChanged
  isExternal: true
  name: CollectionChanged
  nameWithType: INotifyCollectionChanged.CollectionChanged
  fullName: System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
- uid: System.Collections.Specialized.NotifyCollectionChangedEventHandler
  commentId: T:System.Collections.Specialized.NotifyCollectionChangedEventHandler
  parent: System.Collections.Specialized
  isExternal: true
  name: NotifyCollectionChangedEventHandler
  nameWithType: NotifyCollectionChangedEventHandler
  fullName: System.Collections.Specialized.NotifyCollectionChangedEventHandler
- uid: System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  commentId: E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  parent: System.ComponentModel.INotifyPropertyChanged
  isExternal: true
  name: PropertyChanged
  nameWithType: INotifyPropertyChanged.PropertyChanged
  fullName: System.ComponentModel.INotifyPropertyChanged.PropertyChanged
- uid: System.ComponentModel.PropertyChangedEventHandler
  commentId: T:System.ComponentModel.PropertyChangedEventHandler
  parent: System.ComponentModel
  isExternal: true
  name: PropertyChangedEventHandler
  nameWithType: PropertyChangedEventHandler
  fullName: System.ComponentModel.PropertyChangedEventHandler
- uid: SMACD.AppTree.ObservableDictionary`2.RaisePropertyChanged*
  commentId: Overload:SMACD.AppTree.ObservableDictionary`2.RaisePropertyChanged
  name: RaisePropertyChanged
  nameWithType: ObservableDictionary<TKey, TValue>.RaisePropertyChanged
  fullName: SMACD.AppTree.ObservableDictionary<TKey, TValue>.RaisePropertyChanged
  nameWithType.vb: ObservableDictionary(Of TKey, TValue).RaisePropertyChanged
  fullName.vb: SMACD.AppTree.ObservableDictionary(Of TKey, TValue).RaisePropertyChanged
- uid: System.ComponentModel.PropertyChangedEventArgs
  commentId: T:System.ComponentModel.PropertyChangedEventArgs
  parent: System.ComponentModel
  isExternal: true
  name: PropertyChangedEventArgs
  nameWithType: PropertyChangedEventArgs
  fullName: System.ComponentModel.PropertyChangedEventArgs
- uid: SMACD.AppTree.ObservableDictionary`2.Add*
  commentId: Overload:SMACD.AppTree.ObservableDictionary`2.Add
  name: Add
  nameWithType: ObservableDictionary<TKey, TValue>.Add
  fullName: SMACD.AppTree.ObservableDictionary<TKey, TValue>.Add
  nameWithType.vb: ObservableDictionary(Of TKey, TValue).Add
  fullName.vb: SMACD.AppTree.ObservableDictionary(Of TKey, TValue).Add
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}.Add({TKey},{TValue})
  commentId: M:System.Collections.Generic.IDictionary{`0,`1}.Add(`0,`1)
  parent: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IDictionary`2.Add(`0,`1)
  name: Add(TKey, TValue)
  nameWithType: IDictionary<TKey, TValue>.Add(TKey, TValue)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)
  nameWithType.vb: IDictionary(Of TKey, TValue).Add(TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Add(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    nameWithType: IDictionary<TKey, TValue>.Add
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    nameWithType: IDictionary(Of TKey, TValue).Add
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
  commentId: M:System.Collections.Generic.IDictionary`2.Add(`0,`1)
  isExternal: true
  name: Add(TKey, TValue)
  nameWithType: IDictionary<TKey, TValue>.Add(TKey, TValue)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)
  nameWithType.vb: IDictionary(Of TKey, TValue).Add(TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Add(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    nameWithType: IDictionary<TKey, TValue>.Add
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    nameWithType: IDictionary(Of TKey, TValue).Add
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: SMACD.AppTree.ObservableDictionary`2.ContainsKey*
  commentId: Overload:SMACD.AppTree.ObservableDictionary`2.ContainsKey
  name: ContainsKey
  nameWithType: ObservableDictionary<TKey, TValue>.ContainsKey
  fullName: SMACD.AppTree.ObservableDictionary<TKey, TValue>.ContainsKey
  nameWithType.vb: ObservableDictionary(Of TKey, TValue).ContainsKey
  fullName.vb: SMACD.AppTree.ObservableDictionary(Of TKey, TValue).ContainsKey
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}.ContainsKey({TKey})
  commentId: M:System.Collections.Generic.IDictionary{`0,`1}.ContainsKey(`0)
  parent: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  name: ContainsKey(TKey)
  nameWithType: IDictionary<TKey, TValue>.ContainsKey(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)
  nameWithType.vb: IDictionary(Of TKey, TValue).ContainsKey(TKey)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).ContainsKey(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IDictionary<TKey, TValue>.ContainsKey
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IDictionary(Of TKey, TValue).ContainsKey
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  commentId: M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  isExternal: true
  name: ContainsKey(TKey)
  nameWithType: IDictionary<TKey, TValue>.ContainsKey(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)
  nameWithType.vb: IDictionary(Of TKey, TValue).ContainsKey(TKey)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).ContainsKey(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IDictionary<TKey, TValue>.ContainsKey
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    nameWithType: IDictionary(Of TKey, TValue).ContainsKey
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).ContainsKey
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: SMACD.AppTree.ObservableDictionary`2.Keys*
  commentId: Overload:SMACD.AppTree.ObservableDictionary`2.Keys
  name: Keys
  nameWithType: ObservableDictionary<TKey, TValue>.Keys
  fullName: SMACD.AppTree.ObservableDictionary<TKey, TValue>.Keys
  nameWithType.vb: ObservableDictionary(Of TKey, TValue).Keys
  fullName.vb: SMACD.AppTree.ObservableDictionary(Of TKey, TValue).Keys
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}.Keys
  commentId: P:System.Collections.Generic.IDictionary{`0,`1}.Keys
  parent: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IDictionary`2.Keys
  name: Keys
  nameWithType: IDictionary<TKey, TValue>.Keys
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Keys
  nameWithType.vb: IDictionary(Of TKey, TValue).Keys
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Keys
- uid: System.Collections.Generic.ICollection{{TKey}}
  commentId: T:System.Collections.Generic.ICollection{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<TKey>
  nameWithType: ICollection<TKey>
  fullName: System.Collections.Generic.ICollection<TKey>
  nameWithType.vb: ICollection(Of TKey)
  fullName.vb: System.Collections.Generic.ICollection(Of TKey)
  name.vb: ICollection(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.Keys
  commentId: P:System.Collections.Generic.IDictionary`2.Keys
  isExternal: true
  name: Keys
  nameWithType: IDictionary<TKey, TValue>.Keys
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Keys
  nameWithType.vb: IDictionary(Of TKey, TValue).Keys
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Keys
- uid: SMACD.AppTree.ObservableDictionary`2.Remove*
  commentId: Overload:SMACD.AppTree.ObservableDictionary`2.Remove
  name: Remove
  nameWithType: ObservableDictionary<TKey, TValue>.Remove
  fullName: SMACD.AppTree.ObservableDictionary<TKey, TValue>.Remove
  nameWithType.vb: ObservableDictionary(Of TKey, TValue).Remove
  fullName.vb: SMACD.AppTree.ObservableDictionary(Of TKey, TValue).Remove
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}.Remove({TKey})
  commentId: M:System.Collections.Generic.IDictionary{`0,`1}.Remove(`0)
  parent: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IDictionary`2.Remove(`0)
  name: Remove(TKey)
  nameWithType: IDictionary<TKey, TValue>.Remove(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Remove(TKey)
  nameWithType.vb: IDictionary(Of TKey, TValue).Remove(TKey)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Remove(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    nameWithType: IDictionary<TKey, TValue>.Remove
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    nameWithType: IDictionary(Of TKey, TValue).Remove
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.Remove(`0)
  commentId: M:System.Collections.Generic.IDictionary`2.Remove(`0)
  isExternal: true
  name: Remove(TKey)
  nameWithType: IDictionary<TKey, TValue>.Remove(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Remove(TKey)
  nameWithType.vb: IDictionary(Of TKey, TValue).Remove(TKey)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Remove(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    nameWithType: IDictionary<TKey, TValue>.Remove
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    nameWithType: IDictionary(Of TKey, TValue).Remove
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: SMACD.AppTree.ObservableDictionary`2.TryGetValue*
  commentId: Overload:SMACD.AppTree.ObservableDictionary`2.TryGetValue
  name: TryGetValue
  nameWithType: ObservableDictionary<TKey, TValue>.TryGetValue
  fullName: SMACD.AppTree.ObservableDictionary<TKey, TValue>.TryGetValue
  nameWithType.vb: ObservableDictionary(Of TKey, TValue).TryGetValue
  fullName.vb: SMACD.AppTree.ObservableDictionary(Of TKey, TValue).TryGetValue
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}.TryGetValue({TKey},{TValue}@)
  commentId: M:System.Collections.Generic.IDictionary{`0,`1}.TryGetValue(`0,`1@)
  parent: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  name: TryGetValue(TKey, TValue)
  nameWithType: IDictionary<TKey, TValue>.TryGetValue(TKey, TValue)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.TryGetValue(TKey, TValue)
  nameWithType.vb: IDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: IDictionary<TKey, TValue>.TryGetValue
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: IDictionary(Of TKey, TValue).TryGetValue
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  commentId: M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  isExternal: true
  name: TryGetValue(TKey, TValue)
  nameWithType: IDictionary<TKey, TValue>.TryGetValue(TKey, TValue)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.TryGetValue(TKey, TValue)
  nameWithType.vb: IDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: IDictionary<TKey, TValue>.TryGetValue
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    nameWithType: IDictionary(Of TKey, TValue).TryGetValue
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).TryGetValue
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: SMACD.AppTree.ObservableDictionary`2.Values*
  commentId: Overload:SMACD.AppTree.ObservableDictionary`2.Values
  name: Values
  nameWithType: ObservableDictionary<TKey, TValue>.Values
  fullName: SMACD.AppTree.ObservableDictionary<TKey, TValue>.Values
  nameWithType.vb: ObservableDictionary(Of TKey, TValue).Values
  fullName.vb: SMACD.AppTree.ObservableDictionary(Of TKey, TValue).Values
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}.Values
  commentId: P:System.Collections.Generic.IDictionary{`0,`1}.Values
  parent: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IDictionary`2.Values
  name: Values
  nameWithType: IDictionary<TKey, TValue>.Values
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Values
  nameWithType.vb: IDictionary(Of TKey, TValue).Values
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Values
- uid: System.Collections.Generic.ICollection{{TValue}}
  commentId: T:System.Collections.Generic.ICollection{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<TValue>
  nameWithType: ICollection<TValue>
  fullName: System.Collections.Generic.ICollection<TValue>
  nameWithType.vb: ICollection(Of TValue)
  fullName.vb: System.Collections.Generic.ICollection(Of TValue)
  name.vb: ICollection(Of TValue)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.Values
  commentId: P:System.Collections.Generic.IDictionary`2.Values
  isExternal: true
  name: Values
  nameWithType: IDictionary<TKey, TValue>.Values
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Values
  nameWithType.vb: IDictionary(Of TKey, TValue).Values
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Values
- uid: SMACD.AppTree.ObservableDictionary`2.Item*
  commentId: Overload:SMACD.AppTree.ObservableDictionary`2.Item
  name: Item
  nameWithType: ObservableDictionary<TKey, TValue>.Item
  fullName: SMACD.AppTree.ObservableDictionary<TKey, TValue>.Item
  nameWithType.vb: ObservableDictionary(Of TKey, TValue).Item
  fullName.vb: SMACD.AppTree.ObservableDictionary(Of TKey, TValue).Item
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}.Item({TKey})
  commentId: P:System.Collections.Generic.IDictionary{`0,`1}.Item(`0)
  parent: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IDictionary`2.Item(`0)
  name: Item[TKey]
  nameWithType: IDictionary<TKey, TValue>.Item[TKey]
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Item[TKey]
  nameWithType.vb: IDictionary(Of TKey, TValue).Item(TKey)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Item(TKey)
  name.vb: Item(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    nameWithType: IDictionary<TKey, TValue>.Item
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    nameWithType: IDictionary(Of TKey, TValue).Item
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.Item(`0)
  commentId: P:System.Collections.Generic.IDictionary`2.Item(`0)
  isExternal: true
  name: Item[TKey]
  nameWithType: IDictionary<TKey, TValue>.Item[TKey]
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Item[TKey]
  nameWithType.vb: IDictionary(Of TKey, TValue).Item(TKey)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Item(TKey)
  name.vb: Item(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    nameWithType: IDictionary<TKey, TValue>.Item
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    nameWithType: IDictionary(Of TKey, TValue).Item
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: )
    nameWithType: )
    fullName: )
- uid: SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add*
  commentId: Overload:SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add
  name: ICollection<KeyValuePair<TKey, TValue>>.Add
  nameWithType: ObservableDictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.Add
  fullName: SMACD.AppTree.ObservableDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Add
  nameWithType.vb: ObservableDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
  fullName.vb: SMACD.AppTree.ObservableDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Add(System.Collections.Generic.KeyValuePair{{TKey},{TValue}})
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.Add(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(KeyValuePair<TKey, TValue>)
  nameWithType: ICollection<KeyValuePair<TKey, TValue>>.Add(KeyValuePair<TKey, TValue>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Add(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  nameWithType.vb: ICollection(Of KeyValuePair(Of TKey, TValue)).Add(KeyValuePair(Of TKey, TValue))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Add(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: Add(KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<KeyValuePair<TKey, TValue>>.Add
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of KeyValuePair(Of TKey, TValue)).Add
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
  commentId: T:System.Collections.Generic.KeyValuePair{`0,`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.KeyValuePair`2
  name: KeyValuePair<TKey, TValue>
  nameWithType: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  nameWithType.vb: KeyValuePair(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair`2
  commentId: T:System.Collections.Generic.KeyValuePair`2
  isExternal: true
  name: KeyValuePair<TKey, TValue>
  nameWithType: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  nameWithType.vb: KeyValuePair(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Clear*
  commentId: Overload:SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Clear
  name: ICollection<KeyValuePair<TKey, TValue>>.Clear
  nameWithType: ObservableDictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.Clear
  fullName: SMACD.AppTree.ObservableDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Clear
  nameWithType.vb: ObservableDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Clear
  fullName.vb: SMACD.AppTree.ObservableDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Clear
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Clear
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Clear
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.Clear
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<KeyValuePair<TKey, TValue>>.Clear()
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Clear()
  nameWithType.vb: ICollection(Of KeyValuePair(Of TKey, TValue)).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<KeyValuePair<TKey, TValue>>.Clear
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of KeyValuePair(Of TKey, TValue)).Clear
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains*
  commentId: Overload:SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains
  name: ICollection<KeyValuePair<TKey, TValue>>.Contains
  nameWithType: ObservableDictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.Contains
  fullName: SMACD.AppTree.ObservableDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Contains
  nameWithType.vb: ObservableDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
  fullName.vb: SMACD.AppTree.ObservableDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Contains(System.Collections.Generic.KeyValuePair{{TKey},{TValue}})
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(KeyValuePair<TKey, TValue>)
  nameWithType: ICollection<KeyValuePair<TKey, TValue>>.Contains(KeyValuePair<TKey, TValue>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  nameWithType.vb: ICollection(Of KeyValuePair(Of TKey, TValue)).Contains(KeyValuePair(Of TKey, TValue))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Contains(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: Contains(KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<KeyValuePair<TKey, TValue>>.Contains
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of KeyValuePair(Of TKey, TValue)).Contains
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo*
  commentId: Overload:SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo
  name: ICollection<KeyValuePair<TKey, TValue>>.CopyTo
  nameWithType: ObservableDictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.CopyTo
  fullName: SMACD.AppTree.ObservableDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.CopyTo
  nameWithType.vb: ObservableDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
  fullName.vb: SMACD.AppTree.ObservableDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.CopyTo(System.Collections.Generic.KeyValuePair{{TKey},{TValue}}[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(KeyValuePair<TKey, TValue>[], Int32)
  nameWithType: ICollection<KeyValuePair<TKey, TValue>>.CopyTo(KeyValuePair<TKey, TValue>[], Int32)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue>[], System.Int32)
  nameWithType.vb: ICollection(Of KeyValuePair(Of TKey, TValue)).CopyTo(KeyValuePair(Of TKey, TValue)(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).CopyTo(System.Collections.Generic.KeyValuePair(Of TKey, TValue)(), System.Int32)
  name.vb: CopyTo(KeyValuePair(Of TKey, TValue)(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<KeyValuePair<TKey, TValue>>.CopyTo
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of KeyValuePair(Of TKey, TValue)).CopyTo
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}[]
  isExternal: true
  name: KeyValuePair<TKey, TValue>[]
  nameWithType: KeyValuePair<TKey, TValue>[]
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>[]
  nameWithType.vb: KeyValuePair(Of TKey, TValue)()
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)()
  name.vb: KeyValuePair(Of TKey, TValue)()
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Count*
  commentId: Overload:SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Count
  name: ICollection<KeyValuePair<TKey, TValue>>.Count
  nameWithType: ObservableDictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.Count
  fullName: SMACD.AppTree.ObservableDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Count
  nameWithType.vb: ObservableDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Count
  fullName.vb: SMACD.AppTree.ObservableDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Count
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Count
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Count
  commentId: P:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.Count
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<KeyValuePair<TKey, TValue>>.Count
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Count
  nameWithType.vb: ICollection(Of KeyValuePair(Of TKey, TValue)).Count
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Count
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly*
  commentId: Overload:SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  name: ICollection<KeyValuePair<TKey, TValue>>.IsReadOnly
  nameWithType: ObservableDictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.IsReadOnly
  fullName: SMACD.AppTree.ObservableDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.IsReadOnly
  nameWithType.vb: ObservableDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
  fullName.vb: SMACD.AppTree.ObservableDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.IsReadOnly
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ICollection<KeyValuePair<TKey, TValue>>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.IsReadOnly
  nameWithType.vb: ICollection(Of KeyValuePair(Of TKey, TValue)).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).IsReadOnly
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove*
  commentId: Overload:SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove
  name: ICollection<KeyValuePair<TKey, TValue>>.Remove
  nameWithType: ObservableDictionary<TKey, TValue>.ICollection<KeyValuePair<TKey, TValue>>.Remove
  fullName: SMACD.AppTree.ObservableDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Remove
  nameWithType.vb: ObservableDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
  fullName.vb: SMACD.AppTree.ObservableDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Remove(System.Collections.Generic.KeyValuePair{{TKey},{TValue}})
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,`1}}.Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(KeyValuePair<TKey, TValue>)
  nameWithType: ICollection<KeyValuePair<TKey, TValue>>.Remove(KeyValuePair<TKey, TValue>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  nameWithType.vb: ICollection(Of KeyValuePair(Of TKey, TValue)).Remove(KeyValuePair(Of TKey, TValue))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Remove(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: Remove(KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<KeyValuePair<TKey, TValue>>.Remove
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of KeyValuePair(Of TKey, TValue)).Remove
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator*
  commentId: Overload:SMACD.AppTree.ObservableDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator
  name: IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator
  nameWithType: ObservableDictionary<TKey, TValue>.IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator
  fullName: SMACD.AppTree.ObservableDictionary<TKey, TValue>.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>.GetEnumerator
  nameWithType.vb: ObservableDictionary(Of TKey, TValue).System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator
  fullName.vb: SMACD.AppTree.ObservableDictionary(Of TKey, TValue).System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator
  name.vb: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of TKey, TValue)).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of KeyValuePair(Of TKey, TValue)).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  commentId: T:System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{`0,`1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<KeyValuePair<TKey, TValue>>
  nameWithType: IEnumerator<KeyValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  nameWithType.vb: IEnumerator(Of KeyValuePair(Of TKey, TValue))
  fullName.vb: System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: IEnumerator(Of KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: SMACD.AppTree.ObservableDictionary`2.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:SMACD.AppTree.ObservableDictionary`2.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator
  nameWithType: ObservableDictionary<TKey, TValue>.IEnumerable.GetEnumerator
  fullName: SMACD.AppTree.ObservableDictionary<TKey, TValue>.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: ObservableDictionary(Of TKey, TValue).System.Collections.IEnumerable.GetEnumerator
  fullName.vb: SMACD.AppTree.ObservableDictionary(Of TKey, TValue).System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
