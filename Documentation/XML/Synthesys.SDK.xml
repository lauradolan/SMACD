<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Synthesys.SDK</name>
    </assembly>
    <members>
        <member name="T:Synthesys.SDK.Attributes.ConfigurableAttribute">
             <summary>
             The ConfigurableAttribute specifies that the decorated property is configurable when the Extension is queued.
            
             A Dictionary{string,string} is used to configure each Extensions, where the key is the string name of the Configurable property, and the value is the string representation of the property's value. When the framework invokes this Extension, it will cast the string value to the given Type.
             </summary>
        </member>
        <member name="M:Synthesys.SDK.Attributes.ConfigurableAttribute.#ctor(System.String)">
            <summary>
            Specify that the decorated property is configurable when the Extension is queued
            </summary>
            <summary>
            Items marked with this Attribute can be configured when the Extension is executed.
            </summary>
            <remarks>Automatically populated by caller</remarks>
            <param name="name">Name of Configurable property (auto-generated from caller)</param>
        </member>
        <member name="P:Synthesys.SDK.Attributes.ConfigurableAttribute.Name">
            <summary>
            Name of the Configurable property
            </summary>
        </member>
        <member name="T:Synthesys.SDK.Attributes.ExtensionAttribute">
            <summary>
            The ExtensionAttribute specifies the unique name used to address the Extension within the system and metadata about the Extension and author
            </summary>
        </member>
        <member name="M:Synthesys.SDK.Attributes.ExtensionAttribute.#ctor(System.String)">
            <summary>
            Specify that this class implements an Extension
            </summary>
            <param name="extensionId">System-unique string to identify this Extension in logs and when being manually queued</param>
        </member>
        <member name="P:Synthesys.SDK.Attributes.ExtensionAttribute.ExtensionIdentifier">
            <summary>
            System-unique string to identify this Extension in logs and when being manually queued. Once this is set, changing it will break data objects dependent on this Extension.
            </summary>
        </member>
        <member name="P:Synthesys.SDK.Attributes.ExtensionAttribute.Name">
            <summary>
            Display-friendly name of the Extension
            </summary>
        </member>
        <member name="P:Synthesys.SDK.Attributes.ExtensionAttribute.Author">
            <summary>
            Person or people who developed the Extension
            </summary>
        </member>
        <member name="P:Synthesys.SDK.Attributes.ExtensionAttribute.Version">
            <summary>
            Version of the Extension
            </summary>
        </member>
        <member name="P:Synthesys.SDK.Attributes.ExtensionAttribute.VersionObj">
            <summary>
            Version of the Extension, as a Version object
            </summary>
        </member>
        <member name="P:Synthesys.SDK.Attributes.ExtensionAttribute.Website">
            <summary>
            Location where more information and updates about this Extension can be found
            </summary>
        </member>
        <member name="P:Synthesys.SDK.Attributes.ExtensionAttribute.Description">
            <summary>
            How and what the Extension accomplishes in more detail
            </summary>
        </member>
        <member name="T:Synthesys.SDK.Attributes.TriggeredByAttribute">
             <summary>
             The TriggeredByAttribute specifies that the Extension is added to the end of the Task Queue when a certain event occurs.
            
             This Attribute can be used multiple times on the same Extension.
             </summary>
        </member>
        <member name="M:Synthesys.SDK.Attributes.TriggeredByAttribute.#ctor(System.String,Synthesys.SDK.Triggers.ArtifactTrigger)">
            <summary>
            Specify that the Extension is added to the end of the Task Queue when an Artifact is created or changed
            </summary>
            <param name="artifactPath">Artifact path</param>
            <param name="trigger">Trigger event</param>
        </member>
        <member name="M:Synthesys.SDK.Attributes.TriggeredByAttribute.#ctor(System.String,Synthesys.SDK.Triggers.ExtensionConditionTrigger,System.Boolean)">
            <summary>
            Specify that the Extension is added to the end of the Task Queue when an Extension completes
            </summary>
            <param name="extensionIdentifier">Extension identifier</param>
            <param name="trigger">Triggering execution status</param>
        </member>
        <member name="M:Synthesys.SDK.Attributes.TriggeredByAttribute.#ctor(Synthesys.SDK.Triggers.SystemEvents)">
            <summary>
            Specify that the Extension is added to the end of the Task Queue when a system-level event occurs
            </summary>
            <param name="trigger">System event Trigger</param>
        </member>
        <member name="P:Synthesys.SDK.Attributes.TriggeredByAttribute.Trigger">
            <summary>
            Description of Trigger causing the Extension to be queued
            </summary>
        </member>
        <member name="T:Synthesys.SDK.Capabilities.ICanQueueTasks">
            <summary>
            ICanQueueTasks indicates that the Extension needs to interface with the Task Queue
            </summary>
        </member>
        <member name="P:Synthesys.SDK.Capabilities.ICanQueueTasks.Tasks">
            <summary>
            Framework-populated reference to the Task Queue
            </summary>
        </member>
        <member name="T:Synthesys.SDK.Capabilities.IOperateOnHost">
            <summary>
            IOperateOnHost indicates that the Extension acts upon a single host
            </summary>
        </member>
        <member name="P:Synthesys.SDK.Capabilities.IOperateOnHost.Host">
            <summary>
            Framework-populated reference to the Host Artifact
            </summary>
        </member>
        <member name="T:Synthesys.SDK.Capabilities.IOperateOnHostPort">
            <summary>
            ICanQueueTasks indicates that the Extension acts upon an unknown service (by port)
            </summary>
        </member>
        <member name="P:Synthesys.SDK.Capabilities.IOperateOnHostPort.Port">
            <summary>
            Framework-populated reference to the ServicePort Artifact
            </summary>
        </member>
        <member name="T:Synthesys.SDK.Capabilities.IOperateOnHttpService">
            <summary>
            IOperateOnHttpService indicates that the Extension acts upon a web server
            </summary>
        </member>
        <member name="P:Synthesys.SDK.Capabilities.IOperateOnHttpService.HttpService">
            <summary>
            Framework-populated reference to the HttpServicePort Artifact
            </summary>
        </member>
        <member name="T:Synthesys.SDK.Capabilities.IOperateOnUrl">
            <summary>
            IOperateOnUrl indicates that the Extension acts upon a URL
            </summary>
        </member>
        <member name="P:Synthesys.SDK.Capabilities.IOperateOnUrl.Url">
            <summary>
            Framework-populated reference to the URL artifact
            </summary>
        </member>
        <member name="T:Synthesys.SDK.Capabilities.IUnderstandProjectInformation">
            <summary>
            IUnderstandProjectInformation indicates that the Extension needs to know what business object is related to its instance.
            </summary>
        </member>
        <member name="P:Synthesys.SDK.Capabilities.IUnderstandProjectInformation.ProjectPointer">
            <summary>
            Framework-populated reference to the project information
            </summary>
        </member>
        <member name="T:Synthesys.SDK.ExecutionWrapper">
            <summary>
                Wraps the execution of external (system) tasks run by a plugin
            </summary>
        </member>
        <member name="F:Synthesys.SDK.ExecutionWrapper.Maps">
            <summary>
                A collection of maps between ManagedThreadId (from ExecutionWrapper) and TaskId (from plugin)
            </summary>
        </member>
        <member name="P:Synthesys.SDK.ExecutionWrapper.RuntimeTask">
            <summary>
                Task wrapping this execution
            </summary>
        </member>
        <member name="P:Synthesys.SDK.ExecutionWrapper.Command">
            <summary>
                Command being executed
            </summary>
        </member>
        <member name="P:Synthesys.SDK.ExecutionWrapper.ExecutionTime">
            <summary>
                Duration of last execution
            </summary>
        </member>
        <member name="P:Synthesys.SDK.ExecutionWrapper.Process">
            <summary>
                Process object executing this command
            </summary>
        </member>
        <member name="P:Synthesys.SDK.ExecutionWrapper.StdOut">
            <summary>
                Standard output from last execution
            </summary>
        </member>
        <member name="P:Synthesys.SDK.ExecutionWrapper.StdErr">
            <summary>
                Standard error from last execution
            </summary>
        </member>
        <member name="P:Synthesys.SDK.ExecutionWrapper.FailedToExecute">
            <summary>
                If this process failed to execute
            </summary>
        </member>
        <member name="E:Synthesys.SDK.ExecutionWrapper.StandardOutputDataReceived">
            <summary>
                Fired when data is written to STDOUT
            </summary>
        </member>
        <member name="E:Synthesys.SDK.ExecutionWrapper.StandardErrorDataReceived">
            <summary>
                Fired when data is written to STDERR
            </summary>
        </member>
        <member name="M:Synthesys.SDK.ExecutionWrapper.Start">
            <summary>
                Execute the command, wrapped by a Task
            </summary>
            <returns></returns>
        </member>
        <member name="P:Synthesys.SDK.ExtensionReport.TaskDescriptor">
            <summary>
                Task descriptor generating the Extension instance
            </summary>
        </member>
        <member name="P:Synthesys.SDK.ExtensionReport.Runtime">
            <summary>
                How long the Extension took to execute
            </summary>
        </member>
        <member name="P:Synthesys.SDK.ExtensionReport.RawPointsScored">
            <summary>
                Number of points scored on the Extension's own scale
            </summary>
        </member>
        <member name="P:Synthesys.SDK.ExtensionReport.MaximumPointsAvailable">
            <summary>
                Maximum number of points available on the Extension's own scale
            </summary>
        </member>
        <member name="P:Synthesys.SDK.ExtensionReport.AdjustedScore">
            <summary>
                Adjusted score out of 1.0
            </summary>
        </member>
        <member name="M:Synthesys.SDK.ExtensionReport.Blank">
            <summary>
                Create a blank report
            </summary>
            <returns></returns>
        </member>
        <member name="M:Synthesys.SDK.ExtensionReport.Error(System.Exception)">
            <summary>
                Create an error-containing report
            </summary>
            <param name="ex">Exception generated</param>
            <returns></returns>
        </member>
        <member name="M:Synthesys.SDK.ExtensionReport.GetReportContent">
            <summary>
                Generate a string representative of the report object's content
            </summary>
            <returns></returns>
        </member>
        <member name="M:Synthesys.SDK.ExtensionReport.FinalizeReport">
            <summary>
                Finalize report by disconnecting TaskDescriptor from recursive loops
            </summary>
            <returns></returns>
        </member>
        <member name="T:Synthesys.SDK.Extensions.ActionExtension">
            <summary>
            An ActionExtension is generated from known information about a system. ActionExtensions are imported into the Artifact Tree in the same way as any discovered data. The intent is for the framework to use the information generated by ActionExtensions to create ReactionExtensions.
            </summary>
        </member>
        <member name="M:Synthesys.SDK.Extensions.ActionExtension.Act">
            <summary>
            This method is called when the ActionExtension is popped from the Task Queue and executed
            </summary>
            <returns></returns>
        </member>
        <member name="T:Synthesys.SDK.Extensions.Extension">
            <summary>
            An Extension is some function, which can either be an Action or a Reaction, which executes with the intent of populating the Artifact Tree with additional data.
            </summary>
        </member>
        <member name="M:Synthesys.SDK.Extensions.Extension.Initialize">
            <summary>
                Initialize Extension; called on instantiation
            </summary>
        </member>
        <member name="M:Synthesys.SDK.Extensions.Extension.ValidateEnvironmentReadiness">
             <summary>
             Called when the Extension is loaded, to check if the runtime environment supports what the Extension requires to execute.
            
             Any application validation/dependency checks should happen here, but it is not required.
             </summary>
             <returns></returns>
        </member>
        <member name="T:Synthesys.SDK.Extensions.ReactionExtension">
             A ReactionExtension is added to the end of the Task Queue when some given event occurs during the scan process. The concept behind ReactionExtensions is to enrich the Artifact Tree and, in doing so, trigger other ReactionExtensions.
            
             ReactionExtensions can be triggered by:
             <list type="bullet">
             <item><description>ActionExtension completes or fails</description></item>
             <item><description>Artifact Tree element has a child added to it</description></item>
             <item><description>Artifact Tree element changes</description></item>
             <item><description>Artifact Tree element is created</description></item>
             <item><description>Task is started by the Task Queue</description></item>
             <item><description>Task is completed</description></item>
             <item><description>Task is added to the Task Queue</description></item>
             <item><description>Task Queue is completely drained</description></item>
             </list>
        </member>
        <member name="M:Synthesys.SDK.Extensions.ReactionExtension.React(Synthesys.SDK.Triggers.TriggerDescriptor)">
            <summary>
            This method is called when the ReactionExtension is popped from the Task Queue and executed
            </summary>
            <param name="trigger">Trigger causing the ReactionExtension to fire</param>
            <returns></returns>
        </member>
        <member name="F:Synthesys.SDK.HostCommands.HostCommand.Maps">
            <summary>
                A collection of maps between ManagedThreadId (from ExecutionWrapper) and TaskId (from plugin)
            </summary>
        </member>
        <member name="P:Synthesys.SDK.HostCommands.HostCommand.RuntimeTask">
            <summary>
                Task wrapping this execution
            </summary>
        </member>
        <member name="P:Synthesys.SDK.HostCommands.HostCommand.ExecutionTime">
            <summary>
                Duration of last execution
            </summary>
        </member>
        <member name="P:Synthesys.SDK.HostCommands.HostCommand.Process">
            <summary>
                Process object executing this command
            </summary>
        </member>
        <member name="P:Synthesys.SDK.HostCommands.HostCommand.CaptureStdOut">
            <summary>
                If STDOUT should be captured and stored in StdOut property
            </summary>
        </member>
        <member name="P:Synthesys.SDK.HostCommands.HostCommand.CaptureStdErr">
            <summary>
                If STDERR should be captured and stored in StdErr property
            </summary>
        </member>
        <member name="P:Synthesys.SDK.HostCommands.HostCommand.StdOut">
            <summary>
                Standard output from last execution
            </summary>
        </member>
        <member name="P:Synthesys.SDK.HostCommands.HostCommand.StdErr">
            <summary>
                Standard error from last execution
            </summary>
        </member>
        <member name="P:Synthesys.SDK.HostCommands.HostCommand.FailedToExecute">
            <summary>
                If this process failed to execute
            </summary>
        </member>
        <member name="E:Synthesys.SDK.HostCommands.HostCommand.StandardOutputDataReceived">
            <summary>
                Fired when data is written to STDOUT
            </summary>
        </member>
        <member name="E:Synthesys.SDK.HostCommands.HostCommand.StandardErrorDataReceived">
            <summary>
                Fired when data is written to STDERR
            </summary>
        </member>
        <member name="M:Synthesys.SDK.HostCommands.NativeHostCommand.Start">
            <summary>
                Execute the command, wrapped by a Task
            </summary>
            <returns></returns>
        </member>
        <member name="P:Synthesys.SDK.ITaskToolbox.IsRunning">
            <summary>
                If the Task queue is running
            </summary>
        </member>
        <member name="P:Synthesys.SDK.ITaskToolbox.Count">
            <summary>
                Number of queued and running Tasks
            </summary>
        </member>
        <member name="E:Synthesys.SDK.ITaskToolbox.TaskCompleted">
            <summary>
                Fired when Task is completed
            </summary>
        </member>
        <member name="E:Synthesys.SDK.ITaskToolbox.TaskFaulted">
            <summary>
                Fired when Task is faulted (errored)
            </summary>
        </member>
        <member name="E:Synthesys.SDK.ITaskToolbox.TaskStarted">
            <summary>
                Fired when Task is started
            </summary>
        </member>
        <member name="M:Synthesys.SDK.ITaskToolbox.Enqueue(Synthesys.SDK.TaskDescriptor)">
            <summary>
                Enqueue a new Task
            </summary>
            <param name="descriptor">Task Descriptor for new Task</param>
            <returns></returns>
        </member>
        <member name="M:Synthesys.SDK.LogExtensions.SHA1(System.String)">
            <summary>
                Calculate SHA1 hash of a string (not cryptographically safe operation!)
            </summary>
            <param name="str">String to hash</param>
            <returns></returns>
        </member>
        <member name="T:Synthesys.SDK.TaskDescriptor">
            <summary>
                Task descriptor used to submit a Task to be run
            </summary>
        </member>
        <member name="P:Synthesys.SDK.TaskDescriptor.ActionId">
            <summary>
                Action identifier
            </summary>
        </member>
        <member name="P:Synthesys.SDK.TaskDescriptor.Options">
            <summary>
                Options to be configured on Action
            </summary>
        </member>
        <member name="P:Synthesys.SDK.TaskDescriptor.ArtifactRoot">
            <summary>
                Root Artifact under which data will be placed
            </summary>
        </member>
        <member name="P:Synthesys.SDK.TaskDescriptor.ProjectPointer">
            <summary>
                Pointer to business elements (project elements)
            </summary>
        </member>
        <member name="T:Synthesys.SDK.ResultProvidingTaskDescriptor">
            <summary>
                Task descriptor that includes a Result from a Task
            </summary>
        </member>
        <member name="P:Synthesys.SDK.ResultProvidingTaskDescriptor.Result">
            <summary>
                Action-specific Report generated by Action
            </summary>
        </member>
        <member name="M:Synthesys.SDK.Triggers.ArtifactTriggerDescriptor.#ctor(System.String,Synthesys.SDK.Triggers.ArtifactTrigger)">
            <summary>
                Create a descriptor for a trigger activated by an operation on an Artifact
            </summary>
            <param name="artifactPath">Artifact path</param>
            <param name="trigger">Triggering operation</param>
        </member>
        <member name="P:Synthesys.SDK.Triggers.ArtifactTriggerDescriptor.ArtifactPath">
            <summary>
                Path to Artifact
            </summary>
        </member>
        <member name="P:Synthesys.SDK.Triggers.ArtifactTriggerDescriptor.Trigger">
            <summary>
                Artifact operation causing trigger
            </summary>
        </member>
        <member name="M:Synthesys.SDK.Triggers.ExtensionTriggerDescriptor.#ctor(System.String,Synthesys.SDK.Triggers.ExtensionConditionTrigger)">
            <summary>
                Create a descriptor for a trigger activated by execution of an Extension
            </summary>
            <param name="extensionIdentifier">Artifact path</param>
            <param name="trigger">Triggering operation</param>
        </member>
        <member name="M:Synthesys.SDK.Triggers.SystemEventTriggerDescriptor.#ctor(Synthesys.SDK.Triggers.SystemEvents)">
            <summary>
                Create a descriptor for a trigger activated by a System Event
            </summary>
            <param name="systemEvent">Triggering system event</param>
        </member>
        <member name="P:Synthesys.SDK.Triggers.SystemEventTriggerDescriptor.SystemEvent">
            <summary>
                System event trigger
            </summary>
        </member>
        <member name="M:Synthesys.SDK.Triggers.TriggerDescriptor.ArtifactTrigger(System.String,Synthesys.SDK.Triggers.ArtifactTrigger)">
            <summary>
                Create an artifact-based trigger
            </summary>
            <param name="artifactPath">Artifact path</param>
            <param name="trigger">Trigger operation</param>
            <returns></returns>
        </member>
        <member name="M:Synthesys.SDK.Triggers.TriggerDescriptor.ExtensionTrigger(System.String,Synthesys.SDK.Triggers.ExtensionConditionTrigger)">
            <summary>
                Create an extension-based trigger
            </summary>
            <param name="extensionIdentifier">Extension identifier</param>
            <param name="trigger">Extension execution condition</param>
            <returns></returns>
        </member>
        <member name="M:Synthesys.SDK.Triggers.TriggerDescriptor.SystemEventTrigger(Synthesys.SDK.Triggers.SystemEvents)">
            <summary>
                Create a trigger activated by a SystemEvent
            </summary>
            <param name="trigger">System event</param>
            <returns></returns>
        </member>
        <member name="M:Synthesys.SDK.Triggers.TriggerDescriptor.PathMatches(SMACD.Artifacts.Artifact,System.String)">
            <summary>
                Check if the Artifact's path matches the given path
            </summary>
            <param name="triggeringArtifact">Artifact</param>
            <param name="path">Path to check against</param>
            <returns></returns>
        </member>
        <member name="M:Synthesys.SDK.Triggers.TriggerDescriptor.GeneratePath(SMACD.Artifacts.Artifact)">
            <summary>
                Generate the path for a given artifact
            </summary>
            <param name="artifact">Artifact</param>
            <returns></returns>
        </member>
    </members>
</doc>
