<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Synthesys.SDK</name>
    </assembly>
    <members>
        <member name="T:Synthesys.SDK.Attributes.ConfigurableAttribute">
            <summary>
                The ConfigurableAttribute specifies that the decorated property is configurable when the Extension is queued.
                A Dictionary{string,string} is used to configure each Extensions, where the key is the string name of the
                Configurable property, and the value is the string representation of the property's value. When the framework
                invokes this Extension, it will cast the string value to the given Type.
            </summary>
        </member>
        <member name="M:Synthesys.SDK.Attributes.ConfigurableAttribute.#ctor(System.String)">
            <summary>
                Specify that the decorated property is configurable when the Extension is queued
            </summary>
            <summary>
                Items marked with this Attribute can be configured when the Extension is executed.
            </summary>
            <remarks>Automatically populated by caller</remarks>
            <param name="name">Name of Configurable property (auto-generated from caller)</param>
        </member>
        <member name="P:Synthesys.SDK.Attributes.ConfigurableAttribute.Name">
            <summary>
                Name of the Configurable property
            </summary>
        </member>
        <member name="T:Synthesys.SDK.Attributes.ExtensionAttribute">
            <summary>
                The ExtensionAttribute specifies the unique name used to address the Extension within the system and metadata about
                the Extension and author
            </summary>
        </member>
        <member name="M:Synthesys.SDK.Attributes.ExtensionAttribute.#ctor(System.String)">
            <summary>
                Specify that this class implements an Extension
            </summary>
            <param name="extensionId">System-unique string to identify this Extension in logs and when being manually queued</param>
        </member>
        <member name="P:Synthesys.SDK.Attributes.ExtensionAttribute.ExtensionIdentifier">
            <summary>
                System-unique string to identify this Extension in logs and when being manually queued. Once this is set, changing
                it will break data objects dependent on this Extension.
            </summary>
        </member>
        <member name="P:Synthesys.SDK.Attributes.ExtensionAttribute.Name">
            <summary>
                Display-friendly name of the Extension
            </summary>
        </member>
        <member name="P:Synthesys.SDK.Attributes.ExtensionAttribute.Author">
            <summary>
                Person or people who developed the Extension
            </summary>
        </member>
        <member name="P:Synthesys.SDK.Attributes.ExtensionAttribute.Version">
            <summary>
                Version of the Extension
            </summary>
        </member>
        <member name="P:Synthesys.SDK.Attributes.ExtensionAttribute.VersionObj">
            <summary>
                Version of the Extension, as a Version object
            </summary>
        </member>
        <member name="P:Synthesys.SDK.Attributes.ExtensionAttribute.Website">
            <summary>
                Location where more information and updates about this Extension can be found
            </summary>
        </member>
        <member name="P:Synthesys.SDK.Attributes.ExtensionAttribute.Description">
            <summary>
                How and what the Extension accomplishes in more detail
            </summary>
        </member>
        <member name="T:Synthesys.SDK.Attributes.TriggeredByAttribute">
            <summary>
                The TriggeredByAttribute specifies that the Extension is added to the end of the Task Queue when a certain event
                occurs.
                This Attribute can be used multiple times on the same Extension.
            </summary>
        </member>
        <member name="M:Synthesys.SDK.Attributes.TriggeredByAttribute.#ctor(System.String,Synthesys.SDK.Triggers.AppTreeNodeEvents)">
            <summary>
                Specify that the Extension is added to the end of the Task Queue when an Artifact is created or changed
            </summary>
            <param name="artifactPath">Artifact path</param>
            <param name="trigger">Trigger event</param>
        </member>
        <member name="M:Synthesys.SDK.Attributes.TriggeredByAttribute.#ctor(System.String,Synthesys.SDK.Triggers.ExtensionConditionTrigger)">
            <summary>
                Specify that the Extension is added to the end of the Task Queue when an Extension completes
            </summary>
            <param name="extensionIdentifier">Extension identifier</param>
            <param name="trigger">Triggering execution status</param>
        </member>
        <member name="M:Synthesys.SDK.Attributes.TriggeredByAttribute.#ctor(Synthesys.SDK.Triggers.SystemEvents)">
            <summary>
                Specify that the Extension is added to the end of the Task Queue when a system-level event occurs
            </summary>
            <param name="trigger">System event Trigger</param>
        </member>
        <member name="P:Synthesys.SDK.Attributes.TriggeredByAttribute.Trigger">
            <summary>
                Description of Trigger causing the Extension to be queued
            </summary>
        </member>
        <member name="T:Synthesys.SDK.Capabilities.IOperateOnHost">
            <summary>
                IOperateOnHost indicates that the Extension acts upon a single host
            </summary>
        </member>
        <member name="P:Synthesys.SDK.Capabilities.IOperateOnHost.Host">
            <summary>
                Framework-populated reference to the Host Node
            </summary>
        </member>
        <member name="T:Synthesys.SDK.Capabilities.IOperateOnHostPort">
            <summary>
                ICanQueueTasks indicates that the Extension acts upon an unknown service (by port)
            </summary>
        </member>
        <member name="P:Synthesys.SDK.Capabilities.IOperateOnHostPort.Service">
            <summary>
                Framework-populated reference to the Service Node
            </summary>
        </member>
        <member name="T:Synthesys.SDK.Capabilities.IOperateOnHttpService">
            <summary>
                IOperateOnHttpService indicates that the Extension acts upon a web server
            </summary>
        </member>
        <member name="P:Synthesys.SDK.Capabilities.IOperateOnHttpService.HttpService">
            <summary>
                Framework-populated reference to the HttpService Node
            </summary>
        </member>
        <member name="T:Synthesys.SDK.Capabilities.IOperateOnUrl">
            <summary>
                IOperateOnUrl indicates that the Extension acts upon a URL
            </summary>
        </member>
        <member name="P:Synthesys.SDK.Capabilities.IOperateOnUrl.Url">
            <summary>
                Framework-populated reference to the URL node
            </summary>
        </member>
        <member name="T:Synthesys.SDK.Capabilities.IUnderstandProjectInformation">
            <summary>
                IUnderstandProjectInformation indicates that the Extension needs to know what business object is related to its
                instance.
            </summary>
        </member>
        <member name="P:Synthesys.SDK.Capabilities.IUnderstandProjectInformation.ProjectPointer">
            <summary>
                Framework-populated reference to the project information
            </summary>
        </member>
        <member name="T:Synthesys.SDK.Capabilities.IUnderstandServiceMaps">
            <summary>
                IUnderstandServiceMaps indicates that the Extension needs access to the Service Map in use
            </summary>
        </member>
        <member name="P:Synthesys.SDK.Capabilities.IUnderstandServiceMaps.ServiceMap">
            <summary>
                Framework-populated reference to the Service Map
            </summary>
        </member>
        <member name="T:Synthesys.SDK.ExtensionReport">
            <summary>
                Encapsulates interesting runtime and output information from an Extension.
                This is a generalized container--Extensions should use the "SerializedExtensionSpecificReport" property to store more specific information for report viewing.
            </summary>
        </member>
        <member name="P:Synthesys.SDK.ExtensionReport.ExtensionIdentifier">
            <summary>
                Identifier of Extension which created this Report
            </summary>
        </member>
        <member name="P:Synthesys.SDK.ExtensionReport.AffectedArtifactPaths">
            <summary>
                List of paths to Artifacts that were registered with the Extension
            </summary>
        </member>
        <member name="P:Synthesys.SDK.ExtensionReport.ProjectPointer">
            <summary>
                Pointer to Service Map entry which spawned the creation of this report
            </summary>
        </member>
        <member name="P:Synthesys.SDK.ExtensionReport.Runtime">
            <summary>
                How long the Extension took to execute
            </summary>
        </member>
        <member name="P:Synthesys.SDK.ExtensionReport.RawPointsScored">
            <summary>
                Number of points scored on the Extension's own scale
            </summary>
        </member>
        <member name="P:Synthesys.SDK.ExtensionReport.MaximumPointsAvailable">
            <summary>
                Maximum number of points available on the Extension's own scale
            </summary>
        </member>
        <member name="P:Synthesys.SDK.ExtensionReport.AdjustedScore">
            <summary>
                Adjusted score out of 1.0
            </summary>
        </member>
        <member name="P:Synthesys.SDK.ExtensionReport.ReportViewName">
            <summary>
                Name of the View describing this ExtensionReport
            </summary>
        </member>
        <member name="P:Synthesys.SDK.ExtensionReport.ReportSummaryName">
            <summary>
                Name of the summary control to represent this ExtensionReport
            </summary>
        </member>
        <member name="P:Synthesys.SDK.ExtensionReport.SerializedExtensionSpecificReport">
            <summary>
                Serialized version of the Extension-specific report
            </summary>
        </member>
        <member name="P:Synthesys.SDK.ExtensionReport.Vulnerabilities">
            <summary>
                Vulnerabilities generated by this Extension
            </summary>
        </member>
        <member name="P:Synthesys.SDK.ExtensionReport.ErrorEncountered">
            <summary>
                Optional Exception, if an error was encountered while generating the report
            </summary>
        </member>
        <member name="M:Synthesys.SDK.ExtensionReport.GetExtensionSpecificReport``1">
            <summary>
                Deserialize the Extension-specific report with the default serializer
            </summary>
            <typeparam name="T">Report type</typeparam>
            <returns>Instance of Report, deserialized from SerializedExtensionSpecificReport</returns>
        </member>
        <member name="M:Synthesys.SDK.ExtensionReport.SetExtensionSpecificReport``1(``0)">
            <summary>
                Serialize the Extension-specific report with the default serializer
            </summary>
            <typeparam name="T">Report type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Synthesys.SDK.ExtensionReport.Blank">
            <summary>
                Create a blank report
            </summary>
            <returns></returns>
        </member>
        <member name="M:Synthesys.SDK.ExtensionReport.Error(System.Exception)">
            <summary>
                Create an error-containing report
            </summary>
            <param name="ex">Exception generated</param>
            <returns></returns>
        </member>
        <member name="M:Synthesys.SDK.ExtensionReport.FinalizeReport">
            <summary>
                Finalize report by disconnecting TaskDescriptor from recursive loops
            </summary>
            <returns></returns>
        </member>
        <member name="T:Synthesys.SDK.Extensions.ActionExtension">
            <summary>
                An ActionExtension is generated from known information about a system. ActionExtensions are imported into the
                Artifact Tree in the same way as any discovered data. The intent is for the framework to use the information
                generated by ActionExtensions to create ReactionExtensions.
            </summary>
        </member>
        <member name="M:Synthesys.SDK.Extensions.ActionExtension.Act">
            <summary>
                This method is called when the ActionExtension is popped from the Task Queue and executed
            </summary>
            <returns></returns>
        </member>
        <member name="T:Synthesys.SDK.Extensions.Extension">
            <summary>
                An Extension is some function, which can either be an Action or a Reaction, which executes with the intent of
                populating the Artifact Tree with additional data.
            </summary>
        </member>
        <member name="P:Synthesys.SDK.Extensions.Extension.Logger">
            <summary>
                Extension logger
            </summary>
        </member>
        <member name="M:Synthesys.SDK.Extensions.Extension.Initialize">
            <summary>
                Initialize Extension; called on instantiation
            </summary>
        </member>
        <member name="M:Synthesys.SDK.Extensions.Extension.ValidateEnvironmentReadiness">
            <summary>
                Called when the Extension is loaded, to check if the runtime environment supports what the Extension requires to
                execute.
                Any application validation/dependency checks should happen here, but it is not required.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Synthesys.SDK.Extensions.Extension.SetLoggerName(System.String)">
            <summary>
                Create a new Logger with a given name for this Extension
            </summary>
            <param name="name">Logger name</param>
        </member>
        <member name="P:Synthesys.SDK.Extensions.Extension.Metadata">
            <summary>
                Retrieve the Extension's metadata information
            </summary>
        </member>
        <member name="P:Synthesys.SDK.Extensions.Extension.ConfigurableProperties">
            <summary>
                Retrieve a list of all properties in the Extension marked "Configurable"
            </summary>
        </member>
        <member name="P:Synthesys.SDK.Extensions.Extension.ConfigurablePropertyValues">
            <summary>
                Retrieve a dictionary of all (string) properties and their values
            </summary>
        </member>
        <member name="T:Synthesys.SDK.Extensions.ReactionExtension">
            <summary>
                A ReactionExtension is added to the end of the Task Queue when some given event occurs during the scan process. The
                concept behind ReactionExtensions is to enrich the Artifact Tree and, in doing so, trigger other
                ReactionExtensions.
                ReactionExtensions can be triggered by:
                <list type="bullet">
                    <item>
                        <description>ActionExtension completes or fails</description>
                    </item>
                    <item>
                        <description>Artifact Tree element has a child added to it</description>
                    </item>
                    <item>
                        <description>Artifact Tree element changes</description>
                    </item>
                    <item>
                        <description>Artifact Tree element is created</description>
                    </item>
                    <item>
                        <description>Task is started by the Task Queue</description>
                    </item>
                    <item>
                        <description>Task is completed</description>
                    </item>
                    <item>
                        <description>Task is added to the Task Queue</description>
                    </item>
                    <item>
                        <description>Task Queue is completely drained</description>
                    </item>
                </list>
            </summary>
        </member>
        <member name="M:Synthesys.SDK.Extensions.ReactionExtension.React(Synthesys.SDK.Triggers.TriggerDescriptor)">
            <summary>
                This method is called when the ReactionExtension is popped from the Task Queue and executed
            </summary>
            <param name="trigger">Trigger causing the ReactionExtension to fire</param>
            <returns></returns>
        </member>
        <member name="P:Synthesys.SDK.Extensions.ReactionExtension.Triggers">
            <summary>
                Retrieve a list of Triggers which cause this Extension to react
            </summary>
        </member>
        <member name="T:Synthesys.SDK.Global">
            <summary>
                Global entities for SDK
            </summary>
        </member>
        <member name="P:Synthesys.SDK.Global.LogFactory">
            <summary>
                Log factory for elements in SDK
            </summary>
        </member>
        <member name="T:Synthesys.SDK.HostCommands.StreamTypes">
            <summary>
                Stream types which can input or output data
            </summary>
        </member>
        <member name="F:Synthesys.SDK.HostCommands.StreamTypes.Stdin">
            <summary>
                Standard input (STDIN)
            </summary>
        </member>
        <member name="F:Synthesys.SDK.HostCommands.StreamTypes.Stdout">
            <summary>
                Standard output (STDOUT)
            </summary>
        </member>
        <member name="F:Synthesys.SDK.HostCommands.StreamTypes.Stderr">
            <summary>
                Standard error (STDERR)
            </summary>
        </member>
        <member name="T:Synthesys.SDK.HostCommands.DockerHostMount">
            <summary>
                Represents a mount between the host and a Docker container
            </summary>
        </member>
        <member name="P:Synthesys.SDK.HostCommands.DockerHostMount.LocalPath">
            <summary>
                Path on host
            </summary>
        </member>
        <member name="P:Synthesys.SDK.HostCommands.DockerHostMount.ContainerPath">
            <summary>
                Path inside container
            </summary>
        </member>
        <member name="P:Synthesys.SDK.HostCommands.DockerHostMount.IsReadOnly">
            <summary>
                If the mount is read-only
            </summary>
        </member>
        <member name="T:Synthesys.SDK.HostCommands.DockerHostCommand">
            <summary>
                Represents a command run to execute a Docker container
            </summary>
        </member>
        <member name="M:Synthesys.SDK.HostCommands.DockerHostCommand.SupportsDocker">
            <summary>
                If the platform is running an accessible Docker daemon
            </summary>
            <returns></returns>
        </member>
        <member name="M:Synthesys.SDK.HostCommands.DockerHostCommand.#ctor(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.IEnumerable{Synthesys.SDK.HostCommands.DockerHostMount},System.String)">
            <summary>
                Represents a command run to execute a Docker container
            </summary>
            <param name="image">Image name</param>
            <param name="command">Command and arguments to execute</param>
            <param name="mounts">Mounts for container</param>
            <param name="user">User to execute container as</param>
        </member>
        <member name="M:Synthesys.SDK.HostCommands.DockerHostCommand.#ctor(System.String,SMACD.AppTree.Evidence.NativeDirectoryContext,System.String[])">
            <summary>
                Represents a command run to execute a Docker container
                
                A context will be mounted at /synthesys inside the container
            </summary>
            <param name="image">Image name</param>
            <param name="context">Context to attach to Docker container</param>
            <param name="command">Command and arguments to execute</param>
        </member>
        <member name="M:Synthesys.SDK.HostCommands.DockerHostCommand.#ctor(System.String,System.String[])">
            <summary>
                Represents a command run to execute a Docker container
            </summary>
            <param name="image">Image name</param>
            <param name="command">Command and arguments to execute</param>
        </member>
        <member name="P:Synthesys.SDK.HostCommands.DockerHostCommand.ContainerWorkingDirectory">
            <summary>
                Container Working Directory
            </summary>
        </member>
        <member name="M:Synthesys.SDK.HostCommands.DockerHostCommand.#ctor(Docker.DotNet.Models.CreateContainerParameters)">
            <summary>
                Represents a command run to execute a Docker container
            </summary>
            <param name="containerParameters">Container parameters for new container</param>
        </member>
        <member name="P:Synthesys.SDK.HostCommands.DockerHostCommand.ContainerParameters">
            <summary>
                Parameters to be used during the creation of the Docker container
            </summary>
        </member>
        <member name="P:Synthesys.SDK.HostCommands.DockerHostCommand.ContainerId">
            <summary>
                Container identifier name
            </summary>
        </member>
        <member name="M:Synthesys.SDK.HostCommands.DockerHostCommand.Start">
            <summary>
                Start container task
            </summary>
            <returns></returns>
        </member>
        <member name="M:Synthesys.SDK.HostCommands.DockerHostCommand.Dispose(System.Boolean)">
            <summary>
                Destructor to dispose
            </summary>
            <param name="disposing">Currently disposing?</param>
        </member>
        <member name="M:Synthesys.SDK.HostCommands.DockerHostCommand.Dispose">
            <summary>
                Destructor to dispose
            </summary>
        </member>
        <member name="T:Synthesys.SDK.HostCommands.HostCommand">
            <summary>
                Command executed on the host running the application
            </summary>
        </member>
        <member name="T:Synthesys.SDK.HostCommands.HostCommand.ExternalProcessDataReceived">
            <summary>
                Invoked when an external process generates data
            </summary>
            <param name="sender">Sender object</param>
            <param name="ownerTaskId">Task ID of owner</param>
            <param name="data">Data generated</param>
        </member>
        <member name="F:Synthesys.SDK.HostCommands.HostCommand.Maps">
            <summary>
                A collection of maps between ManagedThreadId (from ExecutionWrapper) and TaskId (from plugin)
            </summary>
        </member>
        <member name="M:Synthesys.SDK.HostCommands.HostCommand.#ctor">
            <summary>
                Command executed on the host running the application
            </summary>
        </member>
        <member name="P:Synthesys.SDK.HostCommands.HostCommand.Logger">
            <summary>
                Logger for command
            </summary>
        </member>
        <member name="P:Synthesys.SDK.HostCommands.HostCommand.OwnerTaskId">
            <summary>
                Task ID of owner
            </summary>
        </member>
        <member name="P:Synthesys.SDK.HostCommands.HostCommand.RuntimeTask">
            <summary>
                Task wrapping this execution
            </summary>
        </member>
        <member name="P:Synthesys.SDK.HostCommands.HostCommand.ExecutionTime">
            <summary>
                Duration of last execution
            </summary>
        </member>
        <member name="P:Synthesys.SDK.HostCommands.HostCommand.CaptureStdOut">
            <summary>
                If STDOUT should be captured and stored in StdOut property
            </summary>
        </member>
        <member name="P:Synthesys.SDK.HostCommands.HostCommand.CaptureStdErr">
            <summary>
                If STDERR should be captured and stored in StdErr property
            </summary>
        </member>
        <member name="P:Synthesys.SDK.HostCommands.HostCommand.StdOut">
            <summary>
                Standard output from last execution
            </summary>
        </member>
        <member name="P:Synthesys.SDK.HostCommands.HostCommand.StdErr">
            <summary>
                Standard error from last execution
            </summary>
        </member>
        <member name="P:Synthesys.SDK.HostCommands.HostCommand.FailedToExecute">
            <summary>
                If this process failed to execute
            </summary>
        </member>
        <member name="E:Synthesys.SDK.HostCommands.HostCommand.StandardOutputDataReceived">
            <summary>
                Fired when data is written to STDOUT
            </summary>
        </member>
        <member name="E:Synthesys.SDK.HostCommands.HostCommand.StandardErrorDataReceived">
            <summary>
                Fired when data is written to STDERR
            </summary>
        </member>
        <member name="M:Synthesys.SDK.HostCommands.HostCommand.HandleStdOut(System.String)">
            <summary>
                Route STDOUT to buffer and event
            </summary>
            <param name="text">STDOUT text</param>
        </member>
        <member name="M:Synthesys.SDK.HostCommands.HostCommand.HandleStdErr(System.String)">
            <summary>
                Route STDERR to buffer and event
            </summary>
            <param name="text">STDERR text</param>
        </member>
        <member name="T:Synthesys.SDK.HostCommands.NativeHostCommand">
            <summary>
                Represents a command run to execute a command on the host
            </summary>
        </member>
        <member name="M:Synthesys.SDK.HostCommands.NativeHostCommand.#ctor(System.String,System.String[])">
            <summary>
                Represents a command run to execute a command on the host
            </summary>
            <param name="command">Command to execute</param>
            <param name="args">Arguments for command</param>
        </member>
        <member name="P:Synthesys.SDK.HostCommands.NativeHostCommand.ProcessStartInfo">
            <summary>
                Process start information
            </summary>
        </member>
        <member name="P:Synthesys.SDK.HostCommands.NativeHostCommand.Process">
            <summary>
                Process wrapping the native host command
            </summary>
        </member>
        <member name="M:Synthesys.SDK.HostCommands.NativeHostCommand.ValidateCommandExists">
            <summary>
                Validate that the command exists on the host
            </summary>
            <returns></returns>
        </member>
        <member name="M:Synthesys.SDK.HostCommands.NativeHostCommand.Start">
            <summary>
                Execute the command, wrapped by a Task
            </summary>
            <returns></returns>
        </member>
        <member name="M:Synthesys.SDK.HostCommands.NativeHostCommand.Dispose(System.Boolean)">
            <summary>
                Destructor to dispose
            </summary>
            <param name="disposing">Currently disposing?</param>
        </member>
        <member name="M:Synthesys.SDK.HostCommands.NativeHostCommand.Dispose">
            <summary>
                Destructor to dispose
            </summary>
        </member>
        <member name="T:Synthesys.SDK.LogExtensions">
            <summary>
                Extensions to the log function to allow a binding between external processes and their encapsulating threads
            </summary>
        </member>
        <member name="P:Synthesys.SDK.LogExtensions.Maps">
            <summary>
                Managed to unmanaged thread ID maps for logging enrichment extension
            </summary>
        </member>
        <member name="M:Synthesys.SDK.LogExtensions.TaskLogCritical(Microsoft.Extensions.Logging.ILogger,System.Int32,System.String,System.Object[])">
            <summary>
                Log a message at the CRITICAL level
            </summary>
            <param name="logger">Logger to invoke</param>
            <param name="taskId">Task ID to correlate to thread</param>
            <param name="message">Message to log</param>
            <param name="parameters">Parameters for message template</param>
        </member>
        <member name="M:Synthesys.SDK.LogExtensions.TaskLogDebug(Microsoft.Extensions.Logging.ILogger,System.Int32,System.String,System.Object[])">
            <summary>
                Log a message at the DEBUG level
            </summary>
            <param name="logger">Logger to invoke</param>
            <param name="taskId">Task ID to correlate to thread</param>
            <param name="message">Message to log</param>
            <param name="parameters">Parameters for message template</param>
        </member>
        <member name="M:Synthesys.SDK.LogExtensions.TaskLogError(Microsoft.Extensions.Logging.ILogger,System.Int32,System.String,System.Object[])">
            <summary>
                Log a message at the ERROR level
            </summary>
            <param name="logger">Logger to invoke</param>
            <param name="taskId">Task ID to correlate to thread</param>
            <param name="message">Message to log</param>
            <param name="parameters">Parameters for message template</param>
        </member>
        <member name="M:Synthesys.SDK.LogExtensions.TaskLogInformation(Microsoft.Extensions.Logging.ILogger,System.Int32,System.String,System.Object[])">
            <summary>
                Log a message at the INFORMATION level
            </summary>
            <param name="logger">Logger to invoke</param>
            <param name="taskId">Task ID to correlate to thread</param>
            <param name="message">Message to log</param>
            <param name="parameters">Parameters for message template</param>
        </member>
        <member name="M:Synthesys.SDK.LogExtensions.TaskLogTrace(Microsoft.Extensions.Logging.ILogger,System.Int32,System.String,System.Object[])">
            <summary>
                Log a message at the TRACE level
            </summary>
            <param name="logger">Logger to invoke</param>
            <param name="taskId">Task ID to correlate to thread</param>
            <param name="message">Message to log</param>
            <param name="parameters">Parameters for message template</param>
        </member>
        <member name="M:Synthesys.SDK.LogExtensions.TaskLogWarning(Microsoft.Extensions.Logging.ILogger,System.Int32,System.String,System.Object[])">
            <summary>
                Log a message at the WARNING level
            </summary>
            <param name="logger">Logger to invoke</param>
            <param name="taskId">Task ID to correlate to thread</param>
            <param name="message">Message to log</param>
            <param name="parameters">Parameters for message template</param>
        </member>
        <member name="M:Synthesys.SDK.LogExtensions.SHA1(System.String)">
            <summary>
                Calculate SHA1 hash of a string (not cryptographically safe operation!)
            </summary>
            <param name="str">String to hash</param>
            <returns></returns>
        </member>
        <member name="T:Synthesys.SDK.Triggers.AppTreeNodeEvents">
            <summary>
                Events which can be fired by nodes in the AppTree
            </summary>
        </member>
        <member name="F:Synthesys.SDK.Triggers.AppTreeNodeEvents.IsCreated">
            <summary>
                Fired when a node is created
            </summary>
        </member>
        <member name="F:Synthesys.SDK.Triggers.AppTreeNodeEvents.IsUpdated">
            <summary>
                Fired when the data in a node is changed
            </summary>
        </member>
        <member name="F:Synthesys.SDK.Triggers.AppTreeNodeEvents.AddsChild">
            <summary>
                Fired when a child node is added to another node
            </summary>
        </member>
        <member name="T:Synthesys.SDK.Triggers.ArtifactTriggerDescriptor">
            <summary>
                Descriptor for a trigger activated by an operation on a node in the Application Tree
            </summary>
        </member>
        <member name="M:Synthesys.SDK.Triggers.ArtifactTriggerDescriptor.#ctor(System.String,Synthesys.SDK.Triggers.AppTreeNodeEvents)">
            <summary>
                Create a descriptor for a trigger activated by an operation on a node in the Application Tree
            </summary>
            <param name="nodePath">Application Tree node path</param>
            <param name="trigger">Triggering operation</param>
        </member>
        <member name="M:Synthesys.SDK.Triggers.ArtifactTriggerDescriptor.#ctor(SMACD.AppTree.AppTreeNode,Synthesys.SDK.Triggers.AppTreeNodeEvents)">
            <summary>
                Create a descriptor for a trigger activated by an operation on a node in the Application Tree
            </summary>
            <param name="node">Application Tree node instance</param>
            <param name="trigger">Triggering operation</param>
        </member>
        <member name="P:Synthesys.SDK.Triggers.ArtifactTriggerDescriptor.Node">
            <summary>
                Artifact Instance
            </summary>
        </member>
        <member name="P:Synthesys.SDK.Triggers.ArtifactTriggerDescriptor.NodePath">
            <summary>
                Path to Artifact
            </summary>
        </member>
        <member name="P:Synthesys.SDK.Triggers.ArtifactTriggerDescriptor.Trigger">
            <summary>
                Artifact operation causing trigger
            </summary>
        </member>
        <member name="M:Synthesys.SDK.Triggers.ArtifactTriggerDescriptor.ToString">
            <summary>
                String representation of Artifact Trigger
            </summary>
            <returns></returns>
        </member>
        <member name="M:Synthesys.SDK.Triggers.ArtifactTriggerDescriptor.Equals(System.Object)">
            <summary>
                If an Artifact Trigger matches another
            </summary>
            <param name="obj">Artifact trigger to compare</param>
            <returns></returns>
        </member>
        <member name="M:Synthesys.SDK.Triggers.ArtifactTriggerDescriptor.GetHashCode">
            <summary>
                Get hash code from path and trigger type
            </summary>
            <returns></returns>
        </member>
        <member name="T:Synthesys.SDK.Triggers.ExtensionConditionTrigger">
            <summary>
                Extension result types
            </summary>
        </member>
        <member name="F:Synthesys.SDK.Triggers.ExtensionConditionTrigger.Succeeds">
            <summary>
                Fired if the event succeeds
            </summary>
        </member>
        <member name="F:Synthesys.SDK.Triggers.ExtensionConditionTrigger.Fails">
            <summary>
                Fired if the event fails
            </summary>
        </member>
        <member name="T:Synthesys.SDK.Triggers.ExtensionTriggerDescriptor">
            <summary>
                Create a descriptor for a trigger activated by execution of an Extension
            </summary>
        </member>
        <member name="M:Synthesys.SDK.Triggers.ExtensionTriggerDescriptor.#ctor(System.String,Synthesys.SDK.Triggers.ExtensionConditionTrigger)">
            <summary>
                Create a descriptor for a trigger activated by execution of an Extension
            </summary>
            <param name="extensionIdentifier">Artifact path</param>
            <param name="trigger">Triggering operation</param>
        </member>
        <member name="P:Synthesys.SDK.Triggers.ExtensionTriggerDescriptor.ExtensionIdentifier">
            <summary>
                Extension identifier being tracked
            </summary>
        </member>
        <member name="P:Synthesys.SDK.Triggers.ExtensionTriggerDescriptor.Trigger">
            <summary>
                Trigger condition
            </summary>
        </member>
        <member name="M:Synthesys.SDK.Triggers.ExtensionTriggerDescriptor.ToString">
            <summary>
                String representation of Extension Trigger
            </summary>
            <returns></returns>
        </member>
        <member name="M:Synthesys.SDK.Triggers.ExtensionTriggerDescriptor.Equals(System.Object)">
            <summary>
                If an Extension Trigger matches another
            </summary>
            <param name="obj">Extension Trigger to compare</param>
            <returns></returns>
        </member>
        <member name="M:Synthesys.SDK.Triggers.ExtensionTriggerDescriptor.GetHashCode">
            <summary>
                Get hash code from Extension Identifier and trigger condition
            </summary>
            <returns></returns>
        </member>
        <member name="T:Synthesys.SDK.Triggers.SystemEvents">
            <summary>
                Events which can be fired from the scanner system
            </summary>
        </member>
        <member name="F:Synthesys.SDK.Triggers.SystemEvents.TaskAddedToQueue">
            <summary>
                Fired when a task is added to the queue
            </summary>
        </member>
        <member name="F:Synthesys.SDK.Triggers.SystemEvents.TaskStarted">
            <summary>
                Fired when a task is started
            </summary>
        </member>
        <member name="F:Synthesys.SDK.Triggers.SystemEvents.TaskCompleted">
            <summary>
                Fired when a task completes
            </summary>
        </member>
        <member name="F:Synthesys.SDK.Triggers.SystemEvents.TaskQueueDepleted">
            <summary>
                Fired when the task queue has completely drained
            </summary>
        </member>
        <member name="T:Synthesys.SDK.Triggers.SystemEventTriggerDescriptor">
            <summary>
                Descriptor for a trigger activated by a System Event
            </summary>
        </member>
        <member name="M:Synthesys.SDK.Triggers.SystemEventTriggerDescriptor.#ctor(Synthesys.SDK.Triggers.SystemEvents)">
            <summary>
                Create a descriptor for a trigger activated by a System Event
            </summary>
            <param name="systemEvent">Triggering system event</param>
        </member>
        <member name="P:Synthesys.SDK.Triggers.SystemEventTriggerDescriptor.SystemEvent">
            <summary>
                System event trigger
            </summary>
        </member>
        <member name="M:Synthesys.SDK.Triggers.SystemEventTriggerDescriptor.ToString">
            <summary>
                String representation of System Event trigger
            </summary>
            <returns></returns>
        </member>
        <member name="M:Synthesys.SDK.Triggers.SystemEventTriggerDescriptor.Equals(System.Object)">
            <summary>
                If a System Event trigger matches another
            </summary>
            <param name="obj">System Event Trigger to compare</param>
            <returns></returns>
        </member>
        <member name="M:Synthesys.SDK.Triggers.SystemEventTriggerDescriptor.GetHashCode">
            <summary>
                Get hash code from the system event
            </summary>
            <returns></returns>
        </member>
        <member name="T:Synthesys.SDK.Triggers.TriggerDescriptor">
            <summary>
                Describes a wrapper around an event and its details, to pass to ReactionExtensions
            </summary>
        </member>
        <member name="M:Synthesys.SDK.Triggers.TriggerDescriptor.#ctor">
            <summary>
                Describes a wrapper around an event and its details, to pass to ReactionExtensions
            </summary>
        </member>
        <member name="M:Synthesys.SDK.Triggers.TriggerDescriptor.ArtifactTrigger(System.String,Synthesys.SDK.Triggers.AppTreeNodeEvents)">
            <summary>
                Create an artifact-based trigger
            </summary>
            <param name="nodePath">Node path</param>
            <param name="trigger">Trigger operation</param>
            <returns></returns>
        </member>
        <member name="M:Synthesys.SDK.Triggers.TriggerDescriptor.ArtifactTrigger(SMACD.AppTree.AppTreeNode,Synthesys.SDK.Triggers.AppTreeNodeEvents)">
            <summary>
                Create an artifact-based trigger
            </summary>
            <param name="node">Node instance</param>
            <param name="trigger">Trigger operation</param>
            <returns></returns>
        </member>
        <member name="M:Synthesys.SDK.Triggers.TriggerDescriptor.ExtensionTrigger(System.String,Synthesys.SDK.Triggers.ExtensionConditionTrigger)">
            <summary>
                Create an extension-based trigger
            </summary>
            <param name="extensionIdentifier">Extension identifier</param>
            <param name="trigger">Extension execution condition</param>
            <returns></returns>
        </member>
        <member name="M:Synthesys.SDK.Triggers.TriggerDescriptor.SystemEventTrigger(Synthesys.SDK.Triggers.SystemEvents)">
            <summary>
                Create a trigger activated by a SystemEvent
            </summary>
            <param name="trigger">System event</param>
            <returns></returns>
        </member>
        <member name="M:Synthesys.SDK.Triggers.TriggerDescriptor.GeneratePath(SMACD.AppTree.AppTreeNode)">
            <summary>
                Generate the path for a given artifact
            </summary>
            <param name="node">Artifact</param>
            <returns></returns>
        </member>
        <member name="T:Synthesys.SDK.UrlHelper">
            <summary>
                Functions to work with URLs in the Artifact correlation tree
            </summary>
        </member>
        <member name="M:Synthesys.SDK.UrlHelper.GeneratePathArtifacts(SMACD.AppTree.HttpServiceNode,System.String,System.String)">
            <summary>
                Generate artifacts under the given Artifact for each segment of a given URL and request method
            </summary>
            <param name="httpService">Base artifact</param>
            <param name="url">URL to create data from</param>
            <param name="method">HTTP request method</param>
            <returns>Artifact representing leaf of URL</returns>
        </member>
    </members>
</doc>
