<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SMACD.AppTree</name>
    </assembly>
    <members>
        <member name="T:SMACD.AppTree.AppTreeNode">
            <summary>
                Represents a single node in a tree, including all navigation properties
            </summary>
        </member>
        <member name="P:SMACD.AppTree.AppTreeNode.Root">
            <summary>
                Root Artifact
            </summary>
        </member>
        <member name="P:SMACD.AppTree.AppTreeNode.Parent">
            <summary>
                Parent Artifact
            </summary>
        </member>
        <member name="P:SMACD.AppTree.AppTreeNode.Children">
            <summary>
                Children of Artifact
            </summary>
        </member>
        <member name="M:SMACD.AppTree.AppTreeNode.ChildrenAre``1">
            <summary>
                Get only Artifact Children of a specific type
            </summary>
            <typeparam name="TChild">Artifact child type</typeparam>
            <returns></returns>
        </member>
        <member name="M:SMACD.AppTree.AppTreeNode.ChildrenAre``1(System.Predicate{``0})">
            <summary>
                Get predicate-matching Artifact Children of a specific type
            </summary>
            <typeparam name="TChild">Artifact child type</typeparam>
            <returns></returns>
        </member>
        <member name="P:SMACD.AppTree.AppTreeNode.Identifiers">
            <summary>
                Artifact Identifier for path
            </summary>
        </member>
        <member name="P:SMACD.AppTree.AppTreeNode.NiceIdentifier">
            <summary>
                Get nice-name identifier for Artifact (first non-UUID)
            </summary>
        </member>
        <member name="P:SMACD.AppTree.AppTreeNode.UUID">
            <summary>
                Unique identifier
            </summary>
        </member>
        <member name="P:SMACD.AppTree.AppTreeNode.Evidence">
            <summary>
                Data attachments providing evidence of correlating data pertaining to Artifact
            </summary>
        </member>
        <member name="P:SMACD.AppTree.AppTreeNode.Vulnerabilities">
            <summary>
                Vulnerabilities related to Artifact
            </summary>
        </member>
        <member name="P:SMACD.AppTree.AppTreeNode.NodeViewName">
            <summary>
                A Razor component view which can be used to visualize the content of a given node
            </summary>
        </member>
        <member name="P:SMACD.AppTree.AppTreeNode.Item(System.Guid)">
            <summary>
                Get a child Artifact by its identifier
            </summary>
            <param name="uuid">Artifact UUID</param>
            <returns></returns>
        </member>
        <member name="M:SMACD.AppTree.AppTreeNode.#ctor(SMACD.AppTree.AppTreeNode,System.String[])">
            <summary>
                Represents a single node in a tree, including all navigation properties
            </summary>
            <param name="identifiers">Identifiers for node</param>
            <param name="parent">Parent node</param>
        </member>
        <member name="M:SMACD.AppTree.AppTreeNode.#ctor">
            <summary>
                Represents a single node in a tree, including all navigation properties
            </summary>
        </member>
        <member name="M:SMACD.AppTree.AppTreeNode.Connect(SMACD.AppTree.AppTreeNode)">
            <summary>
                Attach Parent properties for each Node
            </summary>
            <param name="parent">Parent node</param>
        </member>
        <member name="M:SMACD.AppTree.AppTreeNode.GetNodeByRelativeUUIDPath(System.String)">
            <summary>
                Returns the leaf Artifact associated with a given UUID path
            </summary>
            <param name="path">UUID Path relative to this node</param>
            <returns></returns>
        </member>
        <member name="M:SMACD.AppTree.AppTreeNode.GetPath(System.Func{SMACD.AppTree.AppTreeNode,System.String})">
            <summary>
                Get a string representing an element from each node heading toward the root node
            </summary>
            <param name="selector">Selector for element's path string</param>
            <returns></returns>
        </member>
        <member name="M:SMACD.AppTree.AppTreeNode.GetDisplayPath">
            <summary>
                Get the string representing each element from here to the root, using their identifier text
            </summary>
            <returns>String representing each element from here to the root, using their identifier text</returns>
        </member>
        <member name="M:SMACD.AppTree.AppTreeNode.GetUUIDPath">
            <summary>
                Get the string representing each element from here to the root, using their UUID
            </summary>
            <returns></returns>
        </member>
        <member name="M:SMACD.AppTree.AppTreeNode.GetPath">
            <summary>
                Get a list of nodes between this node and the root node, inclusive
            </summary>
            <returns></returns>
        </member>
        <member name="M:SMACD.AppTree.AppTreeNode.IsDescribedByPath(System.String)">
            <summary>
                If the Artifact can be described by the given string path (may contain wildcards, etc)
            </summary>
            <param name="path">Path to test</param>
            <returns><c>TRUE</c> if the path describes the Artifact, otherwise <c>FALSE</c></returns>
        </member>
        <member name="M:SMACD.AppTree.AppTreeNode.NotifyChanged">
            <summary>
                Notify root element to fire an ArtifactChanged event
            </summary>
        </member>
        <member name="M:SMACD.AppTree.AppTreeNode.NotifyChildAdded(SMACD.AppTree.AppTreeNode)">
            <summary>
                Notify root element to fire an ArtifactChildAdded event
            </summary>
            <param name="newChild">Child added</param>
        </member>
        <member name="M:SMACD.AppTree.AppTreeNode.NotifyCreated">
            <summary>
                Notify root element to fire an ArtifactCreated event
            </summary>
        </member>
        <member name="T:SMACD.AppTree.IAppTreeNode`1">
            <summary>
                Represents a single node in a tree which contains a data payload
            </summary>
        </member>
        <member name="P:SMACD.AppTree.IAppTreeNode`1.Detail">
            <summary>
                Node data detail
            </summary>
        </member>
        <member name="T:SMACD.AppTree.DataVersionDescriptor">
            <summary>
                Descriptor of the data provider who contributed a chunk of data
            </summary>
        </member>
        <member name="P:SMACD.AppTree.DataVersionDescriptor.VersionId">
            <summary>
                Version identifier
            </summary>
        </member>
        <member name="P:SMACD.AppTree.DataVersionDescriptor.ExtensionIdentifier">
            <summary>
                Extension identifier
            </summary>
        </member>
        <member name="P:SMACD.AppTree.DataVersionDescriptor.Confidence">
            <summary>
                Confidence in data accuracy
            </summary>
        </member>
        <member name="P:SMACD.AppTree.DataVersionDescriptor.ProviderSpecificity">
            <summary>
                Specificity of the data provider contributing the data
            </summary>
        </member>
        <member name="P:SMACD.AppTree.DataVersionDescriptor.Score">
            <summary>
                Overall score of confidence in this version of the data, based on the confidence and specificity of provider
            </summary>
        </member>
        <member name="M:SMACD.AppTree.DataVersionDescriptor.Equals(System.Object)">
            <summary>
                Checks equalities based on the version descriptor's Extension Identifier and overall Score
            </summary>
            <param name="obj">Object to test</param>
            <returns></returns>
        </member>
        <member name="M:SMACD.AppTree.DataVersionDescriptor.GetHashCode">
            <summary>
                Generates a HashCode from the Extension Identifier and overall Score
            </summary>
            <returns></returns>
        </member>
        <member name="M:SMACD.AppTree.DataVersionDescriptor.#ctor">
            <summary>
                Descriptor of the data provider who contributed a chunk of data
            </summary>
        </member>
        <member name="M:SMACD.AppTree.DataVersionDescriptor.#ctor(System.String,SMACD.AppTree.DataProviderSpecificity,System.Double)">
            <summary>
                Descriptor of the data provider who contributed a chunk of data
            </summary>
            <param name="extensionIdentifier">Extension identifier</param>
            <param name="dataProviderSpecificity">Specificity of data provider</param>
            <param name="confidence">Confidence in data accuracy</param>
        </member>
        <member name="T:SMACD.AppTree.Details.HostDetails">
            <summary>
                Details around a Host
            </summary>
        </member>
        <member name="P:SMACD.AppTree.Details.HostDetails.OperatingSystem">
            <summary>
                Operating System of Host
            </summary>
        </member>
        <member name="T:SMACD.AppTree.Details.HttpServiceDetails">
            <summary>
                Details around an HTTP Service
            </summary>
        </member>
        <member name="T:SMACD.AppTree.Details.ServiceDetails">
            <summary>
                Details around a Service
            </summary>
        </member>
        <member name="P:SMACD.AppTree.Details.ServiceDetails.ServiceName">
            <summary>
                Service name
            </summary>
        </member>
        <member name="P:SMACD.AppTree.Details.ServiceDetails.ServiceBanner">
            <summary>
                Service banner
            </summary>
        </member>
        <member name="P:SMACD.AppTree.Details.ServiceDetails.ProductName">
            <summary>
                Name of product providing the Service
            </summary>
        </member>
        <member name="P:SMACD.AppTree.Details.ServiceDetails.ProductVersion">
            <summary>
                Version of product providing the Service
            </summary>
        </member>
        <member name="T:SMACD.AppTree.Details.UrlDetails">
            <summary>
                Details around a URL segment
            </summary>
        </member>
        <member name="P:SMACD.AppTree.Details.UrlDetails.IsDirectoryIndexable">
            <summary>
                If the URL segment provides a directory index
            </summary>
        </member>
        <member name="T:SMACD.AppTree.Details.UrlRequestDetails">
            <summary>
                Details around a URL segment
            </summary>
        </member>
        <member name="P:SMACD.AppTree.Details.UrlRequestDetails.ResultHtml">
            <summary>
                HTML generated from executing the URL with the given parameters
            </summary>
        </member>
        <member name="P:SMACD.AppTree.Details.UrlRequestDetails.ResultCode">
            <summary>
                Result code when requesting URL
            </summary>
        </member>
        <member name="P:SMACD.AppTree.Details.UrlRequestDetails.Headers">
            <summary>
                Headers received during request
            </summary>
        </member>
        <member name="T:SMACD.AppTree.Evidence.AggressiveTypeResolutionBinder">
            <summary>
                Provides a more aggressive (computationally complex) avenue of Type resolution.
                This is necessary to facilitate late-loaded libraries (Extensions) and their Types to be serialized cleanly.
            </summary>
        </member>
        <member name="M:SMACD.AppTree.Evidence.AggressiveTypeResolutionBinder.BindToName(System.Type,System.String@,System.String@)">
            <summary>
                Get the AssemblyName and TypeName of a given Type
            </summary>
            <param name="serializedType">Type to investigate</param>
            <param name="assemblyName">Assembly name</param>
            <param name="typeName">Type name</param>
        </member>
        <member name="M:SMACD.AppTree.Evidence.AggressiveTypeResolutionBinder.BindToType(System.String,System.String)">
            <summary>
                Get the runtime Type described by a given Assembly and Type
            </summary>
            <param name="assemblyName">Assembly name</param>
            <param name="typeName">Type name</param>
            <returns>Resolved runtime Type</returns>
        </member>
        <member name="T:SMACD.AppTree.Evidence.Evidence">
            <summary>
                Wraps supporting evidence data
            </summary>
        </member>
        <member name="T:SMACD.AppTree.Evidence.Evidence.EvidenceTypes">
            <summary>
            Possible encapsulated data types expressed in Evidence
            </summary>
        </member>
        <member name="F:SMACD.AppTree.Evidence.Evidence.EvidenceTypes.Unknown">
            <summary>
                Unknown type
            </summary>
        </member>
        <member name="F:SMACD.AppTree.Evidence.Evidence.EvidenceTypes.Object">
            <summary>
                Object evidence
            </summary>
        </member>
        <member name="F:SMACD.AppTree.Evidence.Evidence.EvidenceTypes.String">
            <summary>
                String evidence
            </summary>
        </member>
        <member name="F:SMACD.AppTree.Evidence.Evidence.EvidenceTypes.VFS">
            <summary>
                Virtual file system evidence
            </summary>
        </member>
        <member name="M:SMACD.AppTree.Evidence.Evidence.#ctor(System.String)">
            <summary>
                Wraps supporting evidence data
            </summary>
            <param name="name">Name of Evidence item</param>
        </member>
        <member name="P:SMACD.AppTree.Evidence.Evidence.Name">
            <summary>
                Name of this Evidence item
            </summary>
        </member>
        <member name="P:SMACD.AppTree.Evidence.Evidence.StoredData">
            <summary>
                Data stored in this Evidence item in raw format
            </summary>
        </member>
        <member name="P:SMACD.AppTree.Evidence.Evidence.EvidenceType">
            <summary>
            Type of Evidence item
            </summary>
        </member>
        <member name="M:SMACD.AppTree.Evidence.Evidence.As``1">
            <summary>
                Get the Evidence cast as a specific Evidence type
            </summary>
            <typeparam name="T">Artifact type</typeparam>
            <returns></returns>
        </member>
        <member name="M:SMACD.AppTree.Evidence.Evidence.AsStringEvidence">
            <summary>
                Get this as a string-containing Artifact
            </summary>
            <returns></returns>
        </member>
        <member name="M:SMACD.AppTree.Evidence.Evidence.AsObjectEvidence">
            <summary>
                Get this as an object-containing Artifact
            </summary>
            <returns></returns>
        </member>
        <member name="M:SMACD.AppTree.Evidence.Evidence.AsNativeDirectoryEvidence">
            <summary>
                Get this as a native directory-providing Artifact
            </summary>
            <returns></returns>
        </member>
        <member name="T:SMACD.AppTree.Evidence.EvidenceCollection">
            <summary>
                Contains items which represent evidence supporting correlations or other decisions
            </summary>
        </member>
        <member name="P:SMACD.AppTree.Evidence.EvidenceCollection.Item(System.String)">
            <summary>
                Retrieve Evidence item by its name
            </summary>
            <param name="name">Evidence name</param>
            <returns></returns>
        </member>
        <member name="E:SMACD.AppTree.Evidence.EvidenceCollection.EvidenceCreated">
            <summary>
                Fired when Evidence is created
            </summary>
        </member>
        <member name="E:SMACD.AppTree.Evidence.EvidenceCollection.EvidenceChanged">
            <summary>
                Fired when Evidence is changed
            </summary>
        </member>
        <member name="M:SMACD.AppTree.Evidence.EvidenceCollection.CreateOrLoadNativePath(System.String,System.TimeSpan)">
            <summary>
                Create or load a native (system) path to allow external tools to put data into the system
                via a local path. This is zipped when the underlying context is disposed.
                Only one context can be opened at a time, but this method will allow the caller to specify
                (if desired) a duration, in seconds, to wait until the resource becomes available.
            </summary>
            <param name="name">Evidence name</param>
            <param name="availabilityWaitTimeout">Time to wait if the context is already opened</param>
            <returns></returns>
        </member>
        <member name="M:SMACD.AppTree.Evidence.EvidenceCollection.Save``1(System.String,``0)">
            <summary>
                Create a child Evidence item containing a serialized object
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="name">Artifact name</param>
            <param name="obj">Object to save</param>
            <returns></returns>
        </member>
        <member name="M:SMACD.AppTree.Evidence.EvidenceCollection.Save(System.String,System.String)">
            <summary>
                Create a child Evidence item containing a string
            </summary>
            <param name="name">Artifact name</param>
            <param name="str">String to save</param>
            <returns></returns>
        </member>
        <member name="M:SMACD.AppTree.Evidence.EvidenceCollection.Save(System.String,System.Byte[])">
            <summary>
                Create a child Evidence item containing a byte array
            </summary>
            <param name="name">Artifact name</param>
            <param name="data">Byte array to save</param>
            <returns></returns>
        </member>
        <member name="M:SMACD.AppTree.Evidence.EvidenceCollection.Save(System.String)">
            <summary>
                Create a blank child Evidence item
            </summary>
            <param name="name">Artifact name</param>
            <returns></returns>
        </member>
        <member name="T:SMACD.AppTree.Evidence.NativeDirectoryContext">
            <summary>
                Context which allocates and destroys a temporary directory to collect files for a NativeDirectoryEvidence
            </summary>
        </member>
        <member name="M:SMACD.AppTree.Evidence.NativeDirectoryContext.#ctor(System.Byte[])">
            <summary>
                Open a previously created NativeDirectoryContext from its stored state
            </summary>
            <param name="data">Data buffer to load</param>
        </member>
        <member name="M:SMACD.AppTree.Evidence.NativeDirectoryContext.#ctor">
            <summary>
                Create a new NativeDirectoryContext to store files
            </summary>
        </member>
        <member name="P:SMACD.AppTree.Evidence.NativeDirectoryContext.Directory">
            <summary>
                Directory path allocated by this Context to store files and directories
                in; contents will be compressed in full upon Context disposal
            </summary>
        </member>
        <member name="M:SMACD.AppTree.Evidence.NativeDirectoryContext.DirectoryWithFile(System.String)">
            <summary>
                Directory path and a filename concatenated together
            </summary>
            <param name="fileName">File name</param>
            <returns></returns>
        </member>
        <member name="M:SMACD.AppTree.Evidence.NativeDirectoryContext.Dispose(System.Boolean)">
            <summary>
                Dispose of context
            </summary>
            <param name="disposing">Currently disposing?</param>
        </member>
        <member name="M:SMACD.AppTree.Evidence.NativeDirectoryContext.Finalize">
            <summary>
                Destructor to dispose
            </summary>
        </member>
        <member name="M:SMACD.AppTree.Evidence.NativeDirectoryContext.Dispose">
            <summary>
                Dispose of context
            </summary>
        </member>
        <member name="T:SMACD.AppTree.Evidence.NativeDirectoryEvidence">
            <summary>
                Represents Evidence that provides a system directory for collecting files
            </summary>
        </member>
        <member name="M:SMACD.AppTree.Evidence.NativeDirectoryEvidence.#ctor(System.String)">
            <summary>
                Represents Evidence that provides a system directory for collecting files
            </summary>
            <param name="name">Evidence name</param>
        </member>
        <member name="P:SMACD.AppTree.Evidence.NativeDirectoryEvidence.HasActiveDispatchedContext">
            <summary>
                If the Evidence has dispatched a Context
            </summary>
        </member>
        <member name="M:SMACD.AppTree.Evidence.NativeDirectoryEvidence.GetContext">
            <summary>
                Get a directory Context to collect files locally; when the context is disposed, the directory will be
                automatically ZIPped and saved to the Evidence's StoredData buffer
            </summary>
            <returns></returns>
        </member>
        <member name="T:SMACD.AppTree.Evidence.ObjectEvidence">
            <summary>
                Represents Evidence that contains a serialized object
            </summary>
        </member>
        <member name="M:SMACD.AppTree.Evidence.ObjectEvidence.#ctor(System.String)">
            <summary>
                Represents Evidence that contains a serialized object
            </summary>
            <param name="name">Evidence name</param>
        </member>
        <member name="M:SMACD.AppTree.Evidence.ObjectEvidence.Get">
            <summary>
                Get a deserialized instance of the object
            </summary>
            <returns></returns>
        </member>
        <member name="M:SMACD.AppTree.Evidence.ObjectEvidence.Get``1">
            <summary>
                Get a deserialized instance of the object (strongly typed)
            </summary>
            <typeparam name="T">Deserialized object's Type</typeparam>
            <returns></returns>
        </member>
        <member name="M:SMACD.AppTree.Evidence.ObjectEvidence.Set``1(``0)">
            <summary>
                Set the value of the Artifact to a given object, which will be JSON serialized
            </summary>
            <typeparam name="T">Type of object</typeparam>
            <param name="obj">Object to serialize</param>
        </member>
        <member name="T:SMACD.AppTree.Evidence.StringEvidence">
            <summary>
                Represents Evidence that contains a string
            </summary>
        </member>
        <member name="M:SMACD.AppTree.Evidence.StringEvidence.#ctor(System.String)">
            <summary>
                Represents Evidence that contains a string
            </summary>
            <param name="name">Evidence name</param>
        </member>
        <member name="M:SMACD.AppTree.Evidence.StringEvidence.Get">
            <summary>
                Get the saved string
            </summary>
            <returns></returns>
        </member>
        <member name="M:SMACD.AppTree.Evidence.StringEvidence.Set(System.String)">
            <summary>
                Set the saved value to the given string
            </summary>
            <param name="data">String to commit</param>
        </member>
        <member name="T:SMACD.AppTree.HostNode">
            <summary>
                Represents a single host (server) involved in some part of the application
            </summary>
        </member>
        <member name="P:SMACD.AppTree.HostNode.NodeViewName">
            <summary>
                A Razor component view which can be used to visualize the content of a given node
            </summary>
        </member>
        <member name="P:SMACD.AppTree.HostNode.Hostname">
            <summary>
                Name of Host
            </summary>
        </member>
        <member name="P:SMACD.AppTree.HostNode.IpAddress">
            <summary>
                IP Address of Host
            </summary>
        </member>
        <member name="P:SMACD.AppTree.HostNode.Detail">
            <summary>
                Details around a Host
            </summary>
        </member>
        <member name="P:SMACD.AppTree.HostNode.Item(System.Int32)">
            <summary>
                Get a TCP port/service by its port number
            </summary>
            <param name="port">TCP Port number</param>
            <returns></returns>
        </member>
        <member name="P:SMACD.AppTree.HostNode.Item(System.String)">
            <summary>
                Get a port/service by its port number and type
            </summary>
            <param name="protocolAndPort">Protocol and port, i.e. Tcp/80</param>
            <returns></returns>
        </member>
        <member name="M:SMACD.AppTree.HostNode.#ctor(SMACD.AppTree.RootNode,System.String[])">
            <summary>
                Represents a single host (server) involved in some part of the application
            </summary>
            <param name="parent">Parent node</param>
            <param name="identifiers">Identifiers</param>
        </member>
        <member name="M:SMACD.AppTree.HostNode.#ctor">
            <summary>
                Represents a single host (server) involved in some part of the application
            </summary>
        </member>
        <member name="M:SMACD.AppTree.HostNode.ToString">
            <summary>
                String representation of host
            </summary>
            <returns></returns>
        </member>
        <member name="T:SMACD.AppTree.HttpServiceNode">
            <summary>
                Represents an HTTP service accessible via a specific protocol and port
            </summary>
        </member>
        <member name="P:SMACD.AppTree.HttpServiceNode.NodeViewName">
            <summary>
                A Razor component view which can be used to visualize the content of a given node
            </summary>
        </member>
        <member name="P:SMACD.AppTree.HttpServiceNode.Detail">
            <summary>
                Details around an HTTP Service
            </summary>
        </member>
        <member name="P:SMACD.AppTree.HttpServiceNode.Item(System.String)">
            <summary>
                Get a child URL segment
            </summary>
            <param name="urlSegment">URL segment</param>
            <returns></returns>
        </member>
        <member name="M:SMACD.AppTree.HttpServiceNode.#ctor(SMACD.AppTree.HostNode,System.String[])">
            <summary>
                Represents an HTTP service accessible via a specific protocol and port
            </summary>
            <param name="parent">Parent node</param>
            <param name="identifiers">Identifiers for node</param>
        </member>
        <member name="M:SMACD.AppTree.HttpServiceNode.#ctor">
            <summary>
                Represents an HTTP service accessible via a specific protocol and port
            </summary>
        </member>
        <member name="M:SMACD.AppTree.HttpServiceNode.ToString">
            <summary>
                String representation of HTTP Service artifact
            </summary>
            <returns></returns>
        </member>
        <member name="T:SMACD.AppTree.ObservableDictionary`2">
            <summary>
                Provides a dictionary for use with data binding.
            </summary>
            <typeparam name="TKey">Specifies the type of the keys in this collection.</typeparam>
            <typeparam name="TValue">Specifies the type of the values in this collection.</typeparam>
        </member>
        <member name="M:SMACD.AppTree.ObservableDictionary`2.#ctor">
            <summary>
                Initializes an instance of the class.
            </summary>
        </member>
        <member name="M:SMACD.AppTree.ObservableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
                Initializes an instance of the class using another dictionary as
                the key/value store.
            </summary>
        </member>
        <member name="E:SMACD.AppTree.ObservableDictionary`2.CollectionChanged">
            <summary>Event raised when the collection changes.</summary>
        </member>
        <member name="E:SMACD.AppTree.ObservableDictionary`2.PropertyChanged">
            <summary>Event raised when a property on the collection changes.</summary>
        </member>
        <member name="M:SMACD.AppTree.ObservableDictionary`2.RaisePropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
                Allows derived classes to raise custom property changed events.
            </summary>
        </member>
        <member name="M:SMACD.AppTree.ObservableDictionary`2.Add(`0,`1)">
            <summary>
                Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:SMACD.AppTree.ObservableDictionary`2.ContainsKey(`0)">
            <summary>
                Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the
                specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</param>
            <returns>
                true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise,
                false.
            </returns>
        </member>
        <member name="P:SMACD.AppTree.ObservableDictionary`2.Keys">
            <summary>
                Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the
                <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <returns>
                An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the object that implements
                <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </returns>
        </member>
        <member name="M:SMACD.AppTree.ObservableDictionary`2.Remove(`0)">
            <summary>
                Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
                true if the element is successfully removed; otherwise, false.  This method also returns false if
                <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </returns>
        </member>
        <member name="M:SMACD.AppTree.ObservableDictionary`2.TryGetValue(`0,`1@)">
            <summary>
                Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">
                When this method returns, the value associated with the specified key, if the key is found;
                otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed
                uninitialized.
            </param>
            <returns>
                true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element
                with the specified key; otherwise, false.
            </returns>
        </member>
        <member name="P:SMACD.AppTree.ObservableDictionary`2.Values">
            <summary>
                Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the
                <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <returns>
                An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the object that
                implements <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </returns>
        </member>
        <member name="P:SMACD.AppTree.ObservableDictionary`2.Item(`0)">
            <summary>
                Gets or sets the element with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="T:SMACD.AppTree.PathGeneration">
            <summary>
                A single Generation of Paths which matched the requested address
            </summary>
        </member>
        <member name="P:SMACD.AppTree.PathGeneration.Path">
            <summary>
                Path being tested
            </summary>
        </member>
        <member name="P:SMACD.AppTree.PathGeneration.PathSegmentIndex">
            <summary>
                Index of segment within Path which matched for this Generation
            </summary>
        </member>
        <member name="P:SMACD.AppTree.PathGeneration.PathSegment">
            <summary>
                Segment which matched for this Generation
            </summary>
        </member>
        <member name="P:SMACD.AppTree.PathGeneration.MatchingNode">
            <summary>
                AppTreeNode linked to Generation
            </summary>
        </member>
        <member name="P:SMACD.AppTree.PathGeneration.Children">
            <summary>
                Nodes which matched in the next Generation
            </summary>
        </member>
        <member name="P:SMACD.AppTree.PathGeneration.IsResultNode">
            <summary>
                If the node is matching the Path
            </summary>
        </member>
        <member name="M:SMACD.AppTree.PathGeneration.GetResultNodes">
            <summary>
                Retrieve all the nodes within this Path Generation set which are matched by the requested Path
            </summary>
            <returns></returns>
        </member>
        <member name="T:SMACD.AppTree.PathParserExtensions">
            <summary>
                Extensions to parse string Paths into Nodes
            </summary>
        </member>
        <member name="M:SMACD.AppTree.PathParserExtensions.NodeMeetsConstraints(System.String,SMACD.AppTree.AppTreeNode)">
            <summary>
                If a Node meets the constraints of a provided path segment
            </summary>
            <param name="pathSegment">Path segment</param>
            <param name="node">Node to test</param>
            <returns></returns>
        </member>
        <member name="M:SMACD.AppTree.PathParserExtensions.GetNodeByPath(System.String,SMACD.AppTree.RootNode)">
            <summary>
                Get a Node Path by its string path, provided a Root node
            </summary>
            <param name="path">Path to node(s)</param>
            <param name="root">Root node to search from</param>
            <returns></returns>
        </member>
        <member name="T:SMACD.AppTree.ProjectPointer">
            <summary>
                Describes a location in a Service Map which precipitated an event
            </summary>
        </member>
        <member name="P:SMACD.AppTree.ProjectPointer.Feature">
            <summary>
                Feature which creates the Action
            </summary>
        </member>
        <member name="P:SMACD.AppTree.ProjectPointer.UseCase">
            <summary>
                Use Case which creates the Action
            </summary>
        </member>
        <member name="P:SMACD.AppTree.ProjectPointer.AbuseCase">
            <summary>
                Abuse Case which creates the Action
            </summary>
        </member>
        <member name="T:SMACD.AppTree.RootNode">
            <summary>
                Represents the root-level node for all data
            </summary>
        </member>
        <member name="T:SMACD.AppTree.RootNode.ArtifactEventDelegate">
            <summary>
                Delegate used to describe an affected Artifact when an Event occurs
            </summary>
            <param name="affectedNode">Affected node</param>
        </member>
        <member name="P:SMACD.AppTree.RootNode.NodeViewName">
            <summary>
                A Razor component view which can be used to visualize the content of a given node
            </summary>
        </member>
        <member name="P:SMACD.AppTree.RootNode.SuppressEventFiring">
            <summary>
                Whether or not to suppress Artifact tree related events (useful during data loads or when responsiveness is not desired)
            </summary>
        </member>
        <member name="P:SMACD.AppTree.RootNode.LockTreeNodes">
            <summary>
                Prevent the creation of new nodes in the AppTree
            </summary>
        </member>
        <member name="P:SMACD.AppTree.RootNode.Item(System.String)">
            <summary>
                Hostname or IP of resource
            </summary>
            <param name="hostNameOrIp">Hostname/IP</param>
            <returns></returns>
        </member>
        <member name="E:SMACD.AppTree.RootNode.ArtifactCreated">
            <summary>
                Fired when an Artifact belonging to this tree
            </summary>
        </member>
        <member name="E:SMACD.AppTree.RootNode.ArtifactChanged">
            <summary>
                Fired when the data of an Artifact changes
            </summary>
        </member>
        <member name="E:SMACD.AppTree.RootNode.ArtifactChildAdded">
            <summary>
                Fired when an Artifact is added to a given Artifact
            </summary>
        </member>
        <member name="M:SMACD.AppTree.RootNode.#ctor(SMACD.AppTree.AppTreeNode)">
            <summary>
                Represents the root of an Artifact correlation tree
            </summary>
            <param name="parent">Parent node (should be null)</param>
        </member>
        <member name="M:SMACD.AppTree.RootNode.InvokeTreeNodeCreated(SMACD.AppTree.AppTreeNode)">
            <summary>
                Invoke the ArtifactCreated event
            </summary>
            <param name="newTreeNode">Created Artifact</param>
        </member>
        <member name="M:SMACD.AppTree.RootNode.InvokeTreeNodeChanged(SMACD.AppTree.AppTreeNode)">
            <summary>
                Invoke the ArtifactChanged event
            </summary>
            <param name="changedTreeNode">Artifact changed</param>
        </member>
        <member name="M:SMACD.AppTree.RootNode.InvokeTreeChildAdded(SMACD.AppTree.AppTreeNode)">
            <summary>
                Invoke the ArtifactChildAdded event
            </summary>
            <param name="nodeAddingChild">Newly added child Artifact</param>
        </member>
        <member name="T:SMACD.AppTree.ServiceNode">
            <summary>
                Represents a single service, listening on a port of a Host
            </summary>
        </member>
        <member name="T:SMACD.AppTree.ServiceNode.KnownServiceNodeTypes">
            <summary>
                Service types which are known by the system for investigation
            </summary>
        </member>
        <member name="F:SMACD.AppTree.ServiceNode.KnownServiceNodeTypes.Unknown">
            <summary>
                Service fingerprint failed
            </summary>
        </member>
        <member name="F:SMACD.AppTree.ServiceNode.KnownServiceNodeTypes.Http">
            <summary>
                Web (HTTP/S) service
            </summary>
        </member>
        <member name="P:SMACD.AppTree.ServiceNode.NodeViewName">
            <summary>
                A Razor component view which can be used to visualize the content of a given node
            </summary>
        </member>
        <member name="P:SMACD.AppTree.ServiceNode.Host">
            <summary>
                Hostname/IP of this Service
            </summary>
        </member>
        <member name="P:SMACD.AppTree.ServiceNode.ServiceNodeType">
            <summary>
                Specific type of the service node for more information
            </summary>
        </member>
        <member name="P:SMACD.AppTree.ServiceNode.Protocol">
            <summary>
                Port Protocol Type
            </summary>
        </member>
        <member name="P:SMACD.AppTree.ServiceNode.Port">
            <summary>
                Port number
            </summary>
        </member>
        <member name="P:SMACD.AppTree.ServiceNode.Detail">
            <summary>
                Details around a Service
            </summary>
        </member>
        <member name="M:SMACD.AppTree.ServiceNode.#ctor(SMACD.AppTree.HostNode,System.String[])">
            <summary>
                Represents a single service, listening on a port of a Host
            </summary>
            <param name="parent">Parent node</param>
            <param name="identifiers">Identifiers for node</param>
        </member>
        <member name="M:SMACD.AppTree.ServiceNode.#ctor">
            <summary>
                Represents a single service, listening on a port of a Host
            </summary>
        </member>
        <member name="M:SMACD.AppTree.ServiceNode.ToString">
            <summary>
                String representation of Service Port Artifact
            </summary>
            <returns></returns>
        </member>
        <member name="T:SMACD.AppTree.UrlNode">
            <summary>
                Represents a single URL segment (directory or file) in some part of the application
            </summary>
        </member>
        <member name="P:SMACD.AppTree.UrlNode.NodeViewName">
            <summary>
                A Razor component view which can be used to visualize the content of a given node
            </summary>
        </member>
        <member name="P:SMACD.AppTree.UrlNode.UrlSegment">
            <summary>
                String representing this segment of a URL
            </summary>
        </member>
        <member name="P:SMACD.AppTree.UrlNode.HasRequests">
            <summary>
                If this URL segment has any Requests
            </summary>
        </member>
        <member name="P:SMACD.AppTree.UrlNode.Requests">
            <summary>
                Requests to this URL
            </summary>
        </member>
        <member name="P:SMACD.AppTree.UrlNode.Detail">
            <summary>
                Details around a URL segment
            </summary>
        </member>
        <member name="P:SMACD.AppTree.UrlNode.Item(System.String)">
            <summary>
                Get a child URL segment
            </summary>
            <param name="urlSegment">URL segment</param>
            <returns></returns>
        </member>
        <member name="M:SMACD.AppTree.UrlNode.#ctor(SMACD.AppTree.AppTreeNode,System.String[])">
            <summary>
                Represents a single URL segment (directory or file) in some part of the application
            </summary>
            <param name="parent">Parent node</param>
            <param name="identifiers">Identifiers for node</param>
        </member>
        <member name="M:SMACD.AppTree.UrlNode.#ctor">
            <summary>
                Represents a single URL segment (directory or file) in some part of the application
            </summary>
        </member>
        <member name="M:SMACD.AppTree.UrlNode.AddRequest(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                Add a Request description to this URL segment
            </summary>
            <param name="method">HTTP Method</param>
            <param name="fields">Fields to send</param>
            <param name="headers">Headers to send</param>
        </member>
        <member name="M:SMACD.AppTree.UrlNode.GetEntireUrl">
            <summary>
                Get entire URL from all segments (assuming this item is the last URL segment)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SMACD.AppTree.UrlNode.ToString">
            <summary>
                String representation of URL segment
            </summary>
            <returns></returns>
        </member>
        <member name="T:SMACD.AppTree.UrlRequestNode">
            <summary>
                Represents a single request to a URL in some part of the application
            </summary>
        </member>
        <member name="P:SMACD.AppTree.UrlRequestNode.NodeViewName">
            <summary>
                A Razor component view which can be used to visualize the content of a given node
            </summary>
        </member>
        <member name="P:SMACD.AppTree.UrlRequestNode.Url">
            <summary>
                Entire URL associated with this request
            </summary>
        </member>
        <member name="P:SMACD.AppTree.UrlRequestNode.Method">
            <summary>
                HTTP method used to access URL
            </summary>
        </member>
        <member name="P:SMACD.AppTree.UrlRequestNode.Fields">
            <summary>
                Fields to be sent with request
            </summary>
        </member>
        <member name="P:SMACD.AppTree.UrlRequestNode.Headers">
            <summary>
                Headers to be sent with request
            </summary>
        </member>
        <member name="P:SMACD.AppTree.UrlRequestNode.Detail">
            <summary>
                Details around a URL segment
            </summary>
        </member>
        <member name="P:SMACD.AppTree.UrlRequestNode.Item(System.String)">
            <summary>
                Get a child URL segment
            </summary>
            <param name="urlSegment">URL segment</param>
            <returns></returns>
        </member>
        <member name="M:SMACD.AppTree.UrlRequestNode.#ctor(SMACD.AppTree.UrlNode,System.String[])">
            <summary>
                Represents a single request to a URL in some part of the application
            </summary>
            <param name="parent">Parent node</param>
            <param name="identifiers">Identifiers for node</param>
        </member>
        <member name="M:SMACD.AppTree.UrlRequestNode.#ctor">
            <summary>
                Represents a single request to a URL in some part of the application
            </summary>
        </member>
        <member name="M:SMACD.AppTree.UrlRequestNode.GetEntireUrl">
            <summary>
                Get entire URL from all segments (assuming this item is the last URL segment)
            </summary>
            <returns></returns>
        </member>
        <member name="M:SMACD.AppTree.UrlRequestNode.ToString">
            <summary>
                String representation of URL segment
            </summary>
            <returns></returns>
        </member>
        <member name="T:SMACD.AppTree.DataProviderSpecificity">
            <summary>
                Specificity of the data provider which created this data
            </summary>
        </member>
        <member name="F:SMACD.AppTree.DataProviderSpecificity.Unknown">
            <summary>
                Unknown specificity
            </summary>
        </member>
        <member name="F:SMACD.AppTree.DataProviderSpecificity.GeneralPurposeScanner">
            <summary>
                Data provider was a general-purpose scanner
            </summary>
        </member>
        <member name="F:SMACD.AppTree.DataProviderSpecificity.ServiceSpecificScanner">
            <summary>
                Data provider is designed for the specific service
            </summary>
        </member>
        <member name="F:SMACD.AppTree.DataProviderSpecificity.ExploitSpecificScanner">
            <summary>
                Data provider is designed for a specific exploit
            </summary>
        </member>
        <member name="F:SMACD.AppTree.DataProviderSpecificity.Explicit">
            <summary>
                Data provider is explicit (i.e. known data)
            </summary>
        </member>
        <member name="T:SMACD.AppTree.Versionable">
            <summary>
                Represents data which can be [partially] written to by multiple sources and coalesced to a single object
            </summary>
        </member>
        <member name="T:SMACD.AppTree.Versionable`1">
            <summary>
                Represents data which can be [partially] written to by multiple sources and coalesced to a single object
            </summary>
        </member>
        <member name="P:SMACD.AppTree.Versionable`1.CoalesceFunction">
            <summary>
                Coalesce function; Default function orders layers by score and writes non-null values
            </summary>
        </member>
        <member name="P:SMACD.AppTree.Versionable`1.UnderlyingCollection">
            <summary>
                Underlying collection containing each version of data
            </summary>
        </member>
        <member name="P:SMACD.AppTree.Versionable`1.Item(System.Guid)">
            <summary>
                Get a copy of data by its Version ID
            </summary>
            <param name="uuid">Version ID</param>
            <returns></returns>
        </member>
        <member name="M:SMACD.AppTree.Versionable`1.#ctor(`0,SMACD.AppTree.DataVersionDescriptor)">
            <summary>
                Represents data which can be [partially] written to by multiple sources and coalesced to a single object
            </summary>
            <param name="data">Initial version of data</param>
            <param name="dataVersionDescriptor">Initial data version descriptor</param>
        </member>
        <member name="M:SMACD.AppTree.Versionable`1.#ctor(`0,System.String,SMACD.AppTree.DataProviderSpecificity,System.Double)">
            <summary>
                Represents data which can be [partially] written to by multiple sources and coalesced to a single object
            </summary>
            <param name="data">Initial version of data</param>
            <param name="extensionIdentifier">Extension identifier</param>
            <param name="dataProviderSpecificity">Specificity of data provider</param>
            <param name="confidence">Confidence in data accuracy</param>
        </member>
        <member name="M:SMACD.AppTree.Versionable`1.#ctor">
            <summary>
                Represents data which can be [partially] written to by multiple sources and coalesced to a single object
            </summary>
        </member>
        <member name="M:SMACD.AppTree.Versionable`1.Set(`0,SMACD.AppTree.DataVersionDescriptor)">
            <summary>
                Add a version of data based on a given object and version descriptor
            </summary>
            <param name="data">Data to add</param>
            <param name="dataVersionDescriptor">Descriptor of version for this data payload</param>
        </member>
        <member name="M:SMACD.AppTree.Versionable`1.Set(`0,System.String,SMACD.AppTree.DataProviderSpecificity,System.Double)">
            <summary>
                Add a version of data based on a given object and version descriptor
            </summary>
            <param name="data">Data to add</param>
            <param name="extensionIdentifier">Extension identifier</param>
            <param name="dataProviderSpecificity">Specificity of data provider</param>
            <param name="confidence">Confidence in data accuracy</param>
        </member>
        <member name="M:SMACD.AppTree.Versionable`1.Coalesced">
            <summary>
                Get a flattened copy of the Versionable which represents the "best" and most "complete" data available from all version layers
            </summary>
            <returns></returns>
        </member>
        <member name="M:SMACD.AppTree.Versionable`1.op_Implicit(SMACD.AppTree.Versionable{`0})~`0">
            <summary>
                Convert the Versionable to its native TData
            </summary>
            <param name="v">Versionable data</param>
        </member>
        <member name="M:SMACD.AppTree.Versionable`1.ToString">
            <summary>
                String representation of coalesced value
            </summary>
            <returns></returns>
        </member>
        <member name="M:SMACD.AppTree.Versionable`1.DefaultCoalesceFunction(System.Collections.Generic.List{System.Tuple{SMACD.AppTree.DataVersionDescriptor,`0}})">
            <summary>
                Default coalesce function - Orders versions by Score, applies non-null values from worst to best score
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:SMACD.AppTree.Vulnerability">
            <summary>
                Represents a generalized Vulnerability found by one or more scanners
            </summary>
        </member>
        <member name="T:SMACD.AppTree.Vulnerability.Confidences">
            <summary>
                Confidence in the accuracy of this Vulnerability
            </summary>
        </member>
        <member name="F:SMACD.AppTree.Vulnerability.Confidences.FalsePositive">
            <summary>
                False Positive
            </summary>
        </member>
        <member name="F:SMACD.AppTree.Vulnerability.Confidences.Low">
            <summary>
                Low confidence
            </summary>
        </member>
        <member name="F:SMACD.AppTree.Vulnerability.Confidences.Medium">
            <summary>
                Medium confidence
            </summary>
        </member>
        <member name="F:SMACD.AppTree.Vulnerability.Confidences.High">
            <summary>
                High confidence
            </summary>
        </member>
        <member name="T:SMACD.AppTree.Vulnerability.RiskLevels">
            <summary>
                Level of risk incurred through this Vulnerability
            </summary>
        </member>
        <member name="F:SMACD.AppTree.Vulnerability.RiskLevels.Informational">
            <summary>
                Informational only
            </summary>
        </member>
        <member name="F:SMACD.AppTree.Vulnerability.RiskLevels.Low">
            <summary>
                Low risk
            </summary>
        </member>
        <member name="F:SMACD.AppTree.Vulnerability.RiskLevels.Medium">
            <summary>
                Medium risk
            </summary>
        </member>
        <member name="F:SMACD.AppTree.Vulnerability.RiskLevels.High">
            <summary>
                High risk
            </summary>
        </member>
        <member name="P:SMACD.AppTree.Vulnerability.RiskLevel">
            <summary>
                Risk Level of the Vulnerability
            </summary>
        </member>
        <member name="P:SMACD.AppTree.Vulnerability.Confidence">
            <summary>
                Confidence the attacker has in the Vulnerability
            </summary>
        </member>
        <member name="P:SMACD.AppTree.Vulnerability.Occurrences">
            <summary>
                Number of times the Vulnerability occurs
            </summary>
        </member>
        <member name="P:SMACD.AppTree.Vulnerability.Title">
            <summary>
                Title of Vulnerability
            </summary>
        </member>
        <member name="P:SMACD.AppTree.Vulnerability.Description">
            <summary>
                Vulnerability's description
            </summary>
        </member>
        <member name="P:SMACD.AppTree.Vulnerability.Remedy">
            <summary>
                Remedy for Vulnerability (if any)
            </summary>
        </member>
        <member name="P:SMACD.AppTree.Vulnerability.AdditionalInformation">
            <summary>
                Additional information about vulnerability
            </summary>
        </member>
        <member name="P:SMACD.AppTree.Vulnerability.ReferenceUrl">
            <summary>
                URL containing more information on vulnerability and/or its solution
            </summary>
        </member>
        <member name="P:SMACD.AppTree.Vulnerability.ItemEvidence">
            <summary>
                Evidence for what part of the item was affected by the Vulnerability
            </summary>
        </member>
    </members>
</doc>
