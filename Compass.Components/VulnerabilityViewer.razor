@if (Vulnerabilities != null && Vulnerabilities.Any())
{
    <div class="card shadow mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h6 class="text-primary font-weight-bold m-0">Vulnerabilities Identified</h6>
            <div class="col-6 text-right">
                @if (Vulnerabilities.Any(v => v.RiskLevel == Vulnerability.RiskLevels.Informational))
                {
                    <span class="badge badge-info" data-toggle="tooltip" title="@Vulnerabilities.Count(v => v.RiskLevel == Vulnerability.RiskLevels.Informational) Informational Issues">
                        <i class="fa fa-info-circle"></i> @Vulnerabilities.Count(v => v.RiskLevel == Vulnerability.RiskLevels.Informational)
                    </span>
                }
                @if (Vulnerabilities.Any(v => v.RiskLevel == Vulnerability.RiskLevels.Low))
                {
                    <span class="badge badge-secondary" data-toggle="tooltip" title="@Vulnerabilities.Count(v => v.RiskLevel == Vulnerability.RiskLevels.Low) Low Risk Issues">
                        <i class="fas fa-arrow-alt-circle-down"></i> @Vulnerabilities.Count(v => v.RiskLevel == Vulnerability.RiskLevels.Low)
                    </span>
                }
                @if (Vulnerabilities.Any(v => v.RiskLevel == Vulnerability.RiskLevels.Medium))
                {
                    <span class="badge badge-warning" data-toggle="tooltip" title="@Vulnerabilities.Count(v => v.RiskLevel == Vulnerability.RiskLevels.Medium) Warnings">
                        <i class="fa fa-exclamation-triangle"></i> @Vulnerabilities.Count(v => v.RiskLevel == Vulnerability.RiskLevels.Medium)
                    </span>
                }
                @if (Vulnerabilities.Any(v => v.RiskLevel == Vulnerability.RiskLevels.High))
                {
                    <span class="badge badge-danger" data-toggle="tooltip" title="@Vulnerabilities.Count(v => v.RiskLevel == Vulnerability.RiskLevels.High) Critical Issues">
                        <i class="fa fa-bomb"></i> @Vulnerabilities.Count(v => v.RiskLevel == Vulnerability.RiskLevels.High)
                    </span>
                }
                </div>
            <div class="dropdown no-arrow">
                <button class="btn btn-link btn-sm" type="button" @onclick="(() => IsVisible = !IsVisible)">
                    @if (IsVisible)
                    {
                        <i data-toggle="tooltip" title="Less" class="fas fa-sort-down text-gray-500"></i>
                    }
                    else
                    {
                        <i data-toggle="tooltip" title="More" class="fas fa-sort-up text-gray-500"></i>
                    }
                </button>
            </div>
        </div>
        <div class="card-body">
            @if (IsVisible)
            {
                <div class="table-responsive">
                    <DataGrid TItem="Vulnerability"
                              Data="@Vulnerabilities"
                              @bind-SelectedRow="@SelectedVulnerability"
                              PageSize="10"
                              ShowPager="true">
                        <DataGridCommandColumn TItem="Vulnerability" />
                        <DataGridColumn TItem="Vulnerability" Field="@nameof(Vulnerability.Title)" Caption="Title" AllowSort="true" />
                        <DataGridColumn TItem="Vulnerability" Field="@nameof(Vulnerability.Description)" Caption="Description" AllowSort="false">
                            <DisplayTemplate>
                                @EmitHtml((context as Vulnerability).Description)
                            </DisplayTemplate>
                        </DataGridColumn>
                        <DataGridColumn TItem="Vulnerability" Field="@nameof(Vulnerability.Occurrences)" Caption="Occurrences" AllowSort="true" />
                        <DataGridColumn TItem="Vulnerability" Field="@nameof(Vulnerability.Confidence)" Caption="Confidence" AllowSort="true" />
                        <DataGridColumn TItem="Vulnerability" Field="@nameof(Vulnerability.RiskLevel)" Caption="Risk Level" AllowSort="true" Direction="SortDirection.Descending" />
                        <DataGridColumn TItem="Vulnerability" Field="@nameof(Vulnerability.Remedy)" Caption="Remedy" AllowSort="false">
                            <DisplayTemplate>
                                @EmitHtml((context as Vulnerability).Remedy)
                            </DisplayTemplate>
                        </DataGridColumn>
                    </DataGrid>
                </div>
            }
        </div>
    </div>
}

@code {
    private IEnumerable<Vulnerability> _vulnerabilities;

    [Parameter]
    public IEnumerable<Vulnerability> Vulnerabilities
    {
        get => _vulnerabilities;
        set
        {
            if (_vulnerabilities != null && _vulnerabilities.Count() <= 5) // if there are only a few, show them by default
            {
                IsVisible = true;
            }
        }
    }

    public Vulnerability SelectedVulnerability { get; set; }

    private bool IsVisible { get; set; }

    public RenderFragment EmitHtml(string html) => builder =>
    {
        builder.AddMarkupContent(0, html);
    };
}
