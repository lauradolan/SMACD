@using SMACD.Artifacts.Data;
@if (Attachments != null && Attachments.Any())
{
<div class="card shadow mb-4">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h6 class="text-primary font-weight-bold m-0">Data Attachments (Supporting Evidence)</h6>
        <div class="dropdown no-arrow">
            <button class="btn btn-link btn-sm dropdown-toggle" data-toggle="dropdown" aria-expanded="false" type="button"><i class="fas fa-ellipsis-v text-gray-400"></i></button>
            <div class="dropdown-menu shadow dropdown-menu-right animated--fade-in" role="menu">
                @if (IsVisible)
                {
                    <a class="dropdown-item" role="presentation" href="javascript:;" @onclick="(() => IsVisible = false)">&nbsp;Hide</a>
                }
                else
                {
                    <a class="dropdown-item" role="presentation" href="javascript:;" @onclick="(() => IsVisible = true)">&nbsp;Show</a>
                }
            </div>
        </div>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <DataGrid TItem="DataArtifact"
                      Data="@Attachments"
                      @bind-SelectedRow="@SelectedArtifact">
                <DataGridCommandColumn TItem="DataArtifact" />
                <DataGridColumn TItem="DataArtifact" Field="@nameof(DataArtifact.Name)" Caption="Name" AllowSort="true" />
                <DataGridColumn TItem="DataArtifact" Caption="Data Type">
                    <DisplayTemplate>
                        @if (context is ObjectArtifact)
                        {<i title="Object" class="fa fa-cube text-muted"></i>}
                        @if (context is StringArtifact)
                        {<i title="String" class="fa fa-quote-left text-muted"></i>}
                        @if (context is NativeDirectoryArtifact)
                        {<i title="Virtual Filesystem" class="fa fa-sitemap text-muted"></i>}
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="DataArtifact" Caption="Size">
                    <DisplayTemplate>
                        @SizeSuffix(context.StoredData.Count())
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="DataArtifact" Caption="Data">
                    <DisplayTemplate>
                        @if (context is ObjectArtifact)
                        {<pre>@(System.Text.UnicodeEncoding.Unicode.GetString(((ObjectArtifact)context).StoredData))</pre>}
                        @if (context is StringArtifact)
                        {<pre>@(((StringArtifact)context).Get())</pre>}
                        @if (context is NativeDirectoryArtifact)
                        {<span>@(((NativeDirectoryArtifact)context).StoredData.Count()) bytes</span>}
                    </DisplayTemplate>
                </DataGridColumn>
            </DataGrid>
        </div>
    </div>
</div>
}

@code {
    [Parameter]
    public Data.DataArtifactCollection Attachments { get; set; }

    public Data.DataArtifact SelectedArtifact { get; set; }

    public bool IsVisible { get; set; } = false;

    public RenderFragment EmitHtml(string html) => builder =>
    {
        builder.AddMarkupContent(0, html);
    };

    static readonly string[] SizeSuffixes =
                   { "bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB" };
    static string SizeSuffix(Int64 value, int decimalPlaces = 1)
    {
        if (decimalPlaces < 0) { throw new ArgumentOutOfRangeException("decimalPlaces"); }
        if (value < 0) { return "-" + SizeSuffix(-value); }
        if (value == 0) { return string.Format("{0:n" + decimalPlaces + "} bytes", 0); }

        // mag is 0 for bytes, 1 for KB, 2, for MB, etc.
        int mag = (int)Math.Log(value, 1024);

        // 1L << (mag * 10) == 2 ^ (10 * mag) 
        // [i.e. the number of bytes in the unit corresponding to mag]
        decimal adjustedSize = (decimal)value / (1L << (mag * 10));

        // make adjustment when the value is large enough that
        // it would round up to 1000 or more
        if (Math.Round(adjustedSize, decimalPlaces) >= 1000)
        {
            mag += 1;
            adjustedSize /= 1024;
        }

        return string.Format("{0:n" + decimalPlaces + "} {1}",
            adjustedSize,
            SizeSuffixes[mag]);
    }
}