using Newtonsoft.Json;
using System.Collections.Generic;

namespace Synthesys.Plugins.OwaspZap
{
    public class ZapJsonReport
    {
        /// <summary>
        ///     Sites (generally only one)
        /// </summary>
        public IEnumerable<ZapJsonSite> Site { get; set; }
    }

    public class ZapJsonSite
    {
        /// <summary>
        ///     Site name
        /// </summary>
        [JsonProperty("@name")]
        public string Name { get; set; }

        /// <summary>
        ///     Hostname being accessed
        /// </summary>
        [JsonProperty("@host")]
        public string Host { get; set; }

        /// <summary>
        ///     Port being accessed
        /// </summary>
        [JsonProperty("@port")]
        public string Port { get; set; }

        /// <summary>
        ///     If the web server is using SSL
        /// </summary>
        [JsonProperty("@ssl")]
        public string IsSSL { get; set; }

        /// <summary>
        ///     Alerts generated by the ZAProxy scanner
        /// </summary>
        public IEnumerable<ZapJsonAlertWithInstances> Alerts { get; set; }
    }

    public class ZapJsonAlertWithInstances : ZapJsonAlert
    {
        /// <summary>
        ///     Instances of the alert
        /// </summary>
        public IEnumerable<ZapJsonAlertInstance> Instances { get; set; }
    }

    public class ZapJsonAlert
    {
        /// <summary>
        ///     Plugin which created the alert
        /// </summary>
        public string PluginId { get; set; }

        /// <summary>
        ///     Alert type
        /// </summary>
        public string Alert { get; set; }

        /// <summary>
        ///     Name of alert
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        ///     Risk code for alert
        /// </summary>
        public int RiskCode { get; set; }

        /// <summary>
        ///     Confidence for alert
        /// </summary>
        public int Confidence { get; set; }

        /// <summary>
        ///     Description of risk
        /// </summary>
        public string RiskDesc { get; set; }

        /// <summary>
        ///     Description of vulnerability
        /// </summary>
        public string Desc { get; set; }

        /// <summary>
        ///     Number of occurrences of alert
        /// </summary>
        public string Count { get; set; }

        /// <summary>
        ///     Solution to remedy the alert
        /// </summary>
        public string Solution { get; set; }

        /// <summary>
        ///     Additional information
        /// </summary>
        public string OtherInfo { get; set; }

        /// <summary>
        ///     Reference URL
        /// </summary>
        public string Reference { get; set; }

        /// <summary>
        ///     CWE (Common Weakness Enumeration) ID (if any)
        /// </summary>
        public string CWEId { get; set; }

        /// <summary>
        ///     WASC (Web Application Security Consortium) ID (if any)
        /// </summary>
        public string WASCId { get; set; }

        /// <summary>
        ///     Source ID
        /// </summary>
        public string SourceId { get; set; }
    }

    public class ZapJsonAlertInstance
    {
        /// <summary>
        ///     URI where alert occurs
        /// </summary>
        public string Uri { get; set; }

        /// <summary>
        ///     HTTP method used to access URI
        /// </summary>
        public string Method { get; set; }

        /// <summary>
        ///     Evidence involved in request
        /// </summary>
        public string Evidence { get; set; }

        /// <summary>
        ///     Parameter(s)
        /// </summary>
        public string Param { get; set; }
    }
}