using Newtonsoft.Json;
using SMACD.Artifacts;
using System;
using System.Collections.Generic;

namespace Synthesys.SDK
{
    /// <summary>
    ///     Encapsulates interesting runtime and output information from an Extension.
    ///     This is a generalized container--Extensions should use the "SerializedExtensionSpecificReport" property to store more specific information for report viewing.
    /// </summary>
    public sealed class ExtensionReport
    {
        /// <summary>
        ///     Identifier of Extension which created this Report
        /// </summary>
        public string ExtensionIdentifier { get; set; }

        /// <summary>
        ///     List of paths to Artifacts that were registered with the Extension
        /// </summary>
        public List<string> AffectedArtifactPaths { get; set; } = new List<string>();

        /// <summary>
        ///     Pointer to Service Map entry which spawned the creation of this report
        /// </summary>
        public ProjectPointer ProjectPointer { get; set; }

        /// <summary>
        ///     How long the Extension took to execute
        /// </summary>
        public TimeSpan Runtime { get; set; }

        /// <summary>
        ///     Number of points scored on the Extension's own scale
        /// </summary>
        public int RawPointsScored { get; set; }

        /// <summary>
        ///     Maximum number of points available on the Extension's own scale
        /// </summary>
        public int MaximumPointsAvailable { get; set; }

        /// <summary>
        ///     Adjusted score out of 1.0
        /// </summary>
        public double AdjustedScore =>
            MaximumPointsAvailable > 0 ? (double) RawPointsScored / MaximumPointsAvailable : 0;

        /// <summary>
        ///     Name of the View describing this ExtensionReport
        /// </summary>
        public string ReportViewName { get; set; }

        /// <summary>
        ///     Name of the summary control to represent this ExtensionReport
        /// </summary>
        public string ReportSummaryName { get; set; }

        /// <summary>
        ///     Serialized version of the Extension-specific report
        /// </summary>
        public string SerializedExtensionSpecificReport { get; set; }

        /// <summary>
        ///     Vulnerabilities generated by this Extension
        /// </summary>
        public List<Vulnerability> Vulnerabilities { get; set; } = new List<Vulnerability>();

        /// <summary>
        ///     Optional Exception, if an error was encountered while generating the report
        /// </summary>
        public Exception ErrorEncountered { get; set; }

        /// <summary>
        ///     Deserialize the Extension-specific report with the default serializer
        /// </summary>
        /// <typeparam name="T">Report type</typeparam>
        /// <returns>Instance of Report, deserialized from SerializedExtensionSpecificReport</returns>
        public T GetExtensionSpecificReport<T>()
        {
            return JsonConvert.DeserializeObject<T>(SerializedExtensionSpecificReport, new JsonSerializerSettings()
            {
                TypeNameAssemblyFormatHandling = TypeNameAssemblyFormatHandling.Simple
            });
        }

        /// <summary>
        ///     Serialize the Extension-specific report with the default serializer
        /// </summary>
        /// <typeparam name="T">Report type</typeparam>
        /// <returns></returns>
        public void SetExtensionSpecificReport<T>(T obj)
        {
            SerializedExtensionSpecificReport = JsonConvert.SerializeObject(obj, new JsonSerializerSettings()
            {
                TypeNameAssemblyFormatHandling = TypeNameAssemblyFormatHandling.Simple
            });
        }

        /// <summary>
        ///     Create a blank report
        /// </summary>
        /// <returns></returns>
        public static ExtensionReport Blank()
        {
            return new ExtensionReport();
        }

        /// <summary>
        ///     Create an error-containing report
        /// </summary>
        /// <param name="ex">Exception generated</param>
        /// <returns></returns>
        public static ExtensionReport Error(Exception ex)
        {
            return new ExtensionReport() { ErrorEncountered = ex };
        }

        /// <summary>
        ///     Finalize report by disconnecting TaskDescriptor from recursive loops
        /// </summary>
        /// <returns></returns>
        public ExtensionReport FinalizeReport()
        {
            // TODO: Handle reattachments so we don't orphan reports away from their artifact anchors
            //TaskDescriptor.ArtifactRoot = null;
            
            // TODO: Anything left to finalize?

            return this;
        }
    }
}